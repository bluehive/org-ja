This is org-ja, produced by makeinfo version 4.13 from org-ja.texi.

このマニュアルは、Org-mode 7.5に対応しています。

   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software
Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.3 or
     any later version published by the Free Software Foundation; with no
     Invariant Sections, with the Front-Cover texts being "A GNU Manual,"
     and with the Back-Cover Texts as in (a) below.  A copy of the license
     is included in the section entitled "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom."

     This document is part of a collection distributed under the GNU Free
     Documentation License.  If you want to distribute this document
     separately from the collection, you can do so by adding a copy of the
     license to the document, as described in section 6 of the license.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Org Mode: (org-ja).        Outline-based notes management and organizer
                               (Japanese translation)
END-INFO-DIR-ENTRY


File: org-ja,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

Org Mode マニュアル
************************

このマニュアルは、Org-mode 7.5に対応しています。

   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software
Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.3 or
     any later version published by the Free Software Foundation; with no
     Invariant Sections, with the Front-Cover texts being "A GNU Manual,"
     and with the Back-Cover Texts as in (a) below.  A copy of the license
     is included in the section entitled "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom."

     This document is part of a collection distributed under the GNU Free
     Documentation License.  If you want to distribute this document
     separately from the collection, you can do so by adding a copy of the
     license to the document, as described in section 6 of the license.

* Menu:

* Introduction::             さあ、はじめよう
* Document Structure::       ツリーはあなたの脳のように動作します。
* Tables::                   あっという間にフォーマットする魔法
* Hyperlinks::               コンテクストにおけるノート
* TODO Items::               全ツリーの枝をTODOアイテムになれます
* Tags::                     見出しのタグ付けとタグの組み合せによる検索
* Properties and Columns::   エントリーについての情報を保存する
* 日付や時間::          計画のためにアイテムを扱いやすくする
* Capture - Refile - Archive::  プロジェクトへの入出力
* Agenda Views::             さまざまな情報をビューにまとめて表示する
* Markup::                   リッチなエクスポートのための下準備
* Exporting::                ノートの共有と公開
* Publishing::               相互にリンクしたOrg-modeのファイルでウェブサイ
トを作る
* Working With Source Code::  コードブロックの出力、評価、そしてtangle
* Miscellaneous::            その他の機能
* Hacking::                  Org-modeをハックする方法
* MobileOrg::                モバイルデバイスでのタスクの閲覧とキャプチャ
* History and Acknowledgments::  Org-modeがどこからやってきたか
* Main Index::               Org-modeのコンセプトと特徴のインデックス
* Key Index::                キーバインドのインデックス
* Command and Function Index::  コマンドの名称と内部関数
* Variable Index::           マニュアルで言及した変数

 --- ノードリストの細目 ---



Introduction



* Summary::                  Org-modeで何ができるか
* Installation::             Org-modeのインストール
* アクティベーション::  Org-modeを特定のバッファで有効にする方法
* Feedback::                 バグ報告、アイデア、パッチなど
* Conventions::              マニュアルで使われる植字の慣例

ドキュメントの構造



* Outlines::                 Org-modeはoutline-modeをベースにしています
* Headlines::                org-modeの階層構造の見出しをどう組み込むか
* Visibility cycling::       簡単な操作で表示、非表示を切り替える
* Motion::                   他の見出しにジャンプする
* Structure editing::        見出しの順序と階層を変更する
* Sparse trees::             文脈の中に埋め込まれた一致
* Plain lists::              １つのエントリーの中に階層のある構造を追加する
* Drawers::                  いろいろなものを隠す
* Blocks::                   ブロック単位で折りたたむ
* Footnotes::                org-modeの構文の中で脚注はどのように規定される
のか
* Orgstruct mode::           org-mode外のモードでの階層編集

Tables



* Built-in table editor::    単純なテーブル
* 列幅と整列::          自動設定を解除する
* Column groups::            縦の線を引き金にしてグループを作る
* Orgtbl mode::              マイナーモードとしてのテーブルエディタ
* The spreadsheet::          テーブルエディタはスプレッドシートの能力を持つ
* Org-Plot::                 org-modeのテーブルからプロットする

The spreadsheet



* References::               どうやって他のフィールドや範囲を参照するか
* Formula syntax for Calc::  Calcを使って計算する
* Formula syntax for Lisp::  Emacs Lispで数式を書く
* Field and range formulas::  特定の（範囲の）フィールドのための数式
* Column formulas::          カラム全体に有効な数式
* Editing and debugging formulas::  数式を修正する
* Updating the table::       依存関係にあるすべてのフィールドを再計算する
* Advanced features::        フィールド名、パラメータ、自動再計算

Hyperlinks



* Link format::              Org-modeでのリンクのフォーマット
* Internal links::           現在のファイルの別の場所へのリンク
* External links::           URL形式のリンク
* Handling links::           創造、挿入、追随
* Using links outside Org::  Cのソースコードからのリンク？
* Link abbreviations::       複雑なリンクを書くためのショートカット
* Search options::           特定の場所へのリンク
* Custom searches::          デフォルトの検索が充分ではないとき

Internal links



* Radio targets::            プレーンテキストのリンクをターゲットに起動させ
る

TODOアイテム



* TODO basics::              登録したTODOのマーキングと表示
* TODO extensions::          ワークフローと割り当て
* Progress logging::         進行管理のための日付とメモ
* Priorities::               他より重要なものもある
* Breaking down tasks::      タスクを管理可能な単位に分解する
* Checkboxes::               リストをチェックする

TODOキーワードの拡張的な使い方



* Workflow states::          TODOからDONEまでの流れ
* TODO types::               私はこの仕事をこなす。フレッドは休む。
* Multiple sets in one file::  ごちゃまぜにしてもやり方は見つけられる
* Fast access to TODO states::  状態を選択するための文字
* Per-file keywords::        ファイルが違えば、やりたい事も違う
* Faces for TODO keywords::  状態のハイライト
* TODO dependencies::        他のタスクの終了を待たないといけないタスクがあ
る時

Progress logging



* Closing items::            DONEとなったのはいつ？
* Tracking TODO state changes::  状態が変わったのはいつですか？
* 習慣の追跡::          どれだけ、続けられていますか？

Tags



* Tag inheritance::          アウトラインのツリー構造に沿ってタグ付けされる
* Setting tags::             見出しにタグをつける
* Tag searches::             タグの組み合わせで検索する

プロパティ（属性）とカラム（列）



* Property syntax::          プロパティの表記の仕方
* Special properties::       他のorg-modeの機能を使用する
* Property searches::        プロパティ値の一致作業
* Property inheritance::     ツリー上でのプロパティの伝達
* Column view::              表による表示と修正
* Property API::             Lispプログラマのためのプロパティ

Column view



* Defining columns::         カラムの書式のプロパティ
* Using column view::        カラム表示の作り方と使い方
* カラム表示の保存::  カラム表示用の動的ブロック

Defining columns



* Scope of column definitions::  カラム設定の定義範囲の指定方法は？
* Column attributes::        カラム内の表示と値

日付と時刻



* Timestamps::               ツリーに時間の割り当て
* Creating timestamps::      タイムスタンプを挿入するコマンド
* Deadlines and scheduling::  作業計画をたてる
* Clocking work time::       タスクに費す時間を追跡する
* Effort estimates::         事前に作業活動を計画する
* Relative timer::           実行中のタイマに関する注意
* カウントダウンタイマ::  タスクのカウントダウンタイマを起動する

Creating timestamps



* The date/time prompt::     日付と時刻入力のサポート
* Custom time format::       日付を異なる見た目にする

Deadlines and scheduling



* Inserting deadline/schedule::  計画項目
* Repeated tasks::           何度も現れる項目

Clocking work time



* Clocking commands::        時計の開始と終了
* The clock table::          詳細な報告
* Resolving idle time::      空いた時間を解決する

Capture - Refile - Archive



* Capture::                  新しいものをキャプチャする
* Attachments::              タスクにファイルを追加する
* RSS Feeds::                RSSフィードから取り込む
* Protocols::                外部（e.g.
                               ブラウザ）からEmacsとOrg-modeにアクセスする
* Refiling notes::           別な場所にツリーを移動する
* Archiving::                完了したプロジェクトの扱い方

Capture



* Setting up capture::       キャプチャされたノートが保存される場所
* Using capture::            キャプチャの実行と中止コマンド
* Capture templates::        異なるタイプのテンプレートを定義する

Capture templates



* Template elements::        完全なテンプレート入力のために必要なこと
* テンプレートの拡張::  時刻と条件についての情報を書き込む

Archiving



* Moving subtrees::          アーカイブファイルにツリーを移動する
* ファイル内部でのアーカイブ::  アーカイブタグを付けてファイル内に残す

アジェンダビュー



* Agenda files::             アジェンダ生成のために探索されるファイル
* Agenda dispatcher::        アジェンダビューへのキーボードアクセス
* Built-in agenda views::    すぐに使える機能に何があるでしょう？
* Presentation and sorting::  表示のためにどのようにアジェンダ項目が準備され
るのか
* Agenda commands::          タスクツリーのリモート編集
* Custom agenda views::      特別な検索とビューを定義する
* Exporting Agenda Views::   ビューをファイルに書き出す
* Agenda column view::       収集したエントリーのためにコラムビューを使用す
る

agendaに組み込まれているビュー



* Weekly/daily agenda::      現在のタスクが表示されたカレンダーのページ
* Global TODO list::         全ての未完了アクション項目
* Matching tags and properties::  微調整された検索での構造化された情報
* Timeline::                 単一ファイルでの時間順のビュー
* Search view::              文章の中を検索してエントリーを見つける
* Stuck projects::           レビューが必要なプロジェクトを見つける

Presentation and sorting



* Categories::               全てのタスクが同じであるとは限らない
* Time-of-day specifications::  agendaはどうやって時間を知るか
* agendaの項目をソートする::  物事の順番

Custom agenda views



* Storing searches::         一度入力し、何度も使う
* Block agenda::             必要な事項をひとつのバッファに集める
* Setting Options::          ルールを変更する

Markup for rich export



* Structural markup elements::  エクスポートでわかる基本的な構造
* Images and tables::        テーブルと画像は含まれているだろう
* Literal examples::         特別なフォーマットのためのソースコードの例
* Include files::            文書に別のファイルを添付する
* Index entries::            indexを作る
* Macro replacement::        複雑なアウトプットを作成するためにマクロを使用
する
* Embedded LaTeX::           LaTexはorg-modeの文書では自在に使用することがで
きる

Structural markup elements



* Document title::           どこからタイトルが取り出されるか
* Headings and sections::    文書の構造はエクスポートの設定で確認できる
* Table of contents::        コンテンツのテーブルの条件と場所
* Initial text::             最初の見出しより前に書かれた文
* Lists::                    Lists
* Paragraphs::               Paragraphs
* Footnote markup::          Footnotes
* Emphasis and monospace::   Bold, italic, etc.
* Horizontal rules::         線を作る
* コメント行::          何がエクスポートされないか

Embedded LaTeX



* Special symbols::          ギリシャ文字や他の記号
* Subscripts and superscripts::  テキストを上付き／下付きにする簡単な構文
* LaTeX fragments::          複雑な数式を簡単に作成する
* Previewing LaTeX fragments::  このsnippetは何と似ているか
* CDLaTeX mode::             数式の入力をスピードアップする

Exporting



* Selective export::         タグを使ってツリーを選択したり排除したりする
* Export options::           ファイル毎のエクスポート設定
* The export dispatcher::    どのようにエクスポートのコマンドにアクセスする
か
* ASCII/Latin-1/UTF-8 export::  文字コードの変換を伴う通常のファイルへのエク
スポート
* HTML export::              HTMLへのエクスポート
* LaTeX and PDF export::     LaTeXへのエクスポート、そしてPDFへ変換のプロセ
ス
* DocBook export::           DocBookへのエクスポート
* TaskJuggler export::       TaskJugglerへのエクスポート
* Freemind export::          Freemindのマインドマップへのへエクスポート
* XOXO export::              XOXOへのエクスポート
* iCalendarエクスポート::  iCalendar形式へのエクスポート

HTML export



* HTML Export commands::     HTMLへのエクスポートをどうやって起動するか
* Quoting HTML tags::        Org-modeにHTMLを直接書き込む
* Links in HTML export::     リンクはどのように解釈されフォーマットされるか
* Tables in HTML export::    テーブルのフォーマットをどのように修正するか
* Images in HTML export::    HTMLの出力にどのように図形を挿入するか
* Math formatting in HTML export::  web上でも美しい数式
* Text areas in HTML export::  例示を表現するための別の方法
* CSS support::              出力の見栄えを変更する
* JavaScript support::       webブラウザ上で説明や折りたたみを表示する

LaTeXとPDFのエクスポート



* LaTeX/PDF export commands::  どのキーでどのコマンドが起動するのか
* Header and sectioning::    ファイル構造を出力するための準備
* Quoting LaTeX code::       LaTeXコードの統合
* Tables in LaTeX export::   LaTeXに表をエクスポートする際のオプション
* Images in LaTeX export::   LaTeXの出力に図を挿入する方法
* Beamerクラスのエクスポート::  ファイルをプレゼンテーション資料に変える

DocBook export



* DocBook export commands::  DocBookエクスポートの起動方法
* Quoting DocBook code::     DocBookコードをOrgファイルに取りこむ
* Recursive sections::       DocBookで繰り返し使われるセクション
* Tables in DocBook export::  表はHTMLのテーブルとして出力される
* Images in DocBook export::  DocBookの出力に図を挿入する方法
* Special characters::       特殊文字の処理方法

Publishing



* Configuration::            プロジェクトの定義
* Uploading files::          ファイルをサーバにアップロードする方法
* Sample configuration::     プロジェクトのサンプル
* 公開の開始::          公開するのに使うコマンド

Configuration



* Project alist::            主な設定用の変数
* Sources and destinations::  ここからそこまで
* Selecting files::          どのファイルがプロジェクトの一部なのか
* Publishing action::        公開を行う関数の設定
* Publishing options::       HTMLエクスポート時の調整
* Publishing links::         どのリンクを公開した後も有効にしておくか
* Sitemap::                  全てのページリストの生成
* Generating an index::      ページを超えたインデックス

Sample configuration



* Simple example::           1コンポーネントでの公開
* Complex example::          複数コンポーネントでの公開

ソースコードとの連携



* Structure of code blocks::  コードブロックシンタックスについて
* Editing source code::      言語のメジャーモードを用いた編集
* Exporting code blocks::    コード(と/または)結果のエクスポート
* Extracting source code::   ソースコードのみのファイルの作成
* Evaluating code blocks::   Org-modeバッファ中の評価結果の場所
* Library of Babel::         有用なコードブロックのライブラリを読む、そして
貢献する
* Languages::                コードブロックがサポートする言語一覧
* Header arguments::         コードブロックの機能的な設定
* 評価の結果::          評価の結果を操作する方法
* Noweb reference syntax::   Org-modeでの文芸的プログラミング
* Key bindings and useful functions::  コードブロックを素早く操作する
* バッチ処理::          コマンドラインから関数を呼び出す

Header arguments



* Using header arguments::   ヘッダー引数を設定するための別の方法
* Specific header arguments::  ヘッダー引数のリスト

Using header arguments



* System-wide header arguments::  全体的な初期値を設定する
* Language-specific header arguments::  言語ごとに初期値を設定する
* Buffer-wide header arguments::  特定のバッファで初期値を設定する
* Header arguments in Org-mode properties::  ヘッダーまたはバッファーに初期
値を設定する
* Code block specific header arguments::  値を設定するうえで最も一般的な方法
* Header arguments in function calls::  最も細かいレベル

Specific header arguments



* var::                      引数をコードブロックに渡す
* results::                  結果のタイプ及び操作と収集方法を特定する
* file::                     ファイルを出力するパスを設定する
* dir::                      コードブロックの実行結果を出力する(可能ならばリ
モートの)ディレクトリを特定する
* exports::                  コードと(または)実行結果を出力する
* 抽出::                   抽出の有無をトグルしてファイル名を特定する
* mkdirp::                   抽出している間、ターゲットファイルの親ディレク
トリの生成をトグルする
* comments::                 tangleされたコードファイルでコメントの挿入をト
グルする
* no-expand::                tangle中に変数割り当てとnowebの展開をオフにする
* session::                  コード評価の状態を保存する
* noweb::                    noweb参照の展開をトグルする
* cache::                    未変更のコードブロックの再評価を回避する
* sep::                      Org-modeの外部に表を出力するための区切り文字
* hlines::                   テーブルの水平ラインを制御する
* colnames::                 テーブルの列名称を制御する
* rownames::                 テーブルの行名称を制御する
* shebang::                  tangleされたファイルを実行可能形式にする
* eval::                     特定のコードブロックの評価を制限する

Miscellaneous



* Completion::               M-TABはあなたが何を必要としているか知っています
* Easy Templates::           構造的な要素の素早い挿入
* Speed keys::               見出しの開始位置で使うの電撃的なコマンド
* Code evaluation security::  Org-modeのファイルはインラインのコードを評価す
る
* Customization::            Org-modeをユーザの好みに合わせる
* In-buffer settings::       「#+KEYWORDS」の概要
* The very busy C-c C-c key::  わからなかったら「C-c C-c」
* Clean view::               アウトラインの「*」の並びを取り除く
* TTY keys::                 Org-modeをtty端末で使う
* Interaction::              Emacsの他のパッケージ

他のパッケージとの関係



* Cooperation::              Orgと連携するパッケージ
* Conflicts::                衝突を起こすパッケージ

Hacking



* Hooks::                    Orgの内部にアクセスするのはどれ？
* Add-on packages::          利用できるエクステンション
* Adding hyperlink types::   新しいリンクタイプの作成
* Context-sensitive commands::  機能的なコマンドの追加方法
* Tables in arbitrary syntax::  LaTeXのためのOrgtblと他のプログラム
* Dynamic blocks::           自動的にブロック内に挿入する
* Special agenda views::     カスタマイズされたビュー
* Extracting agenda information::  アジェンダ情報の後処理
* Using the property API::   項目のプロパティを使ったプログラミング
* マッピングAPIを使う::  選択した項目、または全てのマッピング

任意のシンタックスによる表やリスト



* Radio tables::             ラジオテーブルの送受信
* A LaTeX example::          少しずつ、チュートリアルのようなものを
* Translator functions::     コピーと修正
* ラジオリスト::       リストでも同じように

MobileOrg



* Setting up the staging area::  モバイルデバイスとはどこでデータをやりとり
すれば良いですか？
* Pushing to MobileOrg::     Orgファイルとアジェンダをアップロードする
* MobileOrgからpullする::  キャプチャした項目とフラグを立てた項目を統合する


File: org-ja,  Node: Introduction,  Next: Document Structure,  Prev: Top,  Up: Top

1 Introduction
**************

* Menu:

* Summary::                  Org-modeで何ができるか
* Installation::             Org-modeのインストール
* アクティベーション::  Org-modeを特定のバッファで有効にする方法
* Feedback::                 バグ報告、アイデア、パッチなど
* Conventions::              マニュアルで使われる植字の慣例


File: org-ja,  Node: Summary,  Next: Installation,  Prev: Introduction,  Up: Introduction

1.1 Summary
===========

Org-modeはノートを保存したり、TODOリストを管理したり、プロジェクトの計画を素
早く効率良く行うプレーンテキストのシステムのためのEmacsのモードです。

Org-modeは、複数のプロジェクトに関連するリストや情報を含んだ、プレーンなテキ
スト形式のノートをまとめることで、組織的に結びついたタスクを管理します。
Org-modeは、アウトラインモードを元に実装されています。そのため、大きなファイ
ルの内容をわかりやすく構造化された状態に保つことが可能です。文書の見出しや本
文の表示と非表示を切り替えて、全体を把握しながら文書を編集するときには、ツリ
ー形式をとると便利です。表は、ビルトインされたテーブルエディタで簡単に作るこ
とができます。Org-modeは、TODOアイテム、デッドライン、タイムスタンプ、そして
スケジュール管理に対応しています。スケジュール管理は、タスクを動的にアジェン
ダへ蓄積します。アジェンダは、Emacsのcalendarとdiaryの多くの機能を利用し、ス
ムーズに統合しています。プレーンテキストのURLに似たリンクは、ウェブサイト、
メール、ネットのメッセージ、BBDBのデータ、そして、プロジェクトに関連するどの
ようなファイルに対しても結びついています。印刷したりノートを共有するために、
Org-modeのファイルは、構造化されたアスキー形式のファイルやHTMLのファイル、ま
たは（TODOとアジェンダアイテムに限り）iCalendar形式のファイルにエクスポート
できます。リンクの張られたウェブページ一式を公開するツールとしても役立ちます
。

プロジェクトを計画する環境として、Org-modeは、見出しとなるノードにメタデータ
を追加することで動作します。そのメタデータに基づくことで、クエリの中から特定
のエントリーを抽出でき、動的なagenda viewsを生成します。

Org-modeは、Org-Babel環境を含んでいます。この環境はあなたに次のようなことを
許可します。すなわち、ファイルの中に組み込まれたソースコードのブロックを動作
させること、コードの評価、文書化、そして、文芸的プログラミングを容易にするこ
とです。

表計算ソフトと互換性のあるOrg-modeの自動的で文脈依存な表編集機能は、マイナー
モードのOrgtblを動かすことで、どのようなメジャーモードにも組み込むことができ
ます。表を変換することで、たとえばLaTeXの表のように、任意のファイルタイプで
表を維持することができます。構造編集とリスト生成の機能は、マイナーモードの
Orgstructによって、Org-modeの外部で利用することができます。

Org-modeは、単純なものは単純なまま保持します。初めて起動したOrg-modeは、わか
りやすく、簡単に使えるアウトライナーのように感じるはずです。Org-modeに複雑さ
はありませんが、数多くの機能が必要とする時に使えます。Org-modeはツールボック
スであり、様々な方法で、そして様々な目的で利用できます。例えば、

     * 視覚的に表示が循環し、構造を編集するように拡張されたアウトライナー
     * 構造化されたノートを取るためのアスキーシステムと表編集機能
     * TODOリストの編集機能
     * 締切日とスケジュールを含む完全なアジェンダと予定表
     * Devid Allen 氏のGTDシステムを実行するための環境
     * シンプルなハイパーテキストシステム（HTMLとLaTeXエクスポートを含む）
     * 内部リンクで構成されたウェブページ群を生成するための公開ツール
     * 文芸的プログラミングのための環境

最新のOrg-modeへのリンクを提供するOrg-modeのためのウェブページがあります。追
加情報やFAQ、チュートリアルなどがあります。`http://orgmode.org'で公開されて
います。

   このマニュアルのバージョン7.3は paperback book from Network Theory Ltd.
(http://www.network-theory.co.uk/org/manual/)で手に入ります。


File: org-ja,  Node: Installation,  Next: アクティベーション,  Prev: Summary,  Up: Introduction

1.2 Installation
================

重要:
もしあなたが、Emacsに含まれた古いバージョンのOrgを利用している、もしくは、
XEmacsのパッケージを利用している場合には、このセクションを飛ばして直接
*note
アクティベーション::に移動してください。あなたのEmacsに含まれているOrg（もし
存在するならば）のバージョンを見るためには、`M-x load-library RET org'を実行
してから、`M-x org-version'を実行してください。

もしすでにインターネットからOrgをダウンロードしているならば、`.zip'か`.tar'
もしくはGitアーカイブかは問いませんが、以下の手順に沿ってインストールしてく
ださい。まず、配布されたOrgのディレクトリを解凍しそこに移動します。次に、
`Makefile'の最初のセクションを編集します。Emacsライブラリの名前を記入しなけ
ればなりません。たとえば、`emacs'もしくは`xemacs'のような名前です。最後に、
ローカルのLispとInfoファイルが保存されているディレクトリへのパスを記入します
。もしも、あながシステムのディレクトリへのアクセス権を持っていないならば、
Emacsのロードパスにサブディレクトリとして`lisp'を加えることで、配布されたOrg
のディレクトリから直接Orgを動かすことが簡単にできます。そのようにするために
、`.emacs'に次の行を加えてください。

     (setq load-path (cons "~/path/to/orgdir/lisp" load-path))

もし`contrib'サブディレクトリのコードを使うのならば、このディレクトリについ
ても同様のステップを実行します。

     (setq load-path (cons "~/path/to/orgdir/contrib/lisp" load-path))

シェルコマンドを使ってLispファイルをバイトコンパイルします。

     make

解凍したOrg-modeファイルがあるディレクトリでOrg-modeを動かすならば、これでイ
ンストール完了です。もしOrg-modeをシステムディレクトリにインストールしたいな
らば、管理者権限で次のコマンドを使います。

     make install

INFOファイルのインストールは、システムに依存します。これは、`install-info'プ
ログラムにおける違いに原因があります。Debianであれば、INFOファイルはカレント
ディレクトリにインストールされ、INFO directoryファイルを変更します。その他
の多くのシステムでは、それぞれのファイルは、別々に正しいディレクトリにコピー
される必要があります。そして、`install-info'がディレクトリファイルだけを修正
します。次のコマンドのうち必要なものをシステムの文書を参考に調べてください。

     make install-info
     make install-info-debian

次に、以下の一行を`.emacs'に追加します。これはEmacsが、Org-modeが開始する時
には即座に読み込まれないファイルに含まれる関数を自動的に読み込めるようにする
ために必要です。
     (require 'org-install)

次節の解説ようにOrg-modeをアクティベーションすることを忘れないでください。


File: org-ja,  Node: アクティベーション,  Next: Feedback,  Prev: Installation,  Up: Introduction

1.3 アクティベーション
===============================

拡張子が`.org'のファイルがOrg-modeを利用することを確実にするために、次の行を
`.emacs'に追加します。
     (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
Org-modeのバッファは、font-lockが有効になっている必要があります。これはEmacs
で標準の設定です(1)。

   Org-modeの4つのコマンド（`org-store-link', `org-capture', `org-agenda',
`org-iswitchb'）は、グローバルキーを割り当てて使いやすくするべきでしょう。言
い換えれば、Org-modeのバッファだけではなく、Emcasでいつでも使えるようにしま
す。これらのキーバインドとして以下を割り当てることをお勧めします。自分の環境
に応じて適当にキーを変更してください。
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)

この設定をすると、拡張子が`.org'のファイルは、Org-modeに設定されます。別の方
法として、ファイルの一行目に次のような一文を追加することでも、Org-modeに設定
できます。

     MY PROJECTS    -*- mode: org; -*-

この設定のあるバッファは、ファイルの名前とは無関係にOrg-modeが有効になります
。変数`org-insert-mode-line-in-empty-file'も確認してください。

Org-modeの多くのコマンドは、リージョンがactiveな場合に動作します。アクティブ
なリージョンをハイライトするためには、`transient-mark-mode'（XEmacsでは
`zmacs-regions'）を有効にする必要があります。Emacs23では標準で有効になていま
すが、Emacs22では次のコマンドを使う必要があります。
     (transient-mark-mode 1)
もし`transient-mark-mode'が好みでないならば、マウスを利用した領域の選択で、
アクティブなリージョンを作れます。もしくは、カーソルを移動する前に`C-<SPC>'
を二回押します。

   ---------- Footnotes ----------

   (1) もしグローバルにfont-lockを使わない場合は、 `(add-hook
'org-mode-hook 'turn-on-font-lock)'を使いOrg-modeのバッファについ
て有効化してください。


File: org-ja,  Node: Feedback,  Next: Conventions,  Prev: アクティベーション,  Up: Introduction

1.4 Feedback
============

Org-modeで問題を発見した場合、あるいは質問や意見、アイディアがある場合には、
Org-modeのメーリングリスト<emacs-orgmode@gnu.org>へメールしてください。あな
たがメーリングリストのメンバーでないと、メールは管理者が承認した後にメーリン
グリストへ転送されます(1)。

バグをレポートする時は、まず始めに最新バージョンのOrg-modeを利用して該当のバ
グが再現されるか試してください。古いバージョンを利用している場合、すでにその
バグが修正されている可能性が高いです。バグの再現性が確認できたならば、レポー
トを準備して可能な限り多くの情報を提供してください。具体的には、Emacsのバー
ジョン情報（`M-x emacs-version <RET>'）とOrg-modeのバージョン情報（ `M-x
org-version <RET>'）、また、Org-modeに関連する`.emacs'の設定をバグレポ
ートに記載してください。このようなバグレポートの形式を守るための最も簡単な方
法は、次のコマンドを利用します。
     M-x org-submit-bug-report
あなたがバグについての説明を書き加えればよいだけの状態になるように、Emacsの
メールバッファに必要な情報を書きこんでくれます。Emacsを利用してメールを送信
しない場合は、テンプレートの内容をメールクライアントにコピー＆ペーストしてく
ださい。

もしもエラーが発生したら、バックトレースが非常に便利です（どのように作るのか
は以下を参照してください）。しばしば次の明瞭な情報を含む小さな凡例ファイルが
手助けになります。

  1. 正確に何を実行したのか

  2. 何が起きることを期待していたのか

  3. 期待と異なり何が起こったのか
        Org-modeの改善にご協力いただき心より感謝します。

便利なバックトレースを生成する方法
...................................................

Org-modeを利用している時に、理解できないメッセージのエラーが発生したら、バグ
を発見した可能性があります。エラーを報告する最良の方法は、すでに説明したバグ
レポートの書式に加えて、_backtrace_を提供することです。バックトレースは、ビ
ルトインされたデバッガーによるエラーの発生箇所とどのように発生したかについて
の情報です。以下に、有用なバックトレースを生成する手順を示します。

  1. コンパイルされていないOrg-modeのLispファイル群を再読み込みする。バック
     トレースは、コンパイルされていないコードを利用して生成したバックトレー
     スは、より多くの情報を含みます。これを実行するためには、次のコマンドを
     実行します。
          C-u M-x org-reload RET
     もしくは、`Org -> Refresh/Reload -> Reload Org uncompiled'をメニューか
     ら選択します。

  2. オプションメニュー`Options'から、`Enter Debugger on Error'（XEmacsでは
     、このオプションは`Troubleshooting'サブメニューにあります）を選択する。

  3. エラーを再現するために必要な操作を行なってください。実行した操作を忘れ
     ずにメモしておいてください。

  4. エラーが再現されると、`*Backtrace*'バッファが画面上に表示されます。こ
     のバッファを別のファイルとして保存し（例えば`C-x C-w'を使って）、バグ
     レポートに添付します。

   ---------- Footnotes ----------

   (1) メーリングリストの管理者の仕事量を最小化するために、
ぜひメーリングリストの購読を検討してください。


File: org-ja,  Node: Conventions,  Prev: Feedback,  Up: Introduction

1.5 本マニュアルで使われる植字の置き換え
==========================================================

Org-modeは、3種類のキーワードを使います。TODOキーワード、タグ、プロパティで
す。このマニュアルでは次のように植字を使い分けます。

`TODO'
`WAITING'
     TODOキーワードは、すべて大文字で記述されます。ユーザが定義する場合も同
     様です。

`boss'
`ARCHIVE'
     ユーザ定義のタグは、小文字で記述されます。特別な意味を持つビルトインさ
     れたタグは、すべて大文字で記述されます。

`Release'
`PRIORITY'
     ユーザ定義のプロパティは、大文字で始めて他を小文字で記述されます。特別
     な意味を持つビルトインされたプロパティは、すべて大文字で記述されます。

このマニュアルでは、Org-modeの機能を利用するためのキーバインドと、対応するコ
マンドの両方を表記します。Org-modeは、しばしば異なる関数に対して同じキーバイ
ンドを使います（これはコンテクストに依存しています）。そのようなキーバインド
が割り振られたコマンドには、`org-metaright'のような一般的な名称があります。
このマニュアルでは、可能な限り一般的なコマンドを用いて内部的に呼び出される関
数の名称を提示します。例えば、ドキュメントの構造についての章では、
`M-<right>'は`org-do-demote'を呼び出すように表記します。一方で、テーブルにつ
いての章では、`org-table-move-column-right'を呼び出すように表記します。

もし望むならば、`org.texi'にある`cmdnames'フラグの設定を外すことで、コマンド
の名称を表示しないようにマニュアルをコンパイルすることができます。


File: org-ja,  Node: Document Structure,  Next: Tables,  Prev: Introduction,  Up: Top

2 ドキュメントの構造
*****************************

Org-modeは、Outline modeをベースとしており、ドキュメントの構造を編集するため
にフレキシブルなコマンドを用意しています。

* Menu:

* Outlines::                 Org-modeはoutline-modeをベースにしています
* Headlines::                org-modeの階層構造の見出しをどう組み込むか
* Visibility cycling::       簡単な操作で表示、非表示を切り替える
* Motion::                   他の見出しにジャンプする
* Structure editing::        見出しの順序と階層を変更する
* Sparse trees::             文脈の中に埋め込まれた一致
* Plain lists::              １つのエントリーの中に階層のある構造を追加する
* Drawers::                  いろいろなものを隠す
* Blocks::                   ブロック単位で折りたたむ
* Footnotes::                org-modeの構文の中で脚注はどのように規定される
のか
* Orgstruct mode::           org-mode外のモードでの階層編集


File: org-ja,  Node: Outlines,  Next: Headlines,  Prev: Document Structure,  Up: Document Structure

2.1 Outlines
============

Org-modeはoutline
modeの上で実行されます。アウトラインによって階層構造で体系化されたドキュメン
トが作られ、（少なくとも私にとっては）それによって、ノートや思考の最高の表現
方法となります。ドキュメントの大きな部分を折りたたむ（隠す）ことによって、ド
キュメントの骨格のみを表示したり、現在、作業している部分を表示したりして、ド
キュメントの構造の全体を見渡すことができるのです。Org-modeは、全体を表示した
り／隠したりする機能を、たったひとつのコマンド、`org-cycle'、それは<TAB>キー
と結びついていますが、に圧縮することにより、アウトラインの使用を大変単純なも
のにしています。


File: org-ja,  Node: Headlines,  Next: Visibility cycling,  Prev: Outlines,  Up: Document Structure

2.2 Headlines
=============

見出しは、アウトラインのツリーの構造を定義します。Org-modeの見出しは、左のマ
ージン(1)上にある１つもしくは それ以上の数の「＊」で始まります。例えば。

     * Top level headline
     ** Second level
     *** 3rd level
         some text
     *** 3rd level
         more text

     * Another top level headline

Some people find the many stars too noisy and would prefer an outline that
has whitespace followed by a single star as headline starters.  *note Clean
view::, describes a setup to realize this.

最後のサブツリーの直後の空白行は、そのサブツリーの一部と見なされます。そのた
めサブツリーが折り畳まれたときには、隠れてしまいます。しかしながら、すくなく
とも2行の空白行を残したときは、折り畳んだビューを構造化するために、サブツリ
ーを折り畳んだあとも、1つの空白行は残ったままになります。この動作を修正した
いときは、`org-cycle-separator-lines'を参照してください。

   ---------- Footnotes ----------

   (1) 見出しの中で、`C-a'、`C-e'および`C-k'の特別な作用を設定するために、
`org-special-ctrl-a/e'、`org-special-ctrl-k'、および
`org-ctrl-k-protect-subtree'の変数を参照してください。


File: org-ja,  Node: Visibility cycling,  Next: Motion,  Prev: Headlines,  Up: Document Structure

2.3 Visibility cycling
======================

アウトラインによって、バッファの中で、テキストの一部を隠すことが可能となりま
す。Org-modeはバッファないでの表示の状況を変更するために、<TAB>と`S-<TAB>'と
に結びついた2つのコマンドを使用します。

`<TAB>'     (`org-cycle')
     _Subtree cycling_：カレントのサブツリーの状態を順番 に表示します。

          ,-> FOLDED -> CHILDREN -> SUBTREE --.
          '-----------------------------------'

     これを動作(1)
     させるためにはカーソルが見出しの上に置かれている必要があります。カーソ
     ルがバッファの一番上の行にあり、そして最初の行が見出しでない場合は、
     <TAB>が実際にグローバルな切り替えが実行されます。（下記を参照） (2)
     前置引数(`C-u <TAB>')をつけて呼び出したときは、グローバルな切替が実行
     されます。

`S-<TAB>'     (`org-global-cycle')
C-u <TAB>
     _Global cycling_：バッファ全体を交代で状態を変更する。

          ,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
          '--------------------------------------'

     `S-<TAB>'がNという数字のついた前置引数と一緒に呼び出されたときは、レベ
     ルN以上の見出しがCONTENTSビューに表示されます。テーブルの中では、
     `S-<TAB>'は前のフィールドにジャンプするということに注意してください。

`C-u C-u C-u <TAB>'     (`show-all')
     全てを表示する。引き出しを含む。  

`C-c C-r'     (`org-reveal')
     カレントエントリーや、下の見出しや上の階層を表示して、その場所でのコン
     テクストを表示する。ツリーの抽出コマンド（*note Sparse
     trees::）やアジェンダ のコマンド（*note Agenda
     commands::）によって表示された場所の周辺で作業をす
     るのに役立ちます。前置引数をつけることで、各階層での同一レベルの見出し
     を表示する。前置引数を2重に使った場合は、親のサブツリー全体を表示する。 

`C-c C-k'     (`show-branches')
     サブツリーの見出しを全て表示し、ひとつのサブツリーのためのコンテンツビ
     ューである。

`C-c C-x b'     (`org-tree-to-indirect-buffer')
     　間接的なバッファ (3).
     の中にあるカレントのサブツリーを表示する。Nという数値付きの前置引数を
     つけると、N段階上の階層に上がるがそのツリーを捉える。もしもNがマイナス
     の値ならば、多くの階層まで遡る。`C-u'の前置引数をつけたならば、それ以
     前に使用された間接的なバッファを削除してはならない。

EmacsであるOrg-modeファイルを最初に開いたときに、グローバルな状態としては、
概観のビューで開くように設定されています。すなわち、最上位の階層の見出しのみ
が表示されています。これは、`org-startup-folded'変数によって設定されています
。つまり、以下に示す行をバッファ上のどこかに追加することによって、ファイル毎
に設定することができます。

     #+STARTUP: overview
     #+STARTUP: content
     #+STARTUP: showall
     #+STARTUP: showeverything

さらに、どのエントリーも`VISIBILITY'属性（*note Properties and
Columns::）を持って
おり、それを受けて適用された表示性をしめすでしょう。この属性のために許されて
いる値は、`folded'、`children'、`content'および`all'です。
`C-u C-u <TAB>'     (`org-set-startup-visibility')
     　そのバッファにおける起動時
     の表示条件に戻ります。すなわち、起動時のオプションで要求されている内
     容、そして個々のエントリーの中で設定されている`VISIBILITY'の属性に。

   ---------- Footnotes ----------

   (1) しかしながら、`org-cycle-emulate-tab'オプションを参照してく ださい。

   (2) `org-cycle-global-at-bob'オプション参照。

   (3) 間接的なバッファとは、
は全てのバッファを含んでいるが、カレントのツリーに制限されるだろう。間接的なバッファを編集することは、オリジナルのバッファに変更を加えることでもある。だがそのバッファの中での表示に影響を与えることはできない。


File: org-ja,  Node: Motion,  Next: Structure editing,  Prev: Visibility cycling,  Up: Document Structure

2.4 Motion
==========

以下のコマンドはバッファの中で他の見出しにジャンプするものです。

`C-c C-n'     (`outline-next-visible-heading')
     　次の見出しへ。 

`C-c C-p'     (`outline-previous-visible-heading')
     　前の見出しへ。 

`C-c C-f'     (`org-forward-same-level')
     　次の同一階層の見出しへ。 

`C-c C-b'     (`org-backward-same-level')
     　前の同一階層の見出しへ。 

`C-c C-u'     (`outline-up-heading')
     　一つ上の階層の見出しに戻る。 

`C-c C-j'     (`org-goto')
     　現在のアウトラインの表示状態を変更することなく、別
     の場所にジャンプする。現在のバッファの中で文書の構造を表示し、そこでは
     あなたの目的の場所を見つけるために以下のようなキーを使用することができます。 
          <TAB>         表示を切り替える。
          <down> / <up>   次の／前の表示されている見出しへ。
          <RET>         この場所を選択する。
          /           ツリーの抽出による検索を実行する
          もしも`org-goto-auto-isearch'　を停止したときには以下のキーが動作する
          n / p        次の／前の表示されている見出しへ。
          f / b        次の／前の同じ階層の見出しへ。
          u            ひとつ上の階層へ。
          0-9          数値の変数。
          q            停止
     `org-goto-interface'変数もまた参照のこと。


File: org-ja,  Node: Structure editing,  Next: Sparse trees,  Prev: Motion,  Up: Document Structure

2.5 Structure editing
=====================

`M-<RET>'     (`org-insert-heading')
     カレントの階層と同じ階層の新しい見出しを挿入します。もしもカーソルがプ
     レーンなリストアイテムの中にあるならば、新しいアイテムが作成されます
     (*note Plain
     lists::)。新しい見出しを強制的に作成するには前置引数をつけます
     。このコマンドが行の途中で使用されたときは、その行が分割され、その行の
     残りの部分が新しい見出し(1)となります
     。もしも見出しの先頭でそのコマンドが使用されたときは、カレント行の前に
     新しい見出しが作られます。もしも見出し以外の行の先頭の場合は、その行の
     内容が新しい見出しとして作成されます。そのコマンドが折り畳まれているサ
     ブツリーの行末で使用されたならば（i.e.
     見出しの最後の楕円の後）、カレントの見出しと同様な見出しが、サブツリー
     の末尾の後に挿入されるでしょう。 

`C-<RET>'     (`org-insert-heading-respect-content')
     `M-<RET>'とちょうど同じよ
     うに、カレントの見出しの下に新しい見出しが付け加えられたときを除いて、
     新しい見出しは本文の前に置かれるかわりに、本文の後に置かれます。このコ
     マンドはエントリーの中のどの場所からでも動作します。 

`M-S-<RET>'     (`org-insert-todo-heading')
     カレントの見出しと同じ階層の新しいTODOエントリーが挿入されます。
     `org-treat-insert-todo-heading-as-state-change'変数も同じように参照し
     てください。

`C-S-<RET>'     (`org-insert-todo-heading-respect-content')
     カレントの見出しと同一の階層に新しいTODOエントリーを挿入します。
     `C-<RET>'と同様に、新しい見出しはカレントのサブツリーの後に挿入される
     でしょう。

`<TAB>'     (`org-cycle')
     新しいエントリーでまだ文が書かれていない状態で、最初に<TAB>を実行する
     と、そのエントリーの階層を下げ、その前の見出しの子になります。次に
     <TAB>を実行すると、その見出しを親として、それによってトップの階層まで
     、作成します。さらに次の<TAB>で、初期の階層にもどります。 

`M-<left>'     (`org-do-promote')
     カレントの見出しを1階層上げる。

`M-<right>'     (`org-do-demote')
     カレントの見出しを1階層下げる。

`M-S-<left>'     (`org-promote-subtree')
     カレントのサブツリーを1階層上げる。

`M-S-<right>'     (`org-demote-subtree')
     カレントのサブツリーを1階層下げる。

`M-S-<up>'     (`org-move-subtree-up')
     サブツリーを上に移動する。（同じ階層の前のサブツリーと交換する。） 

`M-S-<down>'     (`org-move-subtree-down')
     サブツリーを下に移動する。（同一階層の次のサブツリーと交換する。） 

`C-c C-x C-w'     (`org-cut-subtree')
     サブツリーをキルする。i.e.
     そのサブツリーをバッファから取り除くが、キルリングに保存する。Nという
     数字付きの前置引数をつけたときは、N個連続でサブツリーをキルする。 

`C-c C-x M-w'     (`org-copy-subtree')
     サブツリーをキルリングにコピーする。Nという数字付きの前置引数をつけた
     ときは、N個連続でサブツリーをコピーする。 

`C-c C-x C-y'     (`org-paste-subtree')
     キルリングからサブツリーを貼り付ける。これによると、貼り付けるポジショ
     ンにうまく合わせて、ツリーに適合するようにサブツリーの階層を調整する。
     数字付きの前置引数をつけるか、`****'のような星印のついた見出しの後に貼
     り付けることによって、貼り付ける階層を指定することができる。 

`C-y'     (`org-yank')
     `org-yank-adjusted-subtrees'と`org-yank-folded-subtrees'という変数によ
     って、Org-modeの内部の`yank'コマンドは、賢い方法で、`C-c C-x C-y'と同
     等のコマンドを用いて、折り畳まれているサブツリーを貼り付けることができ
     るでしょう。デフォルトの設定では、階層の調整は行われませんが、貼り付け
     られたツリーは、既に表示されているテキスト受け入れない限り、折り畳まれ
     たままでしょう。このコマンドに対して何らかの前置引数をつけることで、渡
     されたプレフィックスに応じて、通常の`yank'を実行させることになります。
     通常のyankを実行する良い方法は`C-u C-y'です。yankの後で`yank-pop'を使
     うと、階層の調整や折り畳みをすることなく、それ以前にkillしたアイテムを
     プレーンにyankします。

`C-c C-x c'     (`org-clone-subtree-with-time-shift')
     た
     くさんのそれと同じ兄弟のコピーを作成することで、サブツリーの複製を作り
     ます。たくさんのコピーの作成を実行したいならば、そのエントリーに含まれ
     ているタイムスタンプも調整されるように指定することもできます。この機能
     は便利です。例えば、準備している一連の講義に関連した沢山のタスクを作成
     するという場合のように。もっと詳細な情報が必要ならば、
     `org-clone-subtree-with-time-shift'コマンドの解説を参照してください。 

`C-c C-w'     (`org-refile')
     エントリーやリージョンを別の場所に保管します。 *Note Refiling notes::.

`C-c ^'     (`org-sort-entries-or-items')
     同じ階層のエントリー
     を並び替えられます。アクティブなリージョンがあるときに、そのリージョン
     にあるすべてのエントリーは順番に並びます。もう一方で、カレントの見出し
     の子供の階層も並び替えられます。並び替えの形式をコマンドで入力します。
     すなわちアルファベット順、数字順、時間順（実行するために参照される作成
     日、予定日、期限などの最初のタイムスタンプ）、優先順位順、TODOキーワー
     ド順（設定の中で定義された一連のキーワードの中で）あるいは属性の価値の
     順に並べ替えるために。並び順を反転することも同様に可能です。並び替えの
     キーを拡張するために自分自身の関数を用意することもできます。`C-u C-u'
     という二重の前置引数を使用すると、複製されたエントリーは削除されます。 

`C-x n s'     (`org-narrow-to-subtree')
     カレントのサブツリーのためにバッファを ナローイングします。

`C-x n b'     (`org-narrow-to-block')
     カレントのブロックの ためにバッファをナローイングします。

`C-x n w'     (`widen')
     ナローイングを取り除きバッファを広げます。

`C-c *'     (`org-toggle-heading')
     普通の行やプレーンなリストアイテムを見出しに変更します。（そのため、そ
     れらの場所によってはサブの見出しになります。）星汁うぃを取り除くことに
     よって見出しを普通の行に変更することもできます。もしもアクティブなリー
     ジョンあるならば、その領域のすべての行が見出しに変更されます。もしもそ
     の領域の中の最初の行がアイテムだったら、そのアイテムの行のみが見出しに
     変更されます。最後に、もし最初の行が見出しならば、その領域の中の全ての
     見出しから星印が取り除かれます。

   アクティブなリージョンがあるときには（Transient Mark
mode）、そのリージョンのすべての見出しの階層を上げたり、下げたり作用すること
ができる。あるリージョンの見出しを選択するためには、行の先頭にポイントを置い
てマークし、最初の見出しの先頭でマークし、変更する最後の見出しの次の行にポイ
ントを置くのが良い方法である。カーソルがテーブル (*note
Tables::)の中にあるときに、Meta-Cursorキーは異なる機能性を持つことに注意し
てください。

   ---------- Footnotes ----------

   (1) もしも行を途中で分割したくないときは、
`org-M-RET-may-split-line'変数をカスタマイズしてください。


File: org-ja,  Node: Sparse trees,  Next: Plain lists,  Prev: Structure editing,  Up: Document Structure

2.6 Sparse trees
================

Org-modeの重要な特徴の一つに、あるアウトラインのツリーに含まれている選択され
た情報のために_sparse trees（ツリーの抽出）_を作ることができるということがあ
ります。そのため文書全体が最大限畳まれていても、その(1)
上に見出し構造に沿って表示することができるのです。試してみて、それがどんなに
素早く動作するかを見てください。

Org-modeにはそういうツリーを作成するためのいくつものコマンドがあります。これ
らのコマンドの全てはディスパッチャーを通してアクセスすることができます。

`C-c /'     (`org-sparse-tree')
     これは、ツリーの抽出を選択するためのコマンドを作成する追加のキーを入力
     する。

`C-c / r'     (`org-occur')
     発生。正規表現のための入力と全ての一致したものについてのツリーの抽出を
     表示する。もしもその一致した言葉が見出しの中にあるならば、その見出しが
     表示される。もしもその一致した言葉がエントリーの本文の中にあるならば、
     見出しと本文が表示される。最小の内容を区分するために、その一致した言葉
     のある見出しの階層全体が表示され、同様にその一致した言葉に続く見出しも
     表示される。どの一致した言葉もハイライトされる。そのハイライトはバッフ
     ァが編集コマンド(2) 　によって変更されるか、`C-c
     C-c'を押すことで消える。`C-u'前置引数が呼
     ばれたときは、以前のハイライトは維持される。そのため何度もこのコマンド
     を呼び出すと積み重ねることができる。

`M-g n'  or  `M-g M-n'     (`next-error')
     そのバ ッファの中の次のツリーの抽出部分にジャンプする。 

`M-g p'  or  `M-g M-p'     (`previous-error')
     　そのバッファの前のツリーの抽出部分にジ ャンプする。

特定の検索文字列によるツリーの抽出を何度も使用するために、
`org-agenda-custom-commands'変数を使って特定のツリーの抽出に、素早くキーボー
ドからアクセスする定義をすることができる。これらのコマンドはアジェンダディス
パッチャー(*note Agenda
dispatcher::)を通してアクセスすることができる。例えば。

     (setq org-agenda-custom-commands
           '(("f" occur-tree "FIXME")))

will define the key `C-c a f' as a shortcut for creating a sparse tree
matching the string `FIXME'.

他のツリーの抽出のためのコマンドは、TODOキーワード、タグ、あるいは属性に基づ
いて見出しを選択するもので、このマニュアルの後の部分で議論されるだろう。

抽出したツリーを印刷するためには、Emacsの`ps-print-buffer-with-faces'という
コマンドを使用することができます。それを使うと文書(3)のうちの表示されていな
い部分は印刷されません。あるいは、文書の見えている部分をエクスポートするため
に、`C-c C-e v'コマンドを使用し、エクスポートしたファイルを印刷することがで
きます。

   ---------- Footnotes ----------

   (1) 検索に一致したときに、
どの範囲の内容を表示するかを詳細にコントロールするために、
`org-show-hierarchy-above'`org-show-following-heading'、`org-show-siblings'
、そして`org-show-entry-below'変数を参照のこと

   (2) これは`org-remove-highlights-with-change'オプションに 依存する。

   (3) このコマンドは、XEmacsで
は動作しません。というのは、XEmacsでは、テキスト属性の部分ではなく、アウトラ
インの選択して表示するために使用するものだからです。


File: org-ja,  Node: Plain lists,  Next: Drawers,  Prev: Sparse trees,  Up: Document Structure

2.7 Plain lists
===============

アウトラインのエントリーの中に、手動でフォーマットしたリストによって、別の構
造化された項目を追加することができます。そのリストを使って、チェックボックス
(*note
Checkboxes::)のリストを作成する方法が提供されています。Org-modeではそういう
リストの編集をサポートしており、そしてすべてのエクスポート機能(*note
Exporting::)
はそれらのリストの構文を解析しフォーマット化することができます。

Org-modeでは、数字付きのリスト、順序のないリスト、そして記述リストを解釈しま
す。
   * _順序のない_リストアイテムは、`-'、`+'、または箇条書きの太い中黒として
     の`*'(1) が文頭に付きます。

   * _順番のある_ リストアイテムは、数字のあとにピリオドか右括弧 (2)
     がついた形ではじまっています。例えば、`org-alphabetical-lists'を設定す
     ることによって、`1.'や`1)'(3)のように。もしもあなたがリストをこれら以外の値(e.g.
     20)で始めたいと思ったら、そのアイテムの最初の文字を`[@20]'(4)
     のような文字で始めます。

   * _説明_のリストアイテムは順序のないリストアイテムで、説明内容と_用語_の
     記述を区別するために` :: 'といった区分するための記号を含んでいます。

同じリストに属しているアイテムは、最初の行と同じインデントでなければならない
。特に、もしも順番のついたリストが`10.'番に到達したら、その２つの数字の番号
は、そのリストの中の他の番号とおなじく左寄せで書かれなければなりません。アイ
テムは、次の行が、そのbullet／数字よりも少ないか等しいインデントの場合の前ま
でで終わります。

   リストを終わらせるために２つの方法(5)
が用意されています。ひとつのリストは、それぞれのアイテムが終了すると終わりま
す。そのことは、トップのレベルのアイテムよりも少ないか等しいインデントの行の
前までであるということを意味しています。また、空行 (6)
が2行あると終了します。その場合、すべてのアイテムが閉じていることになります
。うまく管理するには、`org-list-end-regexp'の中のどれかのパターンの設定でリ
ストを終わることです。事例を紹介します。

     ** ロードオブザリング
        渡しの大好きなシーンは (この順で)
        1. the Rohirrimの攻撃
        2. Eowynが魔法使いの王と一緒に戦うところ
           + これはもともと本を読んだときも私のお気に入りのシーンだった
           + 私はMiranda Ottoが本当に好きだ。
        3. Peter JacksonがLegolasに撃たれる
           - DVDだけで
           そのとき彼は本当に面白い顔をした。
        しかし、結局、映画全体を通して個性的なシーンがない。
        この映画での重要な俳優は:
        - Elijah Wood :: Frodo役
        - Sean Austin :: Sam役, Frodoの友達。私は今でもThe Goonies
          の中でMikey Walsh役として素晴らしい役回りを演じたことを覚えている。

   Org-modeでは、これらのリストを正しく(7)取り扱うために、埋め込
んだり包んだりするコマンドをチューニングし、適切にエクスポートする (*note
Exporting::)ことによって、これらのリストに対応しています。これらのリストの
構造を管理しているのがインデントであるため、`#+BEGIN_...'ブロックのような多
くの構造的な構成を、特別なアイテムに帰属しているという目印のためにインデント
を設定することができます。

（カレントのリストの階層のために使用するというよりも）サブリストのために、異
なるbulletを使うことが読みやすくできると思ったら、
`org-list-demote-modify-bullet'変数をカスタマイズしてください。

あるアイテムの最初の行（bulletまたは数字のついている行）にカーソルがあるとき
に、以下のコマンドがアイテムに作用します。それらのコマンドのいくつかは、リス
トの構造を完全なままたもつために自動的なルールのアプリケーションであることを
暗示しています。これらのコマンドの動作のいくつかを独自のやりかたにしたいなら
ば、それらを個別に無効にするために、`org-list-automatic-rules'を設定してくだ
さい。

`<TAB>'     (`org-cycle')
     アイテムは見出しの階層と同じように折り畳むことができます。通常これらは
     カーソルがプレーンなリストアイテムの上にあるときに限り動作します。もっ
     と詳しく理解するには、`org-cycle-include-plain-lists'変数を参照してく
     ださい。もしもこの変数が`integrate'に設定されているときは、プレーンな
     リストアイテムは下の階層の見出しと同様に取り扱われます。そのため筆のア
     イテムの階層はbulletまたは数字のインデントによって決定されます。アイテ
     ムは実際の見出しに常に従属しているのです。しかしながら、階層構造は完全
     に区別されたままになります。

`M-<RET>'     (`org-insert-heading')
     新しいアイテムをカレントの階層に挿入します。前置引数を用いると、新しい
     見出し (*note Structure
     editing::.)となります。もしもこのコマンドがアイテム
     の途中で使用されるならば、そのアイテムは２つに_分割_
     されます。そして2番目の部分は新しいアイテム(8)となります。もしもこのコマンドが、_本文の前で_実行されるならば、新し
     いアイテムは、カレントのアイテムの_前に_作成されます。 

M-S-<RET>
     チェックボックス(*note
     Checkboxes::)のついた新しいアイテムを挿入します。 

`<TAB>'     (`org-cycle')
     テキストがまだ書かれていない新しいアイテムの中で、最初の<TAB>
     でそのアイテムをその前のアイテムの子の階層に移動します。それに続けて
     <TAB>を入力していくと、そのアイテムをリスト上で意味のある階層に移動し
     、そして最終的にもとあった一に戻ります。 

S-<up>
S-<down>
     カレントのリストの中で、前の／次のアイテムにジャンプします。ただし
     `org-support-shift-select'
     がオフになっている時だけです。もしもそうなっていないなら、`C-<up>'
     と`C-<down>'のようなパラグラフのジャンプコマンドと全く同様の効果が現れ
     るように使用することができます。 

M-S-<up>
M-S-<down>
     サブアイテムを持っているアイテムを上下（同じインデントのついたアイテム
     の前後と入れ替わる）に移動します。もしもリストに序列があるならば、自動
     的に採番しなおします。 

M-<left>
M-<right>
     一つのアイテムのインデントを増減します。子のアイテムを残したままで。 

M-S-<left>
M-S-<right>
     サブアイテムを含んだまま、アイテムのインデントを増減します。初期設定で
     は、アイテムのツリーはカレントのインデントに基づいて選択されます。直接
     連続してこれらのコマンドが何度も実行されたときは、たとえ新しいインデン
     トが異なる階層であるとわかっていても、初期に選択されたリージョンが使用
     されます。新しい階層を使用するために、カーソルを移動させるコマンドの連
     鎖をブレイクする必要があります。

     特別な場合として、リストの本当に最初のアイテムの上で、このコマンドを使
     用することで全てのリストを動かすことができます。この動作は
     `org-list-automatic-rules'を設定することで無効にすることができます。あ
     るリストのグローバルなインデントは、そのリストの_後の_テキストにはなん
     の影響も与えません。 

C-c C-c
     アイテムの行にチェックボックス(*note
     Checkboxes::)がある場合には、チェックボ
     ックスの状態を切り替えます。ともかく、リスト全体についてbulletとインデ
     ントの整合性を検証します。 

C-c -
     `org-plain-list-ordered-item-terminator'の設定により、異なる箇条書き/
     番号付きのbullet(`-', `+', `*', `1.', `1)')
     、またはそれらのサブセットをもとにして全体のリストの階層、リストのタイ
     プ、リストの位置(9)を切り替
     えます。Nという数字の付いた前置引数を使用すると、これらのリストの中のN
     番目のbulletが選択されます。もしも、このコマンドを呼び出したときにアク
     ティブなリージョンがあるならば、選択された文章は普通のアイテムに変更さ
     れます。前置引数を使うと、すべての行がリストアイテムに変換されます。も
     しも最初の行がすでにリストアイテムだったならば、どのアイテムの符号もリ
     ストから削除されるでしょう。最後に、アクティブなリージョンでない場合で
     も、リストアイテムに変換されます。 

C-c *
     プレーンなリストのアイテムを見出しに変更します（そのロケーションによっ
     てはサブの見出しになることもあります。）*Note Structure
     editing::.、ここに詳 しい説明があります。 

C-c C-*
     プレーンなリスト全体を可憐との見出しのサブツリーに変換します。チェック
     ボックス(*note
     Checkboxes::)は、チェックされていないとき（またはチェックされ
     ているとき）はTODO（またはDONE）キーワードになるでしょう。 

S-<left>/<right>
     bullet上、またはアイテムの行のどこかにカーソルが置かれているときに、こ
     のコマンドは、また、bulletのスタイルを切り替えます。詳細は
     `org-support-shift-select'に依存します。 

C-c ^
     プレーンなリストを並び替えます。次の並び替えの方法を入力します。数字順
     、アルファベット順、時間順、あるいはカスタムな機能の順番に。

   ---------- Footnotes ----------

   (1) `*'を箇条書きの太い中黒として使用するときは、それらの行はインデ
ントが設定されている必要があります。そうでなければ、それらの行は見出し
のトップ階層と見なされてしまいます。また、わかりやすいアウトラインビュ
ーを得るために、先頭の星印を隠しているときは、プレーンなリストアイテム
の場合は、本当の見出しと区別が付かなくなります。簡単に言えば、`*'をサ
ポートしているもののプレーンなリストアイテムのためには使用しない方が良
いかもしれません。

   (2) `org-plain-list-ordered-item-terminator'の設定によって、それらのリス
トをはずすことが可能です。

   (3) `a.'、`A.'、あるいは`a)'といった形式も可能
です。通常のテキストの混乱を最小限にするために、１つの文字のみに限定さ
れています。この制限を超えると、数字に替えてbulletが自動的に使用されま す。

   (4) そのアイテ
ムの中にチェックボックスがある場合は、そのクッキーは、チェックボックス
の_前に_置かれなければなりません。もしも活性化されたアルファベットのつ
いたリストがあるならば、`[@b]'といったカウンターを使用することもでき ます。

   (5) これらどちらも無効にするためには、
`org-list-ending-method'を設定します。

   (6) `org-empty-line-terminates-plain-lists'を参照してください。

   (7) Org-modeではEmacs用のみの埋め込みの設定
を変更できます。XEmacs用としては、Kyle E. Jonesの`filladapt.el'を使用しなけ
ればなりません。この設定を起動するためには、`.emacs':に `(require
'filladapt)'を記述しておく必要があります。

   (8) もしもアイテムを分割したく
ないならば、`org-M-RET-may-split-line'変数をカスタマイズしてください。

   (9) もっと多くの情報が必要ならば、
`org-list-automatic-rules'の中の`bullet'を参照してください。


File: org-ja,  Node: Drawers,  Next: Blocks,  Prev: Plain lists,  Up: Document Structure

2.8 Drawers
===========

あるエントリーに関連する情報を保持していたいときがあるが、普段はその情報を見
たくはないということがあります。こういうときのために、Org-modeは_引き出し_と
いう機能を持っています。引き出しは
`org-drawers'(1)変数で設定する必要があります。引
き出しはこんな形をしています。

     ** これは見出しです
        ここはまだ引き出しの外側です
        :DRAWERNAME:
        これは引き出しの内側です。
        :END:
        引き出しの後です。

   見出し上で表示の切り替え(*note Visibility
cycling::)を行うとエントリーを隠したり表
示したりすることができますが、引き出しの部分は1行に畳まれたままの状態になり
ます。引き出しの中身を見るためには、カーソルを引き出しの行に移動し、そこで
<TAB>キーを押すことが必要です。Org-modeは属性(*note Properties and
Columns::)を保
持するために、`PROPERTIES'という引き出しを使用します。そしてノート (*note
Tracking TODO state changes::)と時刻(*note Clocking work
time::)の変化の状態を用
意するために`LOGBOOK'という引き出しの中に保存をすることができます。もしも、
状態の変化のためと似たような方法で素早くノートをLOGBOOKの引き出しに保存した
いときには、このように使います。

`C-c C-z'
     LOGBOOKのための引き出しにタイムスタンプ付きのノートを追加します。

   ---------- Footnotes ----------

   (1) `#+DRAWERS: HIDDEN PROPERTIES STATE'というような行を使ってファ
イル毎に引き出しを定義することができます。


File: org-ja,  Node: Blocks,  Next: Footnotes,  Prev: Drawers,  Up: Document Structure

2.9 Blocks
==========

Org-modeはソースコードの例(*note Literal examples::) から時刻のログ情報
(*note Clocking work time::)を記録することまで、いろいろな目的のために、
begin...endというブロックを使用します。このブロックでは、行の先頭でTABを押す
ことによって、折り畳んだり、折り畳みを解いたりすることができます。
`org-hide-block-startup'変数を設定するか、以下のようなファイル毎の設定をする
ことで、起動時に全てのブロックを折り畳んでおくこともできます。

     #+STARTUP: hideblocks
     #+STARTUP: nohideblocks


File: org-ja,  Node: Footnotes,  Next: Orgstruct mode,  Prev: Blocks,  Up: Document Structure

2.10 Footnotes
==============

Org-modeは脚注の作成をサポートしています。Org-modeは、`footnote.el'パッケー
ジと対照的に、1回限りのEメールのような文書だけでなく、大きな文書上で動作する
よう設計されています。基本構文は`footnote.el'の構文で使われているのと良く似
ており、i.e.インデントが認められていない、カラム0の角カッコの中の脚注の印
によって始まるパラグラフの中で定義されます。もしも脚注の中でパラグラフを改行
したいならば、LaTeXの用語である`\par'を使用します。脚注の参照は、テキストの
中の単純な角カッコの中の記号です。例えば。

     Org-modeのホームページ[fn:1] は以前に比べて現在は相当改良されていると思いま
     す。
     ...
     [fn:1] リンク先は: http://orgmode.org

Org-modeでは数字をベースとした構文を、_名前のついた_脚注とオプションのインラ
インでの定義へと拡張しています。プレーンな数字を(`footnote.el'で行えるように
）マーカーとして使うことは、下位の互換性としてサポートされていますが、LaTeX
のsnippet(*note Embedded
LaTeX::)と衝突する危険性があるのでお奨めはできません。以
下に確かな参考資料を説明します。

`[1]'
     プレーンな数字付きの脚注用の記号です。`footnote.el'と互換性はあります
     が、`[1]'のような記号は、snippetのコードとかぶることが多いので推奨しま
     せん。

`[fn:name]'
     名前付きの脚注参照、そこでは`name'がユニークな言葉によるラベルとなって
     おり、さもなければ簡単に自動的に作成される、数字が用いられます。

`[fn:: これは脚注のインラインの定義です]'
     参照のポイントに直接定義がなされるLaTeXのような無記名の脚注。

`[fn:name: a definition]'
     脚注のインラインでの定義、それはまた、ノートのための名前を明確に規定し
     ます。Org-modeは同じノートに対して多重の参照を許容するので、新たな参照
     を作成するために、`[fn:name]'を使用することができます。

脚注のラベルは自動的に作成することができます。そうしないならば、あなた自身で
名前を作成することができます。これは`org-footnote-auto-label'変数で操作され
、`#+STARTUP'キーワードに対応します。詳細については変数の説明を参照してくだ
さい。

The following command handles footnotes:

`C-c C-x f'
     脚注の動作のコマンド。

     カーソルが脚注参照上にあるときに、定義部分にジャンプします。カーソルが
     定義部分にあるときに、（最初の）参照されている部分にジャンプします。

     そうでなければ、新しい脚注を作成します。
     `org-footnote-define-inline'(1)によっ
     て、参照の一部として、または、`org-footnote-section'変数によって決定さ
     れる場所の中に区分されて、テキストの中に正しく定義が配置されるでしょう。

     前置引数と一緒にコマンドが呼び出された場合は、追加のオプションのメニュ
     ーが提示されます。
          s   参照の順場によって、脚注の定義は並び替えられます。編集している間は、
              Org-modeは特定の並びの中に脚注の定義を並び替える努力はしません。
              もしもそれらを並び替えたいならば、このコマンドを使用してください。
              それによって`org-footnote-section'に従ってエントリーをまた移動しま
          す。
              挿入／削除のあとに自動的に並び替えるには、変数を使うことで設定する
              ことができます。
          r   単純な`fn:N' の脚注を思い出してください。挿入／削除それぞれのあとの

              自動的な採番は、`org-footnote-auto-adjust'変数を使う
              ことで設定できます。
          S   最初の`r'のショートカットで、`s'はアクションです。
          n   すべての定義（インラインの定義もふくみます）を特別なセクションに集
          める
              ことによって脚注を標準化します。そしてそれからそれらの定義を順番に
          採番
              します。参照先にも番号がふられます。これは、ひとつのドキュメントを
          終了
              する前の最後の段階であることを意味します。(e.g. Eメールを発送する）
          。
              エクスポート機能はこのことを自動的に行い、
              `message-send-hook'のような何かを行います。
          d   そのポイント、およびそれについての参照先の定義を削除します。
     `org-footnote-auto-adjust'(2)と`nofnadjust'の変数に依存し、そ
     れぞれの挿入と削除のあとに、番号の振り直しと脚注の並び替えが自動的に行
     われます。

`C-c C-c'
     もしもカーソルが脚注の参照の上にあるときは、定義部分に飛びます。もしも
     それがある定義ならば、参照先にジャンプして戻ります。前置引数と一緒に、
     脚注の場所を呼び出すときに、`C-c C-x f'として同じメニューが提供されて
     います。 

`C-c C-o  or mouse-1/2'
     脚注のラベルはまた、定義／参照先に対応してリンクを貼ります。そして通常
     のコマンドでこれらのリンクをフォローするための通常のコマンドを使用する
     ことができます。

   ---------- Footnotes ----------

   (1) 対応するインバッファの設定は、 `#+STARTUP: fninline'または
`#+STARTUP: nofninline'となります。

   (2) 対応するインバッファのオプションは
`fnadjust'と`nofnadjust'になります。


File: org-ja,  Node: Orgstruct mode,  Prev: Footnotes,  Up: Document Structure

2.11 The Orgstruct minor mode
=============================

もしもOrg-modeの構造の編集とリストのフォーマットの動作について直感的な方法を
好むのならば、あなたはTextモードやMailモードと同じような他のモードのコマンド
を使用したいと思うでしょう。`orgstruct-mode'というマイナーモードでそれが可能
になります。`M-x orgstruct-mode'を使ってモードを切り替えるか、例えばMessage
モードの中で、デフォルトでそれを作動させるか、次のいずれかを用いて、

     (add-hook 'message-mode-hook 'turn-on-orgstruct)
     (add-hook 'message-mode-hook 'turn-on-orgstruct++)

このモードがアクティブで、カーソルが見出しやリストアイテムの最初の行のような
Org-modeのような行の上にあるときには、ほとんどの構造の編集のためのコマンドは
動作するでしょう。たとえ、あなたが使っているメジャーモードの中で、同じキーが
普通に異なる機能を持っているとしても。もしもカーソルがそういった特別の行の一
つの中に置かれていなくても、Orgstructモードは影の中で静かに隠れています。
`orgstruct++-mode'を使ったときは、Org-modeは、それらのモードの中に、インデン
トやオートフィルの設定を書き出すでしょう。そして、アイテムの最初の行の後にア
イテムのコンテクストを見つけるでしょう。


File: org-ja,  Node: Tables,  Next: Hyperlinks,  Prev: Document Structure,  Up: Top

3 Tables
********

Org-modeは、高速で直感的なテーブルエディタを備えています。Emacsの`calc'パッ
ケージを用いることで、スプレッドシートのような計算がサポートされています。
(*note Calc: (Calc)Top.).

* Menu:

* Built-in table editor::    単純なテーブル
* 列幅と整列::          自動設定を解除する
* Column groups::            縦の線を引き金にしてグループを作る
* Orgtbl mode::              マイナーモードとしてのテーブルエディタ
* The spreadsheet::          テーブルエディタはスプレッドシートの能力を持つ
* Org-Plot::                 org-modeのテーブルからプロットする


File: org-ja,  Node: Built-in table editor,  Next: 列幅と整列,  Prev: Tables,  Up: Tables

3.1 組み込まれたテーブルエディタ
==============================================

Org-modeはプレーンなASCII形式でのテーブル編集を容易にします。どのような行で
も、空白文字を除く最初の文字が`|'であるとき、テーブルの一部であるとみなされ
ます。`|'は、列を区分するセパレータとしても使われます。Org-modeのテーブルは
、次のような見た目になるでしょう。

     | 名前  | 電話番号  | 年齢  |
     |------+----------+------|
     | 佐藤  | １２３４  | １７  |
     | 田中  | ４３２１  | ２５  |

   テーブルの中で<TAB>や<RET>、もしくは`C-c
C-c'を押す度に、テーブルは自動的に
表示が更新されます。<TAB>を押すとカーソルが次のフィールドに移ります（<RET>の
場合は次の行へ）。また、テーブルの端もしくは水平ラインの直前の行で押せば、テ
ーブルに新しい行が追加されます。テーブルのインデントは一行目によって設定され
ます。`|-'で開始するどんな行も水平ラインとして解釈され、次にテーブルが更新さ
れる時に、テーブル幅いっぱいに水平ラインは拡張されます。つまり、上記のテーブ
ルを作成するために、次のように入力するだけでよかったのです。

     |名前|電話番号|年齢|
     |-

そして<TAB>を押してテーブルを整列し、フィールドへの入力を始めます。さらに素
早いテーブルの作成方法は、`|名前|電話番号|年齢'に続いて`C-c <RET>'を入力する
ことです。

フィールドに文字を入力すると、Org-modeは<DEL>と<Backspace>、そしてすべての文
字キーを特別な方法で扱います。文字の挿入と削除によって他のフィールドがズレて
しまうことを避けるためです。また、_`<TAB>'、`S-<TAB>'もしくは`<RET>'によって
新しいフィールドへカーソルが移動した直後に_文字を入力すると、自動的空白が挿
入されます。もしもこの動作が気に入らない場合には、変数
`org-enable-table-editor'と`org-table-auto-blank-field'を調節してください。

テーブルの作成と変換
..............................

`C-c |     (`org-table-create-or-convert-from-region')'
     アクティブリージョンをテーブルに変換します。もし全ての行が少なくとも一
     つのタブを含んでいるならば、この関数は処理対象をタブ区切りの表であると
     想定します。もし全ての行がコンマを含んでいるならば、コンマ区切り（いわ
     ゆるCSV）であると想定されます。それ以外の場合は空白文字で区切られてい
     ると想定します。プレフィックスを用いることで、区切り文字を強制できます
     。すなわち、`C-u'でCSV、`C-u C-u'でTAB区切りを指定できます。また、プレ
     フィックスの引き数として整数値Nを用いれば、少なくともN個の連続した空白
     を区切りとして指定できます。条件に合わなければ、代わりとしてTABが区切
     りとして使われるでしょう。
     もしアクティブリージョンが存在しないならば、このコマンドは空のテーブル
     を生成します。しかし、`|名前|電話番号|年齢 <RET> |- <TAB>'のようにタイ
     プしてテーブル作成を始める方が簡単です。

テールの整列とフィールドの動き
.............................................

`C-c C-c     (`org-table-align')'
     カーソルを動かさずにテーブルを整列する。

`<TAB>     (`org-table-next-field')'
     テーブルを整列し、カーソルを次のフィールドに移す。必要ならば新たな行を
     生成する。

`S-<TAB>     (`org-table-previous-field')'
     テーブルを整列し、カーソルを前のフィールドに移す。 

`<RET>     (`org-table-next-row')'
     テーブルを整列し、次の行にカーソルを下げる。必要ならば新しい行を追加す
     る。行頭もしくは行末にカーソルがあるときの<RET>は、NEWLINEを意味し、テ
     ーブルの分割に使われます。

`M-a     (`org-table-beginning-of-field')'
     フィールド内の文頭にカーソルを移動する。もしくは、前のフィールドの文頭
     に移動する。

`M-e     (`org-table-end-of-field')'
     フィールド内の文末にカーソルを移動する。もしくは、次のフィールドの文末
     に移動する。

テーブルの列と行の編集
.................................

`M-<left>     (`org-table-move-column-left')'
`M-<right>     (`org-table-move-column-right')'
     カーソルがある列を左右に移動する。

`M-S-<left>     (`org-table-delete-column')'
     カーソル位置の行を削除する。

`M-S-<right>     (`org-table-insert-column')'
     カーソル位置の左に新しい列を追加する。 

`M-<up>     (`org-table-move-row-up')'
`M-<down>     (`org-table-move-row-down')'
     カーソル位置の行を上下に移動する。

`M-S-<up>     (`org-table-kill-row')'
     カーソル位置の行もしくは水平ラインを削除する。 

`M-S-<down>     (`org-table-insert-row')'
     カーソル位置の上に新しい行を追加する。プレフィックスを使うと、カーソル
     位置の下に追加される。

`C-c -     (`org-table-insert-hline')'
     カーソル位置の下に水平ラインを追加する。プレフィックスを使うと、カーソ
     ル位置の上に追加される。

`C-c <RET>     (`org-table-hline-and-move')'
     カーソル位置の下に水平ラインを追加し、カーソルを追加された水平ラインの
     次の行に移動する。

`C-c ^     (`org-table-sort-lines')'
     リージョンに含まれるテーブルの各行をソートする。ポイントのある列の情報
     がソートに利用され、ソート対象となる範囲は、最も近い水平ラインの行まで
     、もしくは、テーブル全体が指定される。カーソル位置がテーブルの第一列よ
     りも前にあるときは、ソートに利用する列を指定するためにプロンプトが表示
     されます。すでにアクティブリージョンが存在する場合、マークは第一行とソ
     ートに利用する列を指定し、同時にポイントは、ソート対象に含まれる最終行
     に位置しなければなりません。このコマンドが表示するプロンプトは、ソート
     の種類（アルファベット順、数値順、もしくは時間順）を指定するものです。
     プレフィックスを利用すると、大文字と小文字が区別されます。

リージョン
...............

`C-c C-x M-w     (`org-table-copy-region')'
     テーブルの矩形領域を特別なクリップボードにコピーします。ポイントとマー
     クは、矩形領域を構成する末端となるフィールドを決定します。もしアクティ
     ブリージョンがなければ、カーソル位置のフィールドだけをコピーします。こ
     の処理は、テーブルの水平ラインを無視します。 

`C-c C-x C-w     (`org-table-cut-region')'
     テーブルの矩形領域を特別なクリップボードにコピーし、領域内の全てのフィ
     ールドを空にします。つまりこれは「カット」操作です。 

`C-c C-x C-y     (`org-table-paste-rectangle')'
     テーブルに矩形領域をペーストします。領域の左上がカーソル位置のフィール
     ドに上書きされます。ペーストする領域に重なるすべてのフィールドは上書き
     されます。対象とするテーブルに矩形領域が合わないならば、必要に応じてテ
     ーブルは拡張されます。この処理は、テーブルの水平ラインを無視します。 

`M-<RET>     (`org-table-wrap-region')'
     カーソル位置でフィールドの文字列を分割し、カーソル以降を一つ下のフィー
     ルドの文頭に移動します。アクティブリージョンが存在し、またポイントとマ
     ークの両方が同じ列にあるとき、列に含まれるテキストは、与えられた行数を
     最小化するように改行されます（訳注：余計な空白が消される）。プレフィッ
     クスで指定する整数値は、希望する行数に合わせるために使われます（訳注：
     M行をN行に圧縮できます）。もし選択領域がない状態でプレフィックスを指定
     すると、カーソル位置のフィールドは空白になり、元々あった文字列は一つ上
     のフィールドの文末に付け加えられます。

計算機能
............

`C-c +     (`org-table-sum')'
     カーソル位置の列、もしくは、アクティブリージョンで定められた矩形領域に
     含まれる数値を合計する。計算結果はエコー領域に表示され、`C-y'で挿入で
     きる。

`S-<RET>     (`org-table-copy-down')'
     カーソル位置のフィールドが空白のとき、上にある空白でないフィールドから
     文字列をコピーする。空白でないときには、値を次の行のフィールドにコピー
     し、カーソルも移動させる。`org-table-copy-increment'の値に依存して、フ
     ィールドが整数値のときは値を一つ増やしてからコピーされるでしょう。大き
     すぎる値の整数の場合は値は増やされません。また、プレフィックスで`0'を
     用いれば、一時的に値の増加を防げます。このキーバインドは、
     shift-selectionとこれに関連するモードでも使われています（*note
     Conflicts::） 。

その他の機能
..................

`C-c `     (`org-table-edit-field')'
     個別のウィンドウでカーソル位置のフィールドを編集する。この昨日は、フィ
     ールド全体が表示されていないときに便利です（*note
     列幅と整列::）。プレフィッ
     クス`C-u'と伴って関数が呼ばれると、フィールドの全ての内容が表示される
     ため、フィールド内で編集できます。

`M-x org-table-import'
     ファイルをテーブルとしてインポートする。テーブルは、タブもしくは空白で
     区切られている必要があります。たとえば、スプレッドシートのテーブルやデ
     ータベースの情報をインポートするために利用します。というのも、これらの
     プログラムは一般的にタブ区切りのテキストフィールドを書き出すことが可能
     なためです。このコマンドは、ファイルの内容をバッファに挿入することで作
     動し、領域をテーブルに変換します。どのようなプレフィックスがコンバータ
     に与えられても、セパレータを決定するために利用されます。 

`C-c |     (`org-table-create-or-convert-from-region')'
     org-modeのバッファにテーブル状のテキスト（訳注：文字列がタブで区切られ
     ているテキスト領域など）をペーストすることでもorg-modeのテーブルを生成
     することができます。`C-x C-x'でバッファにペーストされているテキストを
     選択し、`C-c |'でorg-modeのテーブルに変換します（前述の Creation and
     conversionを参照してください）。

`M-x org-table-export'
     テーブルをエクスポートする。エクスポートされるファイルでは標準でタブ区
     切りが使われる。たとえば、スプレッドシートやデータベースプログラムと情
     報を交換するために使います。ファイルのエクスポートに使われるフォーマッ
     トは、変数`org-table-export-default-format'で調節することができます。
     また、ファイル名を指定するためにプロパティ`TABLE_EXPORT_FILE'を、サブ
     ツリーでのテーブルエクスポートのフォーマットを指定するためにプロパティ
     `TABLE_EXPORT_FORMAT'を指定できます。org-modeはエクスポートされたテー
     ブルについて極めて汎用的なフォーマットをサポートします。エクスポートの
     フォーマットは、Orgtblのラジオテーブルで使われているものと同じです。よ
     り詳しい説明は*note Translator functions::を参照してください。

`|'で始まる行を思い通りに編集すために自動的なテーブルの編集が好みでない場合
は、次のコマンドでこの機能を停止することができます。

     (setq org-enable-table-editor nil)

こうすると、テーブルのコマンドで利用できるのは、`C-c C-c'によるマニュアルな
再整列だけになります。


File: org-ja,  Node: 列幅と整列,  Next: Column groups,  Prev: Built-in table editor,  Up: Tables

3.2 列幅と整列
===================

テーブルの各列の幅はテーブルエディタによって自動的に決定されます。また、列の
配置も自動的に決定されます。具体的には、列の中で、数値でないフィールドに対す
る数値（と解釈できる）フィールドの割合に応じて決まります。

単一かもしくはごく少数のフィールドでより多くのテキストを扱おうとすると、困っ
たことに列幅が広がってしまいます。もしくは、フィールドの内容にかかわらず、固
定幅の列でテーブルを作成したいと思うかもしれません。列の幅を指定するためには
、列のどこにあってもよいですが、一つのフィールドが文字列`<N>'だけを含む必要
があります。ここで`N'は、列の幅を指定する整数値の文字列です(1)。次に行なわれるテーブルの整列では、この数値で列の幅
が設定されます。

     |---+------------------------------|               |---+--------|
     |   |                              |               |   | <6>    |
     | 1 | one                          |               | 1 | one    |
     | 2 | two                          |     ----\     | 2 | two    |
     | 3 | This is a long chunk of text |     ----/     | 3 | This=> |
     | 4 | four                         |               | 4 | four   |
     |---+------------------------------|               |---+--------|

指定された幅よりも広いフィールドは一部が切り取られ、文字列`=>'で終わります。
フィールド内に表示されていたテキストは、バッファ内部にそのまま存在し、表示が
隠されていることに注意してください。隠されたテキストも含めてすべてを表示する
ためには、対象とするフィールドにマウスカーソルを合わてください。ツールチップ
が現われて、フィールドが含むすべての内容を表示されます。このようなフィールド
を編集するには、`C-c `'を使います（`C-c'に続いてバッククオートを入力します）
。フィールドの全ての内容を表示した新しいウィンドウが開かれます。フィールドの
内容を編集し、`C-c C-c'で完了します。

幅を狭くした列のあるテーブルを含むファイルを訪問するとき、文字列の隠蔽はまだ
実行されていません。そして、希望する見た目にするにはテーブルを整列する必要が
あります。オプションの`org-startup-align-all-tables'
を設定すると、ファイルを訪問するときにファイルにある全てのテーブルが整列され
ます。ただしスタートアップが少し遅くなります。次を利用すればファイルごとにこ
のオプションを設定することもできます。

     #+STARTUP: align
     #+STARTUP: noalign

数値の多い列を右揃えにして、文字列の多い列を左揃えにする自動的な整列を無効に
したいならば、`<r>'、`c'(2)、もしくは`<l>'を似たような方法で利用で
きます。`<|10>'のようにすれば列の揃えとフィールドの幅を同時に指定できます。

書式の設定情報のみを含む行は、ドキュメントをエクスポートするときに自動的に削
除されます。

   ---------- Footnotes ----------

   (1) この機能は、 XEmacsでは動作しません

   (2) Emacsの表示上は中央揃えにはできませんが、HTMLにエク
スポートするときに中央揃えにできます


File: org-ja,  Node: Column groups,  Next: Orgtbl mode,  Prev: 列幅と整列,  Up: Tables

3.3 Column groups
=================

org-modeのテーブルをエクスポートすると、標準で垂直ラインを表示しません。これ
は、一般に視覚的な満足度をより高めるためです。しかし場合によっては、テーブル
を列のグループで構造化するために垂直ラインが役に立つます。これは水平ラインが
いくつかの行をグループ化するために役立つことと同じです。列のグループを指定す
るために、最初のフィールドが`/'だけを含む特別な行を使います。それ以降のフィ
ールドについては、`<'を含むとき、その列がグルーピングされる列の始めであるこ
とを意味します。`>'を含む場合は、グループの終了を表します。もしくは、`<>'を
含む列はこれ自体を一つのグループにします。列のグループの境界は、エクスポート
時に垂直ラインが表示されるようになります。以下に例を示します。

     | N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
     |---+-----+-----+-----+---------+------------|
     | / |   < |     |   > |       < |          > |
     | 1 |   1 |   1 |   1 |       1 |          1 |
     | 2 |   4 |   8 |  16 |  1.4142 |     1.1892 |
     | 3 |   9 |  27 |  81 |  1.7321 |     1.3161 |
     |---+-----+-----+-----+---------+------------|
     #+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))

表示させたいすべての垂直ラインの後ろに列のグループ開始を指定するだけでも十分
です。

     |  N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
     |----+-----+-----+-----+---------+------------|
     | /  | <   |     |     | <       |            |


File: org-ja,  Node: Orgtbl mode,  Next: The spreadsheet,  Prev: Column groups,  Up: Tables

3.4 Orgtblマイナーモード
===============================

org-modeのテーブルエディタの直感的な動作を気に入ったら、テキストモードやメー
ルモードのように他のモードで利用したくなるかもしれません。これはマイナーモー
ドのOrgtblモードが実現してくれます。`M-x orgtbl-mode'でトグルできます。標準
でOrgtblモードを有効にするには、たとえばメッセージモードのときに、次の設定を
使います。

     (add-hook 'message-mode-hook 'turn-on-orgtbl)

さらに、いくつかの特別な処理を追加することで、orgtblモードの任意のシンタック
スでテーブルをメンテナンスできます。たとえば、簡単に、そしてorgtblモードの機
能でLaTeXのテーブルを構築できます。これは表計算機能も含んでいます。さらなる
詳細は、*note Tables in arbitrary syntax::.を参照してください。


File: org-ja,  Node: The spreadsheet,  Next: Org-Plot,  Prev: Orgtbl mode,  Up: Tables

3.5 The spreadsheet
===================

org-modeのテーブルエディタは、表計算機能を実装するためにEmacsの`calc'を利用
します。他のフィールドの値から別なフィールドの値を導くためにEmacs
Lispの書式も評価できます。十分な機能があるものの、org-modeでの実装は他の表計
算ソフトと全く同等というわけではありません。たとえば、org-modeは_列数式_の概
念を理解しています。これは、関連する各フィールドに数式をコピーすることなく、
ヘッダーを除く列の全てのフィールドに適用されます。数式のデバッガもあります。
また、数式が参照しているフィールドに対応したフィールドを、テーブル内でハイラ
イトする機能や矢印キーでリファレンスに移動する機能がある数式エディタもありま
す。

* Menu:

* References::               どうやって他のフィールドや範囲を参照するか
* Formula syntax for Calc::  Calcを使って計算する
* Formula syntax for Lisp::  Emacs Lispで数式を書く
* Field and range formulas::  特定の（範囲の）フィールドのための数式
* Column formulas::          カラム全体に有効な数式
* Editing and debugging formulas::  数式を修正する
* Updating the table::       依存関係にあるすべてのフィールドを再計算する
* Advanced features::        フィールド名、パラメータ、自動再計算


File: org-ja,  Node: References,  Next: Formula syntax for Calc,  Prev: The spreadsheet,  Up: The spreadsheet

3.5.1 References
----------------

テーブル内部のフィールドを他のフィールドの値から計算するためには、必ず数式が
他のフィールドか範囲を参照していなければなりません。org-modeでは、名前、絶対
的または相対的な位置によってフィールドを参照することができます。フィールドの
位置がどこかを特定するためには、そのフィールドで`C-c ?'を押してください。も
しくは、グリッド表示をトグルするために`C-c }'を使用してください。

フィールドの参照
........................

数式は別なフィールドの値を2つの方法で参照できます。他の表計算ソフトと同じよ
うに、`B3'のような文字と数値の組み合わせでフィールドを参照できます。三行目の
第二フィールドを意味しています。

org-modeでは、もう一つの方法を好みます(1)。より一般的な次のような表記です。
     @ROW$COLUMN

また、相対的な参照も認めています。すなわち、フィールドの列と行に対する値が計
算されいる参照です。このような相対的な参照は、数式を一度だけ記録すればよく、
数式のコピーや変更せずにたくさんのフィールドで利用できます。

列の参照は、`1'、`2'、...`N'のように絶対的に表されるか、もしくは、カーソル
位置の列に対して相対的に`+1'、`-2'のように表されます。`$>'はテーブルの最終列
を参照します。さらに、`$>-2'のようなオフセットを指定できます。この場合、一番
右から三番目の列を表します。

行はデータを含む行のみをカウントして、水平ライン（hline）は無視します。列と
同様に、`1'...`N'のように絶対的な行の番号を利用できます。また、`+3'や`-1'
のようにカーソル位置の行に対する相対的な位置を表し、`@>'でテーブルの最終行
を参照します(2)。あ
る水平ラインに対する相対的な行を指定することもできます。`I'は最初のhlineへの
参照です(3)。`II'は二番目の水平ラインというように指定します。`-I'は、
カーソル位置の行の上方にある最初の水平ラインを参照し、`+I'は下方にある最初の
水平ラインを参照します。`III+2'のように指定すると、テーブルの三番目の水平ラ
インから二番目の行を表します。

`0'はカーソル位置の行と列を参照します。また、もし参照について列と行のいずれ
かを無視すれば、行または列が暗黙に参照されます。

org-modeの_符号無し_数値の参照は、静的な参照です。これは、二つの異なるフィー
ルドにある数式の中で、同じ参照を利用すれば、常に同じフィールドが参照されます
。_符号付き_数値の参照は、動的な参照です。これは、見た目上同じ参照であっても
、数式で計算されるフィールドに依存して、異なるフィールドを参照できるためです
。

   いくつかの例を示します。

     @2$3      第二行、第三列
     C2        同上
     $5        現在行の第五列
     E&        同上
     @2        現在列、第二行
     @-1$-3    カーソル位置から一つ上、左に三つ目
     @-I$2     カーソル位置の上方の水平ライン直下の第二列

範囲参照
............

複数のフィールドで構成する矩形範囲を参照できます。この範囲は、二つの参照を二
つのドット`..'で接続することで指定します。二つの参照が共にカーソル位置の行に
あるとき、単純に`$2..$7'と指定できます。しかし、少なくとも一つのフィールドが
異なる列にあるときは、少なくとも一方のフィールドについて`@row$column'のよう
な一般的な形式を使う必要があります（つまり、正しく解釈させるために参照を
`@'で始めなければなりません）。具体例は次のようになります。

     $1..$3        カーソル位置の行の始めの3フィールド
     $P..$Q        列の名前を使った範囲（以下の詳細を見てください）
     @2$1..@4$3    二つのフィールド間にある6フィールド
     A2..C4        同上
     @-1$-2..@-1   カーソル位置の左の列の2つ上方の行の3フィールド
     @I..II        第一と第二の水平ラインに挟まれた領域（`@I..@II'の短縮表記）

範囲参照はCalcのベクトル関数に代入可能な値のベクトルを返します。範囲に含まれ
る空のフィールドは、普通は除去されます。これはベクトルが空ではないフィールド
のみを含むようにするためです（ただし下記の`E'モードスイッチも参照してくださ
い）。もし、すべてのフィールドが空ならば、数式のシンタックスエラーを避けるた
めに`[0]'が返されます。

数式中のフィールドの座標
....................................

Calc形式とLisp形式の数式では、数式の演算結果が指すフィールドの行と列の番号を
取得するために`@#'と`$#'を利用できます。伝統的なLispの数式に相当するのは
`org-table-current-dline'と`org-table-current-column'です。たとえば、

     if(@# % 2, $#, string(""))   奇数行に限定して列の番号を抽出する
     $3 = remote(FOO, @@#$2)      テーブルFOOの二列目をコピーし、
                                  現在のテーブルの三列目に上書きする

二つ目の例では、テーブルFOOは少なくとも、カーソル位置のテーブルが持つ行数と
同じ数の行がなければなりません。たくさんの行があると処理が重くなる(4)ことに気を付けてください。

名前付き参照
..................

`$name'は、列の名前として解釈されます。パラメータや定数を扱います。定数は、
変数`org-table-formula-constants'を利用してグローバルに定義されます。また、
次のような一文を追加して、ファイルのローカル変数として定義されます。

     #+CONSTANTS: c=299792458. pi=3.14 eps=2.4e-6

プロパティ（*note Properties and
Columns::）もテーブルの数式で定数として扱われます
。プロパティ`:Xyz:'については`$PROP_Xyz'という名前を使います。そして、このプ
ロパティは現在のアウトラインエントリーと上位を階層的に検索されます。もし
`constants.el'パッケージを読み込んでいるならば、これも定数を決めるために使わ
れます。このパッケージには、プランク定数`$h'のような物理定数、そしてキロメー
ター`$km'のような単位が含まれています(5)。列の名前と
パラメータは、特別なテーブルのラインで設定できます。詳細は後述します（
*note Advanced
features::.）。すべての名前は文字から始まり、それ以降は文字と数値で
構成します。

リモート参照
..................

異なるテーブルの定数、フィールドそして範囲を参照できます。現在のファイルでも
、異なるファイルにある場合も参照できます。シンタックスは、

     remote(NAME-OR-ID,REF)

NAMEは別なファイルにあるテーブルの名前で、テーブルの前の行に `#+TBLNAME:
NAME'と設定しておきます。エントリーのIDも利用でき、別なファイル
にあるものも指定できます。この場合はエントリーに含まれる最初のテーブルを参照
します。REFは前述したような絶対的なフィールドか範囲となる参照で、`@3$3'や
`$somename'と表され、参照で指定したテーブルにおいて有効になります。

   ---------- Footnotes ----------

   (1) org-modeはユーザが指定する`B4'のよう
な参照を理解しますが、編集のための数式を提供するときはこのシンタックスは使わ
れません。変数`org-table-use-standard-references'を使うことで、この動作を変
更できます。

   (2) 後方互換のために、`$LR5'や`$LR12'のような特別な名前も利用できま
す。これらは、テーブル最終行の5番目と12番目への確実な参照です。しかしながら
、このシンタックスは廃止予定であり、新たな文書で使うべきではありません

   (3) テーブルの各行を_分離している_水平ラインのみカウントされることに注
意してください。ヘッダーの上に水平ラインがあるテーブルでは、その水平ラインを
カウントしません

   (4) この計算
の規模は、O(N^2)のオーダーです。テーブルFOOが、各フィールドをコピーするため
にパースされるのが原因です。

   (5) `constants.el'は、`SI'と`cgs'の二つの
異なる単位系で定数の値を提供します。どちらが利用されるかは、変数
`constants-unit-system'の値に依存します。カレントバッファで値を設定するため
に、`#+STARTUP'でオプション`constSI'と`constcgs'を指定します。


File: org-ja,  Node: Formula syntax for Calc,  Next: Formula syntax for Lisp,  Prev: References,  Up: The spreadsheet

3.5.2 Formula syntax for Calc
-----------------------------

数式は、Emacsの`Calc'パッケージが理解できる、任意の代数表現になります。通常の
計算とは異なる、`Calc'の慣例に気を付けてください。`/'は`*'よりも低く優先され
ます。つまり、`a/b*c'は、`a/(b*c)'として解釈されます。。`calc-eval'（ *note
calc-eval: (Calc)Calling Calc from Your
Programs.）で評価される以前に、先ほどのルールに従って変数が代入されます。 範囲指定するベクトルはCalc`vmean'や`vsum'のようなベクトル関数に直接渡されま
す。

数式は、セミコロンの後に続くオプションモードの文字列を含むことができます。こ
の文字列は実行時にCalcや他のモードに作用するフラグで構成されます。デフォルト
では、org-modeは標準のCalcモード（精度=12桁、角度単位=度、分数／シンボリック
モード=OFF）を使います。ただし、表示フォーマットは、テーブルをコンパクトに保
つために、`(float 8)'に変更されています。

     p20           Calcの内部計算精度を20桁に設定
     n3 s3 e2 f4   通常表記、科学指数、工学指数、固定小数点
                   のCalcの出力結果がorg-modeに戻る。
                   Calcの計算精度が表示上の精度よりも高い限り、
                   Calc表記は精度上の制限を受けない。
     D R           角度モード（度／ラジアン）
     F S           分数／シンボリックモード
     N             全フィールドを数値として解釈。非数値は0を使用
     T             強制的に文字列として解釈
     E             領域中のフィールドを空に保つ
     L             リテラル

大きな整数値を使用したり、浮動小数点での高精度な計算と表示を行なわないならば
、Calcがすでにフォーマットした結果ではなく、org-modeに戻された後のCalcの出力
結果を再フォーマットするために、`printf'によるフォーマット指定を代替として与
えることができます(1)。いくつかの例を示します。

     $1+$2                第一と第二フィールドの和
     $1+$2;%.2f           同上。ただし、小数点以下2桁表示
     exp($2)+exp($1)      関数も利用可能
     $0;%.1f              小数点以下1桁に再フォーマット
     ($3-32)*5/9          華氏から摂氏への変換
     $c/$1/$cm            周波数[Hz]から波長[cm]への変換（constants.elを使用）
     tan($1);Dp3s1        角度計算（3桁精度、科学指数1桁）
     sin($1);Dp3%.1e      同上。ただし、printfでの表示指定
     vmean($2..$7)        列の平均値、ベクトルを利用
     vmean($2..$7);EN     同上。ただし、空フィールドを0とする
     taylor($3,x=7,2)     $3の2次のテーラー級数でx=7の値

   Calcは論理演算の完全な集合も含んでいます。例として次があります。

     if($1<20,teen,string(""))  "teen" if age $1 less than 20, else empty

   ---------- Footnotes ----------

   (1) `printf'による再フォーマットは、精度の影響を受けます。
`integer'や`double'に変換された値が渡されるためです。`integer'は、符号付き32
ビット整数値に丸め込まれます。`double'は、全体が64ビット精度に制限され、近似
的に16ビットの10進数の有意桁数があります。


File: org-ja,  Node: Formula syntax for Lisp,  Next: Field and range formulas,  Prev: Formula syntax for Calc,  Up: The spreadsheet

3.5.3 数式としてのEmacs Lisp形式
----------------------------------------

Emacs
Lispで数式を記述することもできます。Calcの機能が不十分なら、文字列操作と構造
の制御に役立ちます。開き括弧が後ろに続くシングルクォートで数式が始まるとき、
Lisp形式として解釈されます。評価値は、文字列か数値で返ります。`Calc'の数式と
同じように、セミコロンの後にモードとprintfフォーマットを指定できます。Emacs
Lisp形式では、フィールドの参照が、Lisp形式で挿入されることを意識する必要があ
ります。デフォルトでは、参照はフィールドを含む（ダブルクォートで括られた）
Lispの文字列として挿入されます。もし`N'モードスイッチが指定すると、全ての参
照された要素は数値になり（非数値のフィールドは0になる）、クォートなしで、
Lisp形式の数値として挿入されます。`L'フラッグを指定すると、全てのフィールド
は、クォートなしで、そのままの内容で挿入されます。すなわち、もし参照がLisp形
式の文字列として挿入されることを望むならば、`"$3"'のように、ダブルクォートで
参照のオペレータ自体を包んでください。範囲はスペースで区切られたフィールドと
して挿入されます。そのため、リストやベクトルシンタックスに埋め込んだりできま
す。いくつかの例を示します。Lispを用いて計算をするときに`N'モードがどのよう
に使われるかを注意してください。

     一列目の内容について、一文字目と二文字目を入れ替える
       '(concat (substring $1 1 2) (substring $1 0 1) (substring $1 2))
     一列目と二列目を加算する。Calcの`$1+$2'と同じ
       '(+ $1 $2);N
     列1から列4の合計を計算。Calcの`vsum($1..$4)'と同じ
       '(apply '+ '($1..$4));N


File: org-ja,  Node: Field and range formulas,  Next: Column formulas,  Prev: Formula syntax for Lisp,  Up: The spreadsheet

3.5.4 Field and range formulas
------------------------------

特定のフィールドに数式を割り当てるためには、`:='に続けて、直接フィールドに書
き込みます。たとえば、`:=vsum(@II..III)'のようにします。カーソルがフィール
ドにある状態で、<TAB>や<RET>、もしくは`C-c C-c'を押すと、入力した数式はその
フィールドのための数式として保存され、評価されたのち、フィールドの表示が演算
結果で置き換わります。

数式はテーブルの下にある`#+TBLFM:'で始まる特別な行に保存されます。テーブルの
中で第三行目の4番目のフィールドで数式を入力すると、この数式は`@3$4=$1+$2'の
ように記述されます。適当なコマンドで列と行の挿入／消去／入れ替えを行なうとき
、保存された数式の中の絶対参照（相対参照では関係ありません）は、同一のフィー
ルドを参照するために変更されます。もちろん通常の編集コマンドを用いてテーブル
の構造を編集するときは正しくありません。したがって、マニュアルで数式を補正し
なければなりません。フィールドに数式を記入する代わりに、次のコマンドも使用で
きます。

`C-u C-c =     (`org-table-eval-formula')'
     現在のフィールドに新しい数式をインストールします。このコマンドは、
     `#+TBLFM:'行から選ばれたデフォルトの数式を表示し、現在のフィールドに適
     用して、さらに保存します。

数式に異なるフィールドの数値を割り当てるために、等式の左側は特別表現を指定で
きます。範囲数式を入力するショートカットはありません。これを入力するには、数
式エディタ（*note Editing and debugging
formulas::）を用いるか、`#+TBLFM:'行に直接 記述します。

`$2='
     列の数式、列の全体に対して有効。よく利用されるため、org-modeはこれらの
     数式を特別な方法で扱います。*note Column
     formulas::.を参照してください。

`@3='
     行の数式、特定な行の全てのフィールドに適用する。`@L='は最終行を意味す
     る。

`@1$2..@4$3='
     範囲数式、与えられた矩形領域の全てのフィールドに適用する。これはある行
     の全てのフィールドではなく一部に対して数式を割り当てることにも利用できます。

`$name='
     名前付きフィールド（*note Advanced features::を参照）


File: org-ja,  Node: Column formulas,  Next: Editing and debugging formulas,  Prev: Field and range formulas,  Up: The spreadsheet

3.5.5 Column formulas
---------------------

数式に`$3='のような単純な列の参照を指定すると、同様の数式がその列の全てのフ
ィールドで使用されます。これには非常に有用な条件があります。（1）テーブルが
水平ラインを含む場合は、最初の水平ラインよりも上に存在する全ての行がテーブル
の_ヘッダー_の一部であると考えられ、列の数式によって変更されません。フィール
ドや範囲の数式からすでに値を取得しているフィールドは、列の数式は関与しません
。これらの条件によって列の数式はとても使いやすくなっています。

列に数式を割り当てるためには、列のフィールドに直接記述します。イコールの後に
続くように、`=$1+$2'としまう。同じフィールド内で<TAB>や<RET>もしくは `C-c
C-c'を押すと、入力した数式はそのフィールドのための数式として保存され、
評価されたのち、フィールドの表示が演算結果で置き換わります。フィールドが
`='だけの場合、以前に列で保存した数式が利用されます。各列についてorg-modeは
、直前に利用した数式だけを記憶します。`#+TBLFM:'行で、列の数式は`$4=$1+$2'の
ように保存されます。列数式のイコールの左側には、列の名前を置くことができず、
数値の列の参照か`$>'を置かなければなりません。

   フィールドに数式を書き入れる代わりに、次のコマンドも利用できます。

`C-c =     (`org-table-eval-formula')'
     現在の列に新しい数式を書き込み、数式の演算結果で置き換える。このコマン
     ドは`#+TBLFM:'の列から取得したデフォルトの数式を表示し、カーソル位置の
     フィールドに適用してから保存します。数値のプレフィックス（たとえば
     `C-5 C-c ='）を用いると、現在の列で連続したフィールドに同じ効果を与え
     ます。


File: org-ja,  Node: Editing and debugging formulas,  Next: Updating the table,  Prev: Column formulas,  Up: The spreadsheet

3.5.6 Editing and debugging formulas
------------------------------------

ミニバッファかもしくは、直接フィールド内で、個々の数式を編集できます。
org-modeはテーブルに含まれるすべてのアクティブな数式がある特別なバッファも準
備しています。数式を編集しようとすると、org-modeは、もし可能ならば参照を標準
のフォーマット（`B3'や`D&'のような記法）に変換します。もし内部フォーマット（
`@3$2'や`$4'のような記法）を用いて編集したい場合は、変数
`org-table-use-standard-references'を設定してください。

`C-c =  or  C-u C-c =     (`org-table-eval-formula')'
     ミニバッファでカーソル位置の列やフィールドに結びついた数式を編集する。
     *note Column formulas::と*note Field and range
     formulas::を参照してください。  

`C-u C-u C-c =     (`org-table-eval-formula')'
     カーソル位置のフィールドにアクティブな数式（フィールドの数式、もしくは
     列の数式）を再挿入します。これはフィールド内で直接的に編集できるように
     するためです。ミニバッファでの編集葉理も有利なのは、`C-c ?'を使えるこ
     とです。

`C-c ?     (`org-table-field-info')'
     テーブルのフィールド内で数式を編集
     するときに、数式内でカーソルが置かれている参照によって指し示されたフィ
     ールドをハイライトする。 

`C-c }'
     オーバーレイ（`org-table-toggle-coordinate-overlays'）を使用して、テー
     ブルの行と列の番号を表示するようにトグルする。テーブルが整列される度に
     表示が変わり、`C-c C-c'で強制的に表示を更新できます。 

`C-c {'
     数式のデバッガをON／OFFする（`org-table-toggle-formula-debugger'）。 

`C-c '     (`org-table-edit-formulas')'
     特別なバッファで現在のテーブルのすべての数式を編集する。バッファでは数
     式はラインごとに一つずつ表示される。カーソル位置のフィールドにアクティ
     ブな数式があるとき、カーソルエディタのカーソルはその数式をマークします
     。特別なバッファの中では、org-modeは、カーソルがあるどんなフィールドや
     範囲参照も自動的にハイライトします。数式の編集、削除、追加ができること
     に加え、次のコマンドが利用できます。
    `C-c C-c  or  C-x C-s     (`org-table-fedit-finish')'
          数式エディタを抜けて、修正された数式を保存する。プレフィックス`C-u'を
          使うと、新しい数式をテーブル全体に適用します。 

    `C-c C-q     (`org-table-fedit-abort')'
          変更を破棄して数式エディタを抜ける。 

    `C-c C-r     (`org-table-fedit-toggle-ref-type')'
          数式エディタの全ての参照について、(`B3'のような）標準の記法と（`@3$2'
          のような）内部の記法についてトグルする。 

    `<TAB>     (`org-table-fedit-lisp-indent')'
          カーソル位置のLisp数式を見やすくしたりインテンドする。ラインにLisp数式
          が含まれると、Emacs
          Lispのルールに基づいて数式を整える。さらに<TAB>を押すと、整えられた数
          式を崩して元の状態に戻す。開いた数式では、Emacs
          Lispモードのように<TAB>でさらにインテンドする。 

    `M-<TAB>     (`lisp-complete-symbol')'
          Emacs LispモードのようにLispの記号を補完する。 

    `S-<up>/<down>/<left>/<right>'
          カーソル位置の参照を移動する。たとえば、参照が`B3'で`S-<right>'を押す
          と、`C3'に変化する。これは相対参照や水平ラインの参照についても同じよう
          に動作する。 

    `M-S-<up>     (`org-table-fedit-line-up')'
    `M-S-<down>     (`org-table-fedit-line-down')'
          org-modeのバッファにある列の数式へのテストラインを上下に移動する。 

    `M-<up>     (`org-table-fedit-scroll-down')'
    `M-<down>     (`org-table-fedit-scroll-up')'
          テーブルを表示するウィンドウをスクロールする。 

    `C-c }'
          テーブルの座標グリッドをON／OFFする

テーブルのフィールドを空欄にしても、そのフィールドに結びつけられた数式は削除
されません。これは数式が別な行（`#+TBLFM:'行）に保存されているためです。次に
再計算が行なわれる際に、再びフィールドに数式の結果が戻ります。フィールドから
数式を削除するためには、数式を表示させて空にするか、`#+TBLFM:'行を編集する必
要があります。

`#+TBLFM:'行を直接編集することができ、変更した数式を再適用できます。これはラ
インにおいて`C-c C-c'を押すか、テーブルで通常の再計算コマンドを発行すること
で実行できます。

数式のデバッグ
.....................

数式を評価してエラーが生じた時は、フィールドの文字列が`#ERROR'に変わります。
バグを見つけるために、変数の代入と計算をする間に何が起こっているかを調べたい
ならば、`Tbl'メニューの数式のデバッグを有効にして、計算をやり直してください
。たとえば、フィールド内で`C-u C-u C-c = <RET>'と押します。すると、詳細な情
報が表示されます。


File: org-ja,  Node: Updating the table,  Next: Advanced features,  Prev: Editing and debugging formulas,  Up: The spreadsheet

3.5.7 Updating the table
------------------------

テーブルの再計算は、通常は自動的に行なわれず、コマンドにより実行する必要があ
ります。*note Advanced
features::を参照してください。少なくとも半自動で計算を行な います。

テーブルのある行もしくはテーブル全体を再計算するために、次のコマンドを使いま
す。

`C-c *     (`org-table-recalculate')'
     現在行を最初に保存されている列の数式を用いて、左から右に、現在行の全て
     のフィールドと範囲数式を再計算する。 

`C-u C-c *'
`C-u C-c C-c'
     行ごとにテーブル全体を再計算する。最初の水平ラインの以前のどんな行も再
     計算されません。これらはテーブルのヘッダであると想定します。 

`C-u C-u C-c *  or  C-u C-u C-c C-c     (`org-table-iterate')'
     計算結果の変化が生じなくなるまでテーブルの再計算を繰り返す。これは、計
     算の流れにおいて後で計算されるフィールドの値を利用している、いくつかの
     フィールドを計算するときに必要になります。

`M-x org-table-recalculate-buffer-tables'
     現在のバッファに含まれる全てのフィールドを再計算する

`M-x org-table-iterate-buffer-tables'
     テーブル間の依存関係を収束するために、カレントバッファの全てのテーブル
     を反復計算する。


File: org-ja,  Node: Advanced features,  Prev: Updating the table,  Up: The spreadsheet

3.5.8 Advanced features
-----------------------

もしも自動的にフィールドを再計算したい、もしくは、フィールドと列に名前を割り
当てたいならば、テーブルの第一列を特別なマーキング文字を格納するために予約し
ておく必要があります。
`C-#     (`org-table-rotate-recalc-marks')'
     第一行の計算用マーカを` '、`#'、
     `*'、`!'、`$'の順番に循環する。アクティブリージョンがあれば、その領域
     のすべてのマーカを変更する。

例として、学生の試験結果を集めて、自動再計算の機能を使うテーブルを示します。

     |---+---------+--------+--------+--------+-------+------|
     |   | Student | Prob 1 | Prob 2 | Prob 3 | Total | Note |
     |---+---------+--------+--------+--------+-------+------|
     | ! |         |     P1 |     P2 |     P3 |   Tot |      |
     | # | Maximum |     10 |     15 |     25 |    50 | 10.0 |
     | ^ |         |     m1 |     m2 |     m3 |    mt |      |
     |---+---------+--------+--------+--------+-------+------|
     | # | Peter   |     10 |      8 |     23 |    41 |  8.2 |
     | # | Sam     |      2 |      4 |      3 |     9 |  1.8 |
     |---+---------+--------+--------+--------+-------+------|
     |   | Average |        |        |        |  29.7 |      |
     | ^ |         |        |        |        |    at |      |
     | $ | max=50  |        |        |        |       |      |
     |---+---------+--------+--------+--------+-------+------|
     #+TBLFM: $6=vsum($P1..$P3)::$7=10*$Tot/$max;%.1f::$at=vmean(@-II..@-I);%.1f

重要: このような特別なテーブルについて、`C-u C-c *'を使った再計算は、`#'もし
くは`*'でマークされた行、また、自身に対して数式が適用されているフィールドだ
けに影響することに気をつけてください。最初のフィールドが空な行については、列
の数式は適用されません。

   マーキング文字には、次のような意味があります。
`!'
     行に含まれるフィールドが、対応する列の名前を表す。これは`$6'ではなく
     `$Tot'として列を参照できるようにするため。

`^'
     _上側の_列のフィールドについて名前を定義する。この定義を用いることで、
     テーブルのどのような数式でも、値`10'を参照するために`$m1'を利用できる
     。また、名前を定義するフィールドに数式を割り当てると、`$name=...'とし
     て保存される。

`_'
     `^'とほぼ同じだが、_下側の_列のフィールドに対する名前を定義する。

`$'
     この行のフィールドは、数式の_パラメータ_を定義する。たとえば、`$'が指
     定された行で、フィールドが`max=50'を含むならば、テーブルの数式は`$max'
     を用いて値`50'を参照できる。パラメータは、正に定数として動作し、テーブ
     ルごとに定義される。

`#'
     行の中で<TAB>、`RET'、または`S-<TAB>'を押すと、この行のフィールドは自
     動的に再計算される。また、この行は`C-u C-c *'によるグローバルな再計算
     のために選択される。このコマンドでは、マークされていない行はそのままに
     維持される。

`*'
     `C-u C-c *'によるグローバルな再計算のためにこの行を選択する。ただし、
     自動的な再計算には利用されない。自動再計算が編集速度を著しく低下させる
     場合に利用します。

`マークされていない行は、C-u C-c *による再計算から除外される。再計算'
     されるべきすべての行は、`#'や`*'でマークされるべきである。

`/'
     この行はエクスポートしない。表示幅を狭くする`<N>'マーカ、もしくは列の
     グループマーカを含む列について便利である。

最後に、素晴らしい`calc.el'パッケージができることを学ぶ知識欲を刺激するため
に、一つのテーブルを示します。このテーブルは、いくつかの関数に対して、`x'に
おける`n'次のテーラー級数を計算します。

     |---+-------------+---+-----+--------------------------------------|
     |   | Func        | n | x   | Result                               |
     |---+-------------+---+-----+--------------------------------------|
     | # | exp(x)      | 1 | x   | 1 + x                                |
     | # | exp(x)      | 2 | x   | 1 + x + x^2 / 2                      |
     | # | exp(x)      | 3 | x   | 1 + x + x^2 / 2 + x^3 / 6            |
     | # | x^2+sqrt(x) | 2 | x=0 | x*(0.5 / 0) + x^2 (2 - 0.25 / 0) / 2 |
     | # | x^2+sqrt(x) | 2 | x=1 | 2 + 2.5 x - 2.5 + 0.875 (x - 1)^2    |
     | * | tan(x)      | 3 | x   | 0.0175 x + 1.77e-6 x^3               |
     |---+-------------+---+-----+--------------------------------------|
     #+TBLFM: $5=taylor($2,$4,$3);n3


File: org-ja,  Node: Org-Plot,  Prev: The spreadsheet,  Up: Tables

3.6 Org-Plot
============

Org-Plotは、org-modeのテーブルに保存された情報による2次元と3次元のグラフを生
成できます。`Gnuplot' `http://www.gnuplot.info/'と`gnuplot-mode'
`http://cars9.uchicago.edu/~ravel/software/gnuplot-mode.html'を利用していま
す。動作を確認するためには、GnuplotとGnuplotモードの両方がシステムにインスト
ールされていることを確かめてください。その上で、次に示すテーブルで
`org-plot/gnuplot'を呼び出してください。

     #+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
     | Sede      | Max cites | H-index |
     |-----------+-----------+---------|
     | Chile     |    257.72 |   21.39 |
     | Leeds     |    165.77 |   19.68 |
     | Sao Paolo |     71.00 |   11.50 |
     | Stockholm |    134.19 |   14.33 |
     | Morelia   |    257.56 |   17.67 |

Org-Plotは、テーブルのヘッダをラベルとして適用できます。ラベル、タイプ、コン
テンツ、プロットの外観は、テーブルの上の`#+PLOT:'で始まる行によって制御可能
です。以下のOrg-Plotオプションの完成したリストを見てください。さらなる情報と
例は、`http://orgmode.org/worg/org-tutorials/org-plot.html'にあるOrg-Plotの
チュートリアルを参照してください。

プロットオプション
...........................

`set'
     グラフの描画時に設定される`gnuplot'のオプションを指定する。

`title'
     プロットのタイトルを設定する。

`ind'
     `x'軸として利用するテーブルの列を指定する。

`deps'
     Lispスタイルのリストで描画するように列を指定する。括弧で括られ、スペー
     スで分離されます。たとえば、`dep:(3 4)'とすると、第三と第四列を描画し
     ます（デフォルトでは、`ind'の列を除いて他の全ての列が描画される）。

`type'
     プロットの種別（`2d'、`3d'もしくは`grid'）を指定する。

`with'
     `with'オプションで挿入される、各プロット点の表示種別を指定する。たとえ
     ば、
     `lines'、`points'、`boxes'、`impluses'などで、デフォルトは`lines'。

`file'
     プロット結果を外部ファイルに出力したいときに、
     `"PATH/TO/DESIRED/OUTPUT-FILE"'のように指定する。

`labels'
     `deps'で利用されるラベルのリストを指定する。標準では列のヘッダが使われ
     る（存在する場合）。

`line'
     Gnuplotのスクリプトに、記述内容がそのまま挿入される行を設定する。

`map'
     プロットの種別で`3d'もしくは`grid'を指定する場合に、このオプションを
     `t'にすると、`3d'の立体的な傾斜がわかる表示ではなく、平らな表示（訳注
     ：平面に射影した状態）でプロットする。

`timefmt'
     Gnuplotが解釈するような形式にorg-modeのタイムスタンプを整える。デフォ
     ルトでは、 `%Y-%m-%d-%H:%M:%S'が使われる。

`script'
     Gnuplotをさらに制御するために、プロットに利用されるスクリプトファイル
     （ファイル名をダブルクォーテーションで囲んでください）を指定できます。
     プロットを開始する前に、このスクリプトファイルに含まれる`$datafile'の
     記述は、プロット点を格納するファイルへのファイルパスで置き換えられます
     。たとえこのオプションを指定しても、プロット種別を制御したいならば、
     `type'オプションが優先的に適用されます。


File: org-ja,  Node: Hyperlinks,  Next: TODO Items,  Prev: Tables,  Up: Top

4 Hyperlinks
************

HTMLのように、Org-modeはファイル内でリンクしたり、他のファイルやUsenetの記事
やメールなど、外部へリンクしたりすることができます。

* Menu:

* Link format::              Org-modeでのリンクのフォーマット
* Internal links::           現在のファイルの別の場所へのリンク
* External links::           URL形式のリンク
* Handling links::           創造、挿入、追随
* Using links outside Org::  Cのソースコードからのリンク？
* Link abbreviations::       複雑なリンクを書くためのショートカット
* Search options::           特定の場所へのリンク
* Custom searches::          デフォルトの検索が充分ではないとき


File: org-ja,  Node: Link format,  Next: Internal links,  Prev: Hyperlinks,  Up: Hyperlinks

4.1 Link format
===============

Org-modeはURLのようなリンクを認識して、クリック可能なリンクにしてくれます。
Org-mode上での一般的なリンクのフォーマットは以下のようなものです:

     [[リンク][項目名]]       または           [[リンク]]

すべての括弧を入力し終えてリンクが完成すると、Org-modeは、[[リンク][項目名]]
のかわりに「項目名」を、[[リンク]]のかわりに「リンク」を表示します。リンクは
「org-link」で設定されたフェイスでハイライトされます。なおデフォルトのフェイ
スはアンダーラインになっています。表示されている部分については、直接編集する
ことができます。項目名がない場合はリンクの編集になり、項目名がある場合は項目
名の編集になることに注意してください。表示されていないリンクを編集するには、
該当するリンクの上で「C-c C-l」を実行します。

表示されたテキストの始端もしくは終端にカーソルを置いて<BACKSPACE>を押すと、
その場所にある（表示されていない）括弧を取り除くことができます。これによって
リンクは不完全なものになり、リンクの内部は再びプレーンなテキストとして表示さ
れます。取り除かれた括弧を再度挿入することでリンクは再び内部化され隠されます
。すべてのリンクの内部的な構造を表示するには、 `Org->Hyperlinks->Literal
links'というメニューを使用します。


File: org-ja,  Node: Internal links,  Next: External links,  Prev: Link format,  Up: Hyperlinks

4.2 Internal links
==================

もしもリンクがURLのようなものではない場合、現在使用しているファイル内へのリ
ンクだとみなされます。最も重要なケースは、`[[#my-custom-id]]'のようなリンク
で、`my-custom-id'という`CUSTOM_ID'プロパティのついた見出しへリンクします。
このようなカスタムIDは、HTMLでのエクスポート(*note HTML
export::)時にセクション毎
のリンクを書き出してくれるので、大変便利です。ただし、各カスタムID名がファイ
ル内で重複しないようにする必要があります。

   `[[My Target]]'や`[[My Target][Find my
target]]'のようなリンクは、現在使用し
ているファイル内でのテキスト検索になります。

   マウスのクリック、またはリンク上にカーソルがあるときは`C-c
C-o'で、リンクを 開くことができます(*note Handling
links::)。カスタムIDへのリンクは、対応する見出し
を指し示します。テキストへのリンクには、専用のターゲットを用意する方が良いで
しょう。同じ文字列を二重の角付きの括弧でくくるとか。ターゲットはどこに置かれ
ていてもかまいません。しかし、コメント行のようなところに置いたほうが便利なこ
とが多いでしょう。たとえば、以下のように。

     # <<My Target>>

HTMLでのエクスポート（*note HTML
export::）では、このようなターゲットは、`http'で
直接アクセスできる名前つきのアンカーになります(1)。

もしも専用のターゲットが存在しない場合には、Org-modeはそのリンクにある語句と
同じ見出しを検索しますが、TODOキーワードやタグ(2)も検索されます。Org-mode以外のファイルでは、リンクの
テキストにある語句を検索します。上記の例では、`my target'が検索されます。

   リンクをたどると、Org-mode自身のマークリングにマークが格納されます。`C-c
&'
で、ひとつ前のポジションに戻ります。このコマンドを連続して使うことにより、更
に前のポジションへと戻ることができます。

* Menu:

* Radio targets::            プレーンテキストのリンクをターゲットに起動させ
る

   ---------- Footnotes ----------

   (1) 一番最初の見出しより前の文は
エクスポートされないことに注意してください。このためそのようなターゲットの一
番最初のものは、最初の見出しより後にある必要があります。

   (2) 見出しへのリンクを挿入すると
きは、バッファー内補完をすることができます。*印の後にいくつか文字を入力し、
`M-<TAB>'を実行してください。現在のバッファー内にあるすべての見出しが補完候
補として表示されます。


File: org-ja,  Node: Radio targets,  Prev: Internal links,  Up: Internal links

4.2.1 Radio targets
-------------------

Org-modeは、通常のテキスト部分に書かれたターゲット名を、自動でリンクにするこ
とができます。ですから、わざわざ個別のリンクを作成することなく、それぞれのテ
キストがターゲットにリンクされます。ラジオターゲットは、３つの角括弧で囲まれ
たものです。例えば、`<<<My Target>>>'というターゲットは、通常のテキスト部分
に`my target'が登場する度にアクティブなリンクにしてくれます。Org-modeファイ
ル内のラジオターゲットは、最初の読み込み時のみ自動的にスキャンされます。編集
中にターゲットをアップデートしてリンクするには、ターゲットのところで `C-c
C-c'を実行します。


File: org-ja,  Node: External links,  Next: Handling links,  Prev: Internal links,  Up: Hyperlinks

4.3 External links
==================

Org-modeは次のようなリンクをサポートしています。ファイル、webサイト、ネット
ニュース、emailのメッセージ、BBDBデータベースの項目、IRCの会話とログなど。外
部リンクはURLを記載するような方法でリンクします。それらはコロンの前に短い定
義用の文字列をつけて表記します。コロンのあとに空白をとってはいけません。以下
に例とそれぞれのリンクのタイプの一覧を示します。

     http://www.astro.uva.nl/~dominik          ウェブへのリンク
     doi:10.1000/182                           電子文献のためのDOI
     file:/home/dominik/images/jupiter.jpg     ファイルへの絶対パス
     /home/dominik/images/jupiter.jpg          上に同じ
     file:papers/last.pdf                      ファイルへの相対パス
     ./papers/last.pdf                         same as above
     file:/myself@some.where:papers/last.pdf   リモートマシン上のファイルへのパス
     /myself@some.where:papers/last.pdf        same as above
     file:sometextfile::NNN                    ジャンプ先の行番号付きファイル
     file:projects.org                         他のOrg-modeファイルへのリンク
     file:projects.org::some words             Org-modeファイル内でのテキスト検索
     file:projects.org::*task title            Org-modeファイル内での見出し検索
     docview:papers/last.pdf::NNN              ファイルをページ指定して開く
     id:B7423F4D-2E8A-471B-8810-C40F074717E9   IDのついた見出しへのリンク
     news:comp.emacs                           Usenetへのリンク
     mailto:adent@galaxy.net                   メールリンク
     vm:folder                                 VMのフォルダーへのリンク
     vm:folder#id                              VMのメールメッセージへのリンク
     vm://myself@some.where.org/folder#id      リモートマシン上のVMのメールメッセージへのリンク
     wl:folder                                 WANDERLUSTのフォルダーへのリンク
     wl:folder#id                              WANDERLUSTのメールメッセージへのリ
     ンク
     mhe:folder                                MH-Eのフォルダーへのリンク
     mhe:folder#id                             MH-Eのメールメッセージへのリンク
     rmail:folder                              RMAILのフォルダーへのリンク
     rmail:folder#id                           RMAILのメールメッセージへのリンク
     gnus:group                                Gnusグループへのリンク
     gnus:group#id                             Gnusの記事へのリンク
     bbdb:R.*Stallman                          BBDBへのリンク(正規表現)
     irc:/irc.com/#emacs/bob                   IRCへのリンク
     info:org#External%20links                 Infoノードへのリンク(空白をエンコー
     ド)
     shell:ls *.org                            シェルコマンドへのリンク
     elisp:org-agenda                          Elispコマンドへのリンク
     elisp:(find-file-other-frame "Elisp.org") Elispフォームを評価

   Org-modeをカスタマイズして、新しいリンクのタイプを付け加えるには、 *note
Adding hyperlink types::を参照してください。

リンクは二重括弧で囲んだ方が良いでしょう。URLの代わりにテキストを表示するこ
ともできます(*note Link format::)。たとえば、以下のように。

     [[http://www.gnu.org/software/emacs/][GNU Emacs]]

項目名が画像を指し示すファイル名やURLの場合、HTMLエクスポート(*note HTML
export::)
によって、画像はクリック可能なボタンとして書き出されます。項目名がない画像の
場合には、インライン画像として書き出されます。

Org-modeは、通常のテキスト内のリンクを見つけ出し、外部リンクとします。もしス
ペースがリンクの一部として必要な場合(たとえば、`bbdb:Richard Stallman')や、
リンクの末端であいまいさをなくしたい場合、角括弧で囲みます。


File: org-ja,  Node: Handling links,  Next: Using links outside Org,  Prev: External links,  Up: Hyperlinks

4.4 Handling links
==================

Org-modeは正しい構文でリンクを作成したり、Org-modeのファイルにリンクを挿入し
たり、そのリンクをたどったりする方法を提供しています。

`C-c l     (`org-store-link')'
     現在の位置へのリンクを一時保管します。これはリンクを作成するときに、ど
     のバッファーでも使用できる_グローバルな_コマンド(あなた自身でキーバイ
     ンドを作成しなければなりません。)です。リンクは一時保管され、後から
     Org-modeのバッファーへ挿入することができます(下記参照)。どの種類のリン
     クが作成されるかは、現在のバッファーが何であるかによります。

     Org-modeバッファー
     もしカーソル位置に`<<target>>'がある場合、リンクはそのターゲットを指しま
     す。それ以外の場合は、見出しを指し、見出しは項目名にもなります。

     もし見出しに`CUSTOM_ID'プロパティがある場合、このカスタムIDプロパティ
     へのリンクが一時保管されます。また、(`org-link-to-org-use-id'の値によ
     りますが)グローバルに固有の`ID'プロパティが、リンクを作成するために作
     られます。ですから、このコマンドをOrg-modeバッファー内で使うと、潜在的
     にふたつのリンクを作成することになります。つまり、Org-modeバッファー内
     でこのコマンドを使用することにより、人間が読むことのできるカスタムIDと
     、グローバルに固有で、エントリーがファイル間を移動しても動作するリンク
     が作成されます。後にリンクを挿入するときには、どのリンクを挿入するかを
     決めなければなりません。

     メール/ニュースクライアント:VM, Rmail, Wanderlust, MH-E, Gnus
     ほとんどすべてのEmacsのメールクライアントがサポートされています。リン
     クは現在の記事を指し示します。Gnusバッファーでは、グループを指し示すこ
     ともあるでしょう。項目名は筆者名と題名から作成されます。

     ウェブブラウザー:W3 and W3M
     現在のURLがリンクになり、ページのタイトルが項目名になります。

     連絡先:BBDB
     BBDBバッファー内で作成されたリンクは、現在のエントリーへのリンクになりま
     す。

     Chat: IRC
     IRCリンクの場合、`org-irc-link-to-logs'変数を`t'にした場合は、ログファ
     イル内に、現在の会話に相当する部分への`file:/'形式のリンクが作成されま
     す。それ以外の場合は、user/channel/serverへの`irc:/'スタイルのリンクが
     一時保管されます。

     その他のファイル
     その他のファイルの場合、リンクは、現在の行を指ししめす検索語句 (*note
     Search options::)を伴って作成されます。もし、アクティブなリージョンが
     ある場合は、選択された言葉が検索語句の基本となります。自動的に作成され
     たリンクがうまく働かなかったり、不正確であったりする場合は、カスタム関
     数を書いて、検索語句を選択したり、特定のファイル形式を検索したりするこ
     とがきます。*note Custom searches::を参照してください。`C-c
     l'というキーバイ ンディングはひとつの提案に過ぎません*note
     Installation::)。

     アジェンダビュー
     カーソルがアジェンダビューにあるときは、作成されたリンクは現在の行が参照
     するエントリーを指し示します。

`C-c C-l     (`org-insert-link')'
     リンク(1)を挿入します。そうすると、プロンプトによって、バッファーに挿入するリ
     ンクをたずねられます。テキストを使った内部リンクや、既に述べましたリン
     クタイプのいずれかへのリンクを入力するだけです。リンクは項目名とともに
     、バッファー(2)
     に挿入されます。もし、このコマンドの呼び出し時にテキストが選択されてい
     た場合には、選択されたテキストがデフォルトの項目名になります。

     一時保管されたリンクを挿入
     <現在のセッションで一時保管されたすべてのリンクは、このプロンプトの履歴
     となっていますので、<up>や<down>(あるいは、`M-p/n')を使ってこれらにア
     クセスすることができます。

     補完の支援
     <TAB>を使用した補完機能によって、リンクの省略記法で定義された接頭辞
     (*note Link
     abbreviations::)を含む、`http'や`ftp'などのリンクを適切に挿入す
     ることができるでしょう。もし、PREFIXのみをタイプした後に<RET>を押す
     と、Org-modeは、いくつかのリンク形式(3)に対して詳細な補完の
     支援を行います。たとえば、`file <RET>'をタイプすると、ファイル名の補完
     ((または、`C-u C-c C-l'をタイプします。以下を参照。)を行い、 `bbdb
     <RET>'をタイプすると、連絡先の名前を補完することができます。 

`C-u C-c C-l'
     接頭辞`C-u'を付けて`C-c C-l'が呼び出されたときは、ファイルへのリンクが
     挿入され、ファイル名の補完を利用することができます。リンクされたファイ
     ルがカレントディレクトリにあるときや、カレントディレクトリのサブディレ
     クトリにあるとき、あるいはパスが`../'を使って相対パスで書かれていると
     きは、ファイルへのパスは、現在のOrg-modeファイルからの相対パスとして挿
     入されます。それ以外の場合は絶対パスが使われ、可能であれば、ホームディ
     レクトリには`~/'が使われます。2つの`C-u'を付けることによって、絶対パス
     表記を明確に指定することができます。

`C-c C-l  (カーソルがリンク上にある場合)'
     リンク上にカーソルがある場合、`C-c C-l'を実行すると、リンクと項目名を
     編集することができます。 

`C-c C-o     (`org-open-at-point')'
     その場所にあるリンクを開きます。リンクがURLならば、
     (`browse-url-at-point'を使って)ウェブブラウザーを開きますし、それぞれ
     対応するリンクにより、VM/MH-E/Wanderlust/Rmail/Gnus/BBDBが起動し、シェ
     ルへのリンクの場合はコマンドを実行します。カーソルが内部リンク上にある
     ときは、対応する検索を行います。カーソルが見出しのタグ上にあるときは、
     対応するタグビューを作成します。カーソルがタイムスタンプ上にあるときは
     、その日のアジェンダを表示します。さらに、`file:'リンクの場合、テキス
     トファイルやリモートマシン上のファイルはEmacsで、非テキストファイルは
     適切なアプリケーションで、ファイルを開きます。ファイルの分類は、拡張子
     のみによって判断されます。`org-file-apps'を参照してください。もし、デ
     フォルトのアプリケーションではなくEmacsでファイルを開きたい場合は、接
     頭辞`C-u'を付け、Emacsで開くことを避けたい場合は、接頭辞`C-u C-u'を付
     けてください。カーソルがリンクではない見出し上にあるときは、見出し上の
     すべてのリンクとエントリーテキストを表示します。

`'
     <RET> `org-return-follows-link'が設定されているときは、`<RET>'もポイント上の
     リンクを開きます。 

`mouse-2'
`mouse-1'
     リンク上では、`mouse-2'は`C-c C-o'と同様にリンクを開きます。Emacs
     22以降では、`mouse-1'もリンクを開きます。 

`mouse-3'
     `mouse-2'と同様にリンクを開きますが、ファイルのリンクを強制的にEmacsで
     開き、内部リンクは別のウインドウ (4)で開きます。

`C-c C-x C-v     (`org-toggle-inline-images')'
     リンクされた画像のインライン表示をトグルします。通常これはリンクに項目
     名がない画像のみをインライン表示するものです。すなわち、エクスポート時
     にインラインになる画像のことです。`org-startup-with-inline-images'変数
     (5)を設定する
     ことにより、インライン画像を起動時に表示されることができます。 

`C-c %     (`org-mark-ring-push')'
     現在のポジションをマークリングに格納し、現在のポジションに簡単に戻って
     こられるようにします。ファイル内部でのリンクをたどるときは、自動的にこ
     れが行われます。

`C-c &     (`org-mark-ring-goto')'
     記録されたポジションへ戻ります。ポジションは、内部リンクをたどるコマン
     ドと`C-c %'によって記録されます。このコマンドを連続して何回か使うと、
     記録されたポジション間を移動することができます。 

`C-c C-x C-n     (`org-next-link')'
`C-c C-x C-p     (`org-previous-link')'
     バッファー内の前後のリンクへ移動します。バッファーの端では、移動は、い
     ったんエラーになり、もう一度行うと回り込みます。このキーバインドはとて
     も長いので、`C-n'と`C-p'に設定したいと考えるかもしれません。
          (add-hook 'org-load-hook
            (lambda ()
              (define-key org-mode-map "\C-n" 'org-next-link)
              (define-key org-mode-map "\C-p" 'org-previous-link)))

   ---------- Footnotes ----------

   (1) リンクを挿入するのに、このコマンドを使わなければならないわけで
はないことに注意してください。Org-modeでのリンクはプレーンテキストです
ので、リンクはタイプしたりペーストしたりして直接バッファーへ入力するこ
とができます。このコマンドを使うことによって、リンクは自動的に二重括弧
に入れられ、オプションとして項目名を入力するかどうかをたずねられます。

   (2) 一時保管されたリンクを挿入した後は、そのリンクは一時保管
リストから削除されます。後で使用するためにリンクを保存したままにしてお
きたい場合は、`C-c C-l'の前に3回`C-u'をタイプするか、
`org-keep-stored-link-after-insertion'オプションを設定してください。

   (3) これは`org-PREFIX-complete-link'
という特別な関数を呼び出すことによって行います。

   (4) `org-display-internal-link-with-indirect-buffer'変数を参照してくださ
い。

   (5) 対応する`#+STARTUP'`inlineimages'と`inlineimages'と共に。


File: org-ja,  Node: Using links outside Org,  Next: Link abbreviations,  Prev: Handling links,  Up: Hyperlinks

4.5 Using links outside Org
===========================

Org-modeだけでなく、どのEmacsのバッファーでも、Org-mode構文を持つリンクを挿
入し、たどることができます。このためには、次のような2つのグローバルコマンド
を作成しなければなりません(自分に適したグローバルなキーを設定してください)。

     (global-set-key "\C-c L" 'org-insert-link-global)
     (global-set-key "\C-c o" 'org-open-at-point-global)


File: org-ja,  Node: Link abbreviations,  Next: Search options,  Prev: Using links outside Org,  Up: Hyperlinks

4.6 Link abbreviations
======================

長いURLをタイプするのは面倒ですが、往々にしてひとつの文章には似たようなリン
クが数多く登場するものです。このような場合には、リンクの省略記法を使うことが
できます。省略記法されたリンクは次のようなものです。

     [[リンク語句:タグ][項目名]]

タグはなくても構いません。リンク語句は文字で始まる語句、数字、`-'、`_'を使う
ことができます。省略記法は、リンク語句とリンクテキストを関連づける
`org-link-abbrev-alist'変数の値にしたがって展開されます。以下に例を示します
。

     (setq org-link-abbrev-alist
       '(("bugzilla" . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
         ("google"   . "http://www.google.com/search?q=")
         ("gmap"     . "http://maps.google.com/maps?q=%s")
         ("omap"     . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
         ("ads"      . "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")))

置き換えるテキストに`%s'が含まれている場合は、タグに置き換えられます。それ以
外の場合は、タグはリンクを作成するために文字列に付け加えられます。リンクを作
成する引数としてタグと一緒に呼び出される機能を指定したほうがよいかもしれませ
ん。

   上記の設定だと、`[[bugzilla:129]]'で特定のバグへリンクすることができ、
`[[google:OrgMode]]'で`OrgMode'をウェブ検索することができ、 `[[gmap:51
Franklin Street, Boston]]'でFree Software Foundationの、 `[[omap:Science
Park 904, Amsterdam, The Netherlands]]'でCarstenのオフィスの
地図上の位置を表示することができ、`[[ads:Dominik,C]]'でOrg-modeの作者がEmacs
のハッキングの他に何をしているかを見つけることができます。

ある特定のOrg-modeバッファーでだけリンクの省略記法を使いたい場合は、次のよう
にすることで定義できます。

     #+LINK: bugzilla  http://10.1.2.9/bugzilla/show_bug.cgi?id=
     #+LINK: google    http://www.google.com/search?q=%s

バッファー内補完(*note
Completion::)は、`['以降でリンクの省略記法を補完するために
使用することができます。`C-c C-l'でリンクを挿入することへの特別な支援(たとえ
ば、補完)を実行する`org-PREFIX-complete-link'関数を定義することもできます。
このような関数はいかなる引数も受け入れず、接頭辞付きのリンクを返します。


File: org-ja,  Node: Search options,  Next: Custom searches,  Prev: Link abbreviations,  Up: Hyperlinks

4.7 ファイルリンクにおける検索オプション
==========================================================

ファイルへのリンクには、ファイル内の特定の場所へジャンプするリンクを含ませる
ことができます。これは、ダブルコロン(1)の後に行番号や検索語句を置くことによって行い
ます。たとえば、`C-c l'コマンドをタイプして、あるファイルへのリンクを作成す
る場合(*note Handling
links::)、現在の行の言葉を検索語句としてリンクに含めることが でき、`C-c
C-o'コマンドで開くことができます。

説明と共に、あるファイルリンクへの検索語句を付加する様々な構文の方法を示しま
す。

     [[file:~/code/main.c::255]]
     [[file:~/xx.org::My Target]]
     [[file:~/xx.org::*My Target]]
     [[file:~/xx.org::#my-custom-id]]
     [[file:~/xx.org::/regexp/]]

`255'
     255行目へジャンプします。

`My Target'
     内部リンクの検索と同様に、`<<My Target>>'という名前のリンクターゲット
     、あるいは`my target'というテキストを検索します(*note Internal
     links::を参照 してください。)。HTMLエクスポート(*note HTML
     export::)では、このようなファイ
     ルへのリンクは、リンク先のファイル内にある、一致する名前のアンカーへの
     HTMLリンクになります。

`*My Target'
     Org-modeファイルの中で見出しの検索に限定されます。

`#my-custom-id'
     `CUSTOM_ID'プロパティを持つ見出しへリンクします。

`/regexp/'
     `regexp'を正規表現検索します。これは、Emacsの`occur'コマンドを使って、
     一致するすべてを別ウインドウでリスト表示します。ターゲットがOrg-modeフ
     ァイルならば、`org-occur'が使われ、一致した部分について、ツリーの抽出
     を行います。

特殊なケースとして、ファイル名が指定されていないファイルのリンクは、現在のフ
ァイルの検索となります。たとえば、`[[file:::find me]]'は、`[[find me]]'と同
様に、現在のファイルで`find me'を検索します。

   ---------- Footnotes ----------

   (1) 下方互換性のために、行番号はシングルコ ロンの後に置くこともできます。


File: org-ja,  Node: Custom searches,  Prev: Search options,  Up: Hyperlinks

4.8 カスタム検索
======================

デフォルトの検索文字列作成のメカニズムと、実際のファイル検索のメカニズムは、
すべての場合でうまく動作するとは限りません。たとえば、BibTeXデータベースのフ
ァイルは、`year=\"1993\"'のようなエントリーをたくさん有していますが、これは
良い検索文字列であるとは言えません。なぜならば、BibTeXのエントリーでは、唯一
の識別情報は引用キーだからです。

このような問題に直面した場合は、特定のファイルタイプに適した検索文字列を設定
し、そのファイルで検索を行うカスタム関数を書くことができます。`add-hook'を使
用して、これらの関数は、`org-create-file-search-functions'、
`org-execute-file-search-functions'というフック変数に付け加えられる必要があ
ります。これらの変数についてのより詳しい情報は、ドキュメント文字列を参照して
ください。Org-modeは、実際にこのメカニズムをBibTeXデータベースファイルに使用
しており、該当するコードを実装のサンプルとして使うことができます。
`org-bibtex.el'というファイルを参照してください。


File: org-ja,  Node: TODO Items,  Next: Tags,  Prev: Hyperlinks,  Up: Top

5 TODOアイテム
******************

Org-modeではTODOリストを個別の文書として管理するわけではありません。
(1)その変りに、TODOアイテムはノートファイルの
一部として存在します。なぜならTODOアイテムはメモを書いている最中に頭に浮かぶ
ものだからです!Org-modeでは、ツリーの中のどの項目でも簡単にマークしてTODOア
イテムとするだけです。この方法により特定の情報を複数個所にもつ必要は無くなり
、TODOアイテムを作成するのに使用した全文書が常に最新であることになります。

もちろん、こうした手法をとることで、あなたのノートファイルの中のあちこちに、
TODOアイテムが散らばることになります。それを補うためにOrg-modeでは、やらなけ
ればならない事柄の全体を見渡す方法が提供されています。

* Menu:

* TODO basics::              登録したTODOのマーキングと表示
* TODO extensions::          ワークフローと割り当て
* Progress logging::         進行管理のための日付とメモ
* Priorities::               他より重要なものもある
* Breaking down tasks::      タスクを管理可能な単位に分解する
* Checkboxes::               リストをチェックする

   ---------- Footnotes ----------

   (1)
もちろん、長いTODOリストだけを含む個別の文書を作成することもできますが、そ
うする必要はないということです。


File: org-ja,  Node: TODO basics,  Next: TODO extensions,  Prev: TODO Items,  Up: TODO Items

5.1 基本的なTODOの機能
=============================

どの見出しでも`TODO'という言葉を前につけることで、TODOアイテムとみなします。
例えば:

     *** TODO サム フォーチュンに手紙を書く。

TODO項目を入力するときの最も重要なコマンドは以下のとおりです。

`C-c C-t     (`org-todo')'
     現在のTODOの状態を次のように切り替えます。

          ,-> (マーク無し) -> TODO -> DONE --.
          '----------------------------------'

     同じような状態の切り替えは、タイムラインとアジェンダバッファで`t'コマ
     ンドキー（*note Agenda
     commands::参照）を入力することで「間接的に」完了にす ることもできます。

`C-u C-c C-t'
     補完や「すでに設定されていれば」さらに速い選択方法を提供
     するインターフェイスを使用して特定のキーワードを選択します。後者の方法
     では、TODOの状態に対してキーを割り振る必要があります。詳細は、 *note
     Per-file keywords::と*note Setting tags::を参照してください。

`S-<right>  /  S-<left>'
     切り替えの機能に似て、後にくるTODOの状態、あるいは前にくるものを選択し
     ます。もっとも役に立つのはTODOの状態が２段階以上の場合です。 (*note
     TODO extensions::).`shift-selection-mode'との連携については、 *note
     Conflicts::も参照してください。変数
     `org-treat-S-cursor-todo-selection-as-state-change'も参照してください
     。

`C-c / t     (`org-show-todo-key')'
     _ツリーの抽出_機能を使ってTODOを確認します（*note Sparse
     trees::）参照。バッ
     ファ全体を折り畳みますが、全てのTODO項目「DONE状態以外の」とその上の見
     出しの階層を表示します。前置引数をつけることで(もしくは、キーバインド
     `C-c / T')、ある特定のDONE状態の項目も表示させることができます。検索用
     のキーワードを入力するためのプロンプトが表示されます。さらにキーワード
     のリストを次のように入力することもでき`KWD1|KWD2|...'、この内のどれか
     に一致するものが表示されます。前置引数Nを使って、変数
     `org-todo-keywords'内のN番目のキーワードを含むツリーを表示することもで
     きます。２回の前置引数を指定すると、すべてのTODO状態「DONEとそれ以外を
     含む」を見つけることができます。

`C-c a t     (`org-todo-list')'
     グローバルTODO
     リストを表示します。すべての「DONE状態以外の」TODOアイテムをすべてのア
     ジェンダファイル(*note Agenda
     Views::)から集めて、一つのバッファに表示します
     。その新しくできたバッファは、`agenda-mode'で表示され、確認や修正を加
     えるためのコマンドも提供されます。 (*note Agenda commands::). *Note
     Global TODO list::.を参照してください。 

`S-M-<RET>     (`org-insert-todo-heading')'
     新しいTODOを現在の位置にあるTODOの 前に入力します。

TODOの状態の変更は、タグの変更をすることになることがあります。詳細については
、オプション`org-todo-state-tags-triggers'のドキュメント文字列を参照してくだ
さい。


File: org-ja,  Node: TODO extensions,  Next: Progress logging,  Prev: TODO basics,  Up: TODO Items

5.2 TODOキーワードの拡張的な使い方
===============================================

デフォルトでは、マークされたTODOの状態は、TODOとDONEの２つしかありません。さ
らにOrg-modeは、_TODOキーワード_「`org-todo-keywords'に指定されています。」
を使って、より複雑にTODOアイテムを分類できます。特別な設定により、TODOキーワ
ードシステムは、ファイルによって異なる働きにすることできます。

   注記、タグは見出しと特にTODOアイテムを分類するもう一つの方法です。(*note
Tags::).

* Menu:

* Workflow states::          TODOからDONEまでの流れ
* TODO types::               私はこの仕事をこなす。フレッドは休む。
* Multiple sets in one file::  ごちゃまぜにしてもやり方は見つけられる
* Fast access to TODO states::  状態を選択するための文字
* Per-file keywords::        ファイルが違えば、やりたい事も違う
* Faces for TODO keywords::  状態のハイライト
* TODO dependencies::        他のタスクの終了を待たないといけないタスクがあ
る時


File: org-ja,  Node: Workflow states,  Next: TODO types,  Prev: TODO extensions,  Up: TODO extensions

5.2.1 ワークフローの状態としてのTODOキーワード
----------------------------------------------------------------

TODOキーワードを使用して、アイテムの_連続した_異なる状態を表すことができます
。例えば、(1):

     (setq org-todo-keywords
       '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))

縦線は、TODOキーワード「_アクションが必要な_状態」とDONE状態「アクションが必
要ない状態」を分けます。縦線が指定されていない場合は、最後の状態が、DONE状態
として使用されます。 この設定により、コマンド`C-c
C-t'で、TODOからFEEDBACKへ、それからVERIFY、最
後にDONE、DELEGATEDというように順番に切り替えます。前置引数を使用することで
、特定の状態を即座に選択することもできます。例えば`C-3 C-c C-t'と入力すると
、すぐに３番目のVERIFYに変更することができます。もしくは、`S-<left>'により、
逆の方向に順番に切り替えることもできます。もしも、たくさんのキーワードを定義
した場合は、バッファ内補完機能（*note
Completion::）か特別な一つのキーによる選択に
より特定のキーワードをバッファに入力することができます。 (*note Fast access
to TODO states::)TODOの状態の変更は、タイムスタンプと共にログを
とることができます。（より詳しい情報は*note Tracking TODO state
changes::を参照）

   ---------- Footnotes ----------

   (1) この変数の変更は、Org-modeをバッファ内で再起動した場合のみ有効に
なります。


File: org-ja,  Node: TODO types,  Next: Multiple sets in one file,  Prev: Workflow states,  Up: TODO extensions

5.2.2 種類としてのTODOキーワード
-------------------------------------------

TODOキーワードの２つ目の使い方として、いろいろな_種類_のやるべき事として表す
使用法です。例えば、項目を「仕事」または「家」を示すようにも使えます。もしく
は、複数の人と同じプロジェクトに参加するとき、その中の何人かに彼らの名前を
TODOキーワードとして使って直接やるべき事を割り当てたいかもしれません。これは
、以下のように設定します。：

     (setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))

この場合、それぞれのキーワードは作業の順序を表しているのではなく、別々のタイ
プを表すことになります。そのため、通常の作業の流れとしてタスクを一人に割り振
ることになり、その後のDONEになります。Org-modeは、このような形式をサポートす
るため、「`C-c
C-t'」コマンドの動作が少し変化します（(1)）。まずは、適当なタイプを
選択するのに、繰り返し押すことで、順番にキーワードの名称が表示されます。しば
らく間をおいてその項目に戻ってきて、「`C-c C-t'」を再度実行すると、そのとき
は、すぐDONEに切り替えられます。前置引数か補完を使えば、適当なタイプをすぐに
選ぶことができます。さらに`C-c / t'に前置引数を指定することにより、抽出され
たツリーの中で特定のTODOタイプの項目を確認することもできます。例えば、Lucyが
やらねばならないにすべての項目を見るには、「`C-3 C-c / t'」を実行します。す
べてのアジェンダファイルの中からLucyの項目を一つのバッファに集約するには、グ
ローバルなtodoリストを作成し、前置引数を使用します:「`C-3 C-c a t'」、

   ---------- Footnotes ----------

   (1) タイムラインやアジェン
ダのバッファでは、「`t'」コマンドも同じ仕様です。


File: org-ja,  Node: Multiple sets in one file,  Next: Fast access to TODO states,  Prev: TODO types,  Up: TODO extensions

5.2.3 同一ファイル内での複数のキーワードセット
------------------------------------------------------------------

時には、異なるセットのTODOキーワードを同時に使いたい場合があるかもしれません
。例えば、通常の`TODO'/`DONE'を使用しつつ、バグフィックスのワークフロー、さ
らにアイテムがキャンセルをされたことを表すもう一つの状態を使用したい場合など
です「つまりDONEではないが、次のアクションが必要ない場合」。その場合の設定は
次のようになります:

     (setq org-todo-keywords
           '((sequence "TODO" "|" "DONE")
             (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
             (sequence "|" "CANCELED")))

キーワードは、すべて異るようにすべきで、そうすることでOrg-modeが、今入力され
たキーワードから次に続くものを認識するのに役立ちます。この設定では、 `C-c
C-t'は、サブグループ内だけで働きます。つまり`DONE'から(何も無い状態)か
ら`TODO'へ、そして`FIXED'から(何も無い状態)から`REPORT'へ。その為、まず使い
たいサブグループを選ぶ方法が必要です。当然通常行うようにキーワードをタイプす
るか、補完、または次のコマンドを使うこともできます:

`C-u C-u C-c C-t'
`C-S-<right>'
`C-S-<left>'
     これらのキーは、あるTODOのサブグループから次へとジャンプします。上の例
     では、`C-u C-u C-c C-t'または、`C-S-<right>'は、`TODO'か`DONE'から
     `REPORT'、そして、二番目のサブグループのどれかの状態から`CANCELED'へジ
     ャンプします。注意として`C-S-'キーバインディングは、
     `shift-selection-mode' (*note Conflicts::)と衝突します。 

`S-<right>'
`S-<left>'
     `S-<<left>>'と`S-<<right>>'は、すべてのサブグループの_すべて_のキーワ
     ードに切り替えいきます。例えば、上記の例では、`S-<<right>>'は、`DONE'
     に切り替えられ、さらに`REPORT'になります。`shift-selection-mode'と連携
     させる方法については、*note Conflicts::を参照してください。>


File: org-ja,  Node: Fast access to TODO states,  Next: Per-file keywords,  Prev: Multiple sets in one file,  Up: TODO extensions

5.2.4 Fast access to TODO states
--------------------------------

もし、切り替えせずに任意のTODOの状態にすばやく変更したい場合は、キー登録して
一文字でその状態に変更できます。それには、各キーワードの後に括弧で括ってセク
ションキーを割り当てることにより実現できます。例えば:

     (setq org-todo-keywords
           '((sequence "TODO(t)" "|" "DONE(d)")
             (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
             (sequence "|" "CANCELED(c)")))

   `C-c
C-t'を押して、選択の為のキーを押せば、その選ばれた状態へ切り替えられま
す。さらに<SPC>を使って、どのTODOキーワードも削除することができます。 (1)

   ---------- Footnotes ----------

   (1)
変数`org-fast-tag-selection-include-todo'も見てください、この変数は、タグを
使って状態の変更を可能にします(*note Setting
tags::)、この二つを混ぜて使いたいなら
ですが。この場合、それぞれのキーワードセットに単一なキーを準備する必要があり
ます。


File: org-ja,  Node: Per-file keywords,  Next: Faces for TODO keywords,  Prev: Fast access to TODO states,  Up: TODO extensions

5.2.5 ファイル別にキーワードを設定する
------------------------------------------------------

異なるファイルごとに、TODOの機能をさまざまなの方法で使用できるととても便利で
す。ファイル単位のローカルな設定をするためには、そのファイルだけに通用するキ
ーワードを特別な行として記入することで設定する必要があります。例えば、前述し
た２つの例のうちの一つを設定するの場合、次のような行を、そのファイルのどこか
で行頭から開始する必要があります。

     #+TODO: TODO FEEDBACK VERIFY | DONE CANCELED
(解釈を明確にするために`#+SEQ_TODO'と記入してもいいです。しかし、`#+TODO'と
記入するのと同じです。)、もしくは、
     #+TYP_TODO: Fred Sara Lucy Mike | DONE

   同時に複数のキーワードグループの設定には:

     #+TODO: TODO | DONE
     #+TODO: REPORT BUG KNOWNCAUSE | FIXED
     #+TODO: | CANCELED

間違いなく正しいキーワードを使うため、そのバッファ内で`#+'をタイプして、
`M-<TAB>'を使って補完してください。

縦線の後のキーワード「もしくは、縦線が指定されてない場合は、最後のキーワード
」は、そのアイテムがいつもDONE「最後のもの」であることを覚えていてください「
と言ってもDONE以外のキーワードも使えます」。これらの変更を加えた後、Org-mode
に変更を認識させるため、カーソルを変更した場所に置いたままで`C-c C-c'してく
ださい。(1)

   ---------- Footnotes ----------

   (1) Org-modeがこれらの行を読み込むのは、ファイルを開いてOrg-modeが実行
された場合だけです。`#+'で始まる行にカーソルを置いて`C-c C-c'をすると、単に
現在のバッファでOrg-modeを再起動したことになります。


File: org-ja,  Node: Faces for TODO keywords,  Next: TODO dependencies,  Prev: Per-file keywords,  Up: TODO extensions

5.2.6 Faces for TODO keywords
-----------------------------

Org-modeは、TODOキーワードを特別なフェイスを使ってハイライトします
:`org-todo'は、あるアイテムがアクションが必要なキーワードであることを指して
います。`org-done'は、あるアイテムが完了していることを指しています。もし2つ
以上の異なる状態を使用しているのであれば、特別なフェイスを使いたくなるかもし
れません。これは、変数`org-todo-keyword-faces'を変更することで可能です。例え
ば:

     (setq org-todo-keyword-faces
           '(("TODO" . org-warning) ("STARTED" . "yellow")
             ("CANCELED" . (:foreground "blue" :weight bold))))

CANCELEDにあるようにフェイスプロパティのリストを使えば上手くいく_はず_ですが
、いつもうまくいってるように見えないかもしれません。必要であれば、特別なフェ
イスを定義してそれを使うのもいいかもしれません。文字列は、カラーとして解釈さ
れます。変数`org-faces-easy-properties'により、文字の色にするか、背景色にす
るか指定できます。


File: org-ja,  Node: TODO dependencies,  Prev: Faces for TODO keywords,  Up: TODO extensions

5.2.7 TODO dependencies
-----------------------

Orgファイルの構成「階層とリスト」は、TODOの依存関係の定義を容易にします。通
常、親TODOタスクは、すべてのサブタスク「子タスクと定義されている」が終るまで
は、DONEにするべきではありません。そして時折、多く「サブ」タスクに対して論理
的な順序があるので、あるタスクがその前にあるすべての関連したタスクが終るまで
始められないこともあります。もし、変数`org-enforce-todo-dependencies'をカス
タマイズすれば、Orgは、未完了の子タスクが終わるまでDONEへの状態の変更を防ぎ
ます。さらに、もし、あるアイテムに`ORDERED'のプロパティが設定されていると、
その前の関連したタスクがすべてがDONEになるまで、そのそれぞれの子タスクは、変
更できないようになります。ここに例があります:

     * TODO このTODOは、２番が終るまで変更できない。
     ** DONE １番
     ** TODO ２番

     * 親
       :PROPERTIES:
         :ORDERED: t
       :END:
     ** TODO a
     ** TODO b, (a)が終わるのを待つ必要があります。
     ** TODO c, (a)と(b)が終わるのを待つ必要があります。

`C-c C-x o     (`org-toggle-ordered-property')'
     `ORDERED'プロパティを現在のアイテムに対してトグルします。プロパティが
     、この動作に使われるのは、タグのように継承するのではなく、現在のアイテ
     ムに対してのみ動作させるためです。しかし、もし見やすいようにタグを使っ
     てプロパティの値を記録したいのであれば、変数
     `org-track-ordered-property-with-tag'をカスタマイズしてください。 

`C-u C-u C-u C-c C-t'
     変更できない状態のものでもTODOの状態を変更します 。

変数`org-agenda-dim-blocked-tasks'を設定すれば、依存関係のせいで閉じることの
できないTODOエントリーをアジェンダビューで薄暗いフォントにして表示するか、さ
らに見えなくすることもできます。(*note Agenda Views::).

   チェックボックスを見ることでTODOの状態の変更を妨げることもできます
(*note
Checkboxes::)。変数`org-enforce-todo-checkbox-dependencies'を設定すれば、チ
ェックされていないチェックボックスをもつエントリーがDONEになるのを妨げること
もできます。

もし、より複雑な依存関係の構造が必要であれば、例えば、異なるツリーやファイル
のエントリー同士の依存関係、付属モジュールの`org-depend.el'を参照してみてく
ださい。


File: org-ja,  Node: Progress logging,  Next: Priorities,  Prev: TODO extensions,  Up: TODO Items

5.3 Progress logging
====================

Org-modeは、TODOアイテムにDONEという完了の印をつけたときや、TODOアイテムの状
態を変更したときはいつでも、自動的にタイムスタンプとメモを記録をすることがで
きます。かなり柔軟に設定することが可能で、キーワードごとに設定したり、ファイ
ルやサブツリーごとに設定することもできます。タスクの時間管理についての情報は
、*note Clocking work time::を参照してください。

* Menu:

* Closing items::            DONEとなったのはいつ？
* Tracking TODO state changes::  状態が変わったのはいつですか？
* 習慣の追跡::          どれだけ、続けられていますか？


File: org-ja,  Node: Closing items,  Next: Tracking TODO state changes,  Prev: Progress logging,  Up: Progress logging

5.3.1 Closing items
-------------------

一番基本的な時間の記録機能は、_いつ_TODOアイテムが完了したかを記録することで
す。これは、次のようにしてください(1)

     (setq org-log-done 'time)

この後、毎回TODO「未完了」からDONEの状態に移行したとき、見出しの後に
`CLOSED: [タイムスタンプ]'の行が挿入されます。切り替えていく間に一つのエント
リーに対してTODOの状態に戻すと挿入された行はまた削除されます。タイムスタンプ
と一緒にメモも記録したいのであれば、次のようにしてください(2)

     (setq org-log-done 'note)

この設定によりメモの入力を聞いてきます。そのメモは`Closing Note'という見出し
の下に挿入されます。

   タイムライン「*note Timeline::」とアジェンダ「*note Weekly/daily
agenda::」上で、`l'キー
使用してTODOアイテムと`CLOSED'タイムスタンプを日ごとに表示することができます
。何が完了しているかのサマリも提供されます。

   ---------- Footnotes ----------

   (1) これに対応するイン-バッファ定義は :`#+STARTUP: logdone'

   (2) これに対応するイ ン-バッファ定義は:`#+STARTUP: lognotedone'


File: org-ja,  Node: Tracking TODO state changes,  Next: 習慣の追跡,  Prev: Closing items,  Up: Progress logging

5.3.2 Tracking TODO state changes
---------------------------------

TODOキーワードがワークフローの状態(*note Workflow
states::)として使われる時に、い
つその状態の変化が起きたか記録し、さらにメモを取りたくなるかもしれません。そ
の場合、タイムスタンプかタイムスタンプ付きメモを記録することができます。これ
らは、見出しの後に一番新しいものを先頭として(1)項目ごとにリストされ挿入さ
れます。たくさんのメモをとっている場合、そのメモを引き出しの中に入れて隠した
いようになるかもしれません「*note
Drawers::」。その場合、変数`org-log-into-drawer'
を編集してください。オススメの引き出しは、`LOGBOOK'と呼ばれています。さらに
サブツリーのために、この変数の設定も`LOG_INTO_DRAWER'プロパティを修正すれば
、その効果を無視して上書きすることができます。

通常、すべての状態でメモを記録するのはやりすぎになるので、Org-modeは、キーワ
ードごとに設定されると想定します。これは、特別なマーカー`!'「タイムスタンプ
用」、`@'「メモ用」をキーワードの後に括弧に入れることでできるようになります
。例えば、以下のようになります。

     (setq org-todo-keywords
       '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

これで、グローバルTODOキーワードとショートカットキーを定義するだけでなく、
DONEに状態が変更された際、時間も記録されるようにも定義できます。(2)そして、WAITかCANCELEDに状態が変化した
ときにメモが記録されます。WAITの設定は、さらに特別です:斜線の後の`!'は、その
状態に最初に切り替わる際に挿入されるメモの記録だけでなく、WAITの状態から次に
の状態に変わる時に、タイムスタンプも記録されます「でもこれは、次の状態が切
り替わる時に記録する設定がない場合にのみ有効です」。そのため、WAITからDONEに
切り替わる際には影響がありません、なぜならDONEは、タイムスタンプを記録するだ
けとして設定されているからです。しかしWAITからTODOに戻る場合は、TODOになにも
記録するように設定されてなくても、WAITの`/!'設定が、タイムスタンプを挿入する
ようになります。

   まったく同じ構文を使ってバッファ内のみ有効な設定を使用できます。
     #+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)

サブツリーまたは、一つのアイテムだけ局所的にログの設定を定義したい場合は、そ
のエントリーにLOGGINGプロパティを定義してください。空ではないLOGGINGプロパテ
ィは、すべてのログの設定をnilにリセットします。この後、`lognotedone'か
`logrepeat'のようなSTARTUPキーワード、そして`TODO(!)'のような状態に特化した
設定を追加して、特定のツリーに対してログを開始するようにできます。例えば

     * TODO 各状態のタイムスタンプだけをログを取る
       :PROPERTIES:
       :LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)
       :END:
     * TODO WAITに切り替えられ、さらに繰り返されたときだけログを取る
       :PROPERTIES:
       :LOGGING: WAIT(@) logrepeat
       :END:
     * TODO 何もログを取らない
       :PROPERTIES:
       :LOGGING: nil
       :END:

   ---------- Footnotes ----------

   (1) 変数 `org-log-states-order-reversed'を確認してください

   (2) Org-modeは
、`org-log-done'と状態変化の際の記録機能を使えば、二つのタイムスタンプを記録
することも可能です。それでも、二つのメモをするように聞かれることはできません
。もし実際に、両方の機能を設定した場合、状態変化の際の記録機能の方が優先され
て、`Closing Note'は、使われません。


File: org-ja,  Node: 習慣の追跡,  Prev: Tracking TODO state changes,  Up: Progress logging

5.3.3 習慣の追跡
---------------------

Org-modeには、「habits(習慣)」と呼ばれるTODOの特別なカテゴリーの一貫性を記録
するための機能があります。habitには、以下の性質があります:

  1. 変数`org-modules'をカスタマイズすることで`habits'モジュールを有効にし
     てある。

  2. habitは、TODO一種であり、TODOキーワードを使い未解決を表します。

  3. プロパティ`STYLE'に、`habit'を値として定義してある。

  4. このTODOは、スケジュールされた日付があり、通常`.+'スタイルで繰り返され
     る間隔を表します。`++'スタイルは、時間制限があるような場合に有効でしょ
     う。例えば、週末にしなければいけないことなどです。`+'スタイルは、遅れ
     ることがあるような通常の習慣ではないような場合「例:週次報告書」に適し
     ています。

  5. このTODOは、最短から最長の期間を`.+2d/3d'のようなシンタックスで指定で
     きます。この例の場合、このタスクを少なくともで３日ごとか、多くて２日ご
     とにこなすと指定しています。

  6. 記録されていたデータが一貫性のあるグラフに表記されるように、状態のログ
     を取る`DONE'を使用できるようにしておく必要があります。使用できるように
     なっていない場合は、エラーにはなりませんが、一貫性を表すはずのグラフが
     まったく意味のないものになります。

上記にある定義が実際にはどのようになるか分かってもらうために、ここに経過の記
録情報と共に実際のhabitがあります。

     ** TODO 髭剃り
        SCHEDULED: <2009-10-17 Sat .+2d/4d>
        - State "DONE"       from "TODO"       [2009-10-15 Thu]
        - State "DONE"       from "TODO"       [2009-10-12 Mon]
        - State "DONE"       from "TODO"       [2009-10-10 Sat]
        - State "DONE"       from "TODO"       [2009-10-04 Sun]
        - State "DONE"       from "TODO"       [2009-10-02 Fri]
        - State "DONE"       from "TODO"       [2009-09-29 Tue]
        - State "DONE"       from "TODO"       [2009-09-25 Fri]
        - State "DONE"       from "TODO"       [2009-09-19 Sat]
        - State "DONE"       from "TODO"       [2009-09-16 Wed]
        - State "DONE"       from "TODO"       [2009-09-12 Sat]
        :PROPERTIES:
        :STYLE:    habit
        :LAST_REPEAT: [2009-10-19 Mon 00:36]
        :END:

このhabitが表しているのは、髭剃りを多くて２日ごとか「`SCHEDULED'により指定さ
れた日付と繰り返される間隔」、少なくとも４日ごとにする。もし、今日が１５日と
すると、このhabitは、二日後の１０月１７日にアジェンダに表示されて、４日後の
１９日には、期限切れとして表示されます。

habitsの本当に使い易いところは、定期性グラフと表示されることです。これは、過
去にどれぐらいタスクが定期的に完了したかを見るためのものです。このグラフは、
毎日過去３週間のタスクが完了したかを色分けして表示します。各色は、以下を表し
ます:

`青'
     まだ、その日までにタスクが完了してなくていい場合。

`緑'
     その日に完了できたはずのタスクの場合。

`黄'
     明日になると期限切れになるタスクの場合。

`赤'
     その日に期限切れのタスクの場合。

日ごとの色分けだけでなく、その日に終わったタスクに関してはアスタリスクでマー
クされ、感嘆符が、グラフ中の今日の日付の部分に付きます。

   アジェンダ上でhabitsが表示方法を変える幾つかの設定変数があります。

`org-habit-graph-column'
     定期的グラフを表記させるバッファ列。これにより指定された列にある文字列
     を上書きします。そのため、habitのタイトルを短く要点を付くようにすると
     いいでしょう。

`org-habit-preceding-days'
     今日より前に、定期的グラフに何日分の日付表示するかの指定。

`org-habit-following-days'
     今日より後に、定期的グラフに何日分の日付表示するかの指定。

`org-habit-show-habits-only-for-today'
     nil以外が指定されている場合、habitsを今日のアジェンダビューだけに表示
     する。これは、初期値で真に設定されています。

最後に、アジェンダバッファで`K'を押すことによりhabitsを一時的に使用不可にし
、まったく表示させないようにできます。もう一度`K'を押すと元にもどります。例
えば、もし特定の前後の内容によてのみ必要なhabitsの場合は、タグのフィルタリン
グの影響も受けます。


File: org-ja,  Node: Priorities,  Next: Breaking down tasks,  Prev: Progress logging,  Up: TODO Items

5.4 Priorities
==============

もし、Org-modeよく使うのであれば、最終的にTODOアイテム量が増え、優先順位付け
をした方がいいとなるかもしれません。優先順位付けはTODOアイテムの見出しに、次
のように_優先順位クッキー_を置くことで可能になります:

     *** TODO [#A] サム フォーチュンに手紙を書く。

初期値としてOrg-modeは、次の３つの優先順位付けをサポートします:`A'、`B'、
`C'。`A'が一番高い優先度です。クッキーなしの場合は、`B'の優先度として扱われ
ます。優先順位付けは、アジェンダの順番を付けるときのみ影響します。「 *note
Weekly/daily agenda::アジェンダ外では、Org-modeで継承されたりしません。クッ
キーは、変数`org-priority-faces'をカスタマイズすることにより、特別なフェイス
を使ってハイライトすることもできます。

優先順位付けどんなアウトラインモードにも付けるとができます。つまりTODOアイテ
ムである必要はありません。

`C-c ,'
     現在の見出しの優先順位付けをする「`org-priority'」。このコマンドは、優
     先順位付けのための文字`A'、`B'、または、`C'を聞いてきます。その代わり
     に<SPC>を押すと、優先順位付けのクッキーが見出しから削除されます。優先
     順位は、タイムラインまたは、アジェンダバッファからも`,'コマンドで遠隔
     的に変更できます。「*note Agenda commands::」。 

`S-<up>     (`org-priority-up')'
`S-<down>     (`org-priority-down')'
     現在の見出し優先度を上下する。(1).これらのキーはタイムスタンプ
     を修正するのにも使うので注意してください。「*note Creating
     timestamps::」
     `shift-selection-mode'との相互利用に関しては次を参照してください。
     *note Conflicts::

変数`org-highest-priority'、`org-lowest-priority'、`org-default-priority'を
設定することで、変更できる優先度の範囲を変えることができます。バッファごとに
、「上限、下限、既定値」の設定を以下のようにすることができます。「必ず一番上
の優先度の文字が、一番下の優先度よりもアルファベットの並びで前の文字であるよ
うにしてください。」:

     #+PRIORITIES: A C B

   ---------- Footnotes ----------

   (1) 次のオプションも参照してください。
`org-priority-start-cycle-with-default'.


File: org-ja,  Node: Breaking down tasks,  Next: Checkboxes,  Prev: Priorities,  Up: TODO Items

5.5 タスクをサブタスクに細分化する。
====================================================

通常、大きなタスクは小さくて管理しやすいサブタスクに細分化することをお勧めし
ます。これはTODOアイテムの下にアウトラインツリーをさらに詳細なサブタスクをそ
のツリーを付けて作成することで可能です。(1)すでに完了したサブタスクの進捗状況を表示してさせておくには、`[/]'か`[%]'ヘ
ッドラインのどこかに挿入してください。これらのクッキーは、サブタスクのTODOの
状態が変わるかクッキー上で`C-c C-c'を押すたびに更新されます。例えば:

     * パーティーの準備をする [33%]
     ** TODO 出席者に電話する [1/2]
     *** TODO ピーター
     *** DONE サラ
     ** TODO 食べ物を買う
     ** DONE 近所の人と話す

もし、見出しがチェックボックスと子TODOを両方持っていた場合、統計クッキーは、
あいまいなものになります。この問題を解決するには、`COOKIE_DATA'プロパティを
`checkbox'か`todo'に設定してください。

もし統計クッキーに「直下のTODOだけでなく」すべてのサブツリーのTODOエントリー
を含めたい場合は、変数`org-hierarchical-todo-statistics'を設定してください。
これを一つのサブツリーに行うには、`recursive'というキーワードを`COOKIE_DATA'
プロパティの値として設定してください。

     * 親キャプチャ統計 [2/20]
       :PROPERTIES:
       :COOKIE_DATA: todo recursive
       :END:

もしすべての子タスクが終了後、TODOエントリーを自動的にDONEに切り替えたい場合
は、以下の設定を行なってください:

     (defun org-summary-todo (n-done n-not-done)
       "すべてのサブツリーが終了するとDONEに切り替え、その他の場合は、TODOになす
     る。"
       (let (org-log-done org-log-states)   ; 記録「logging」を終了
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
     (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

その他の方法としては、チェックボックスをつかって「階層化された」多量のサブタ
スクがいくつあるか調べることもできます。「*note Checkboxes::」

   ---------- Footnotes ----------

   (1) サブタスクをグローバルTODOリストに
含めないようにするには、`org-agenda-todo-list-sublevels'を参照してください。


File: org-ja,  Node: Checkboxes,  Prev: Breaking down tasks,  Up: TODO Items

5.6 Checkboxes
==============

プレーンなリスト(1)「*note Plain lists::」は、 `[
]'で開始することでチェックボックスにすることができます。この機能は、TODO
アイテムに似ていてますが「*note TODO
Items::」、より気軽につかえます。チェックボッ
クスは、グローバルTODOリストに追加されません。そのためタスクを分岐するのに便
利です。もしくは、買い物リストに使えます。チェックボックスをチェックした状態
するには、`C-c C-c'を使ってください。もしくは、マウスでクリックしてください
。「Piotr Zielinskiの`org-mouse.el'に感謝」。

   以下は、チェックボックスリストの例です:

     * TODO パーティの準備 [2/4]
       - [-] みんなに連絡 [1/3]
         - [ ] ピーター
         - [X] サラ
         - [ ] サム
       - [X] 食べ物を注文
       - [ ] どんな音楽を掛けるか考える
       - [X] 近所の人と話す

チェックボックスは、階層化に対応しています。そのため、もしあるチェックボック
ス下の項目が複数のチェックボックスである場合、チェックボックスが全くチェック
されていないか、いくつかされているか、全てされているかによりその内の一つのチ
ェックボックスをチェックした状態にすると親チェックボックスに影響します。

最初と二列目の`[2/4]'と`[1/3]'はクッキーであり、いくつのチェックボックスがそ
のエントリーでチェックされているかとそのすべてのチェックボックス数が表示され
ています。これにより、いくつのチェックボックスが残っているか、折りたたまれて
いても分かるようになっています。クッキーは見出しかプレインなリスト「の最初の
列」に置くことができいます。各クッキーは、クッキーのある見出し／項目の直下に
ある子構造であるチェックボックスを表しています。(2)自分でクッキーを
`[/]'もしくは、`[%]'をタイプして入力しなければなりません。`[/]'を入力すると
上記したように、`m個の内のn個'となります。`[%]'の場合は、何パーセントのチェ
ックボックスがチェックされているかが情報として得られます。「上記の例では、そ
れぞれ`[50%]'と`[33%]となります」'.
見出しの下では、クッキーは、見チェックボックスか子TODOの状態の数を数えます。
また、最後の変更に基づいて表示されます。この問題を解決するには、プロパティ
`COOKIE_DATA'を`checkbox'か`todo'に設定してください。

アウトラインノードに`ORDERED'プロパティが設定されている場合、チェックボック
スは、連続でチェックされていなければなりません。上部のチェックボックスがチェ
ックされていない状態でその下部のチェックボックスをチェックしようとするとエラ
ーがスローされます

以下のコマンドでチェックボックスを操作できます:

`C-c C-c     (`org-toggle-checkbox')'
     チェックした状態をトグルするか「前置引数
     と実行すると」チェックボックスを作成します。ダブル前置引数だと、`[-]'
     が設定されます。これは、中間の状態を表します。 

`C-c C-x C-b     (`org-toggle-checkbox')'
     チェックした状態をトグルするか「前置
     引数と実行すると」チェックボックスを作成します。ダブル前置引数だと、
     `[-]'が設定されます。これは、中間の状態を表します。
        -
          アクティブなリージョンがある場合は、そのリージョンの最初のチェックボッ
          クスをトグルします。そして残りのボックスを最初のボックスと同じ状態にし
          ます。前置引数と使用すると、リージョン内のすべてのチェックボックスを作
          成するか削除します。

        -
          カーソルが見出し上にある場合、現在の見出しから次の見出しのリージョン内
          のチェックボックスをトグルします。「つまりサブツリー全体では_ない_」

        -
          アクティブなリージョンがなければ、その場所のチェックボックスをトグルし
          ます。
     
`M-S-<RET>     (`org-insert-todo-heading')'
     新しい項目をチェックボックスと共に挿入し
     ます。これは、プレインなリスト(*note Plain
     lists::)内にカーソルがすでにある場合に のみ動作します。

`C-c C-x o     (`org-toggle-ordered-property')'
     `ORDERED'プロパティを設定します。これは、連続でチェックボックスがチェックさ
     れていなければならないと指定します。プロパティが使用されます、なぜならこの指
     定はローカルに影響するべきでタグのように継承されるないからです。しかし、見や
     すいようにプロパティの値をタグを使って記録したい場合は、
     `org-track-ordered-property-with-tag'変数をカスタマイズしてください。 

`C-c #     (`org-update-statistics-cookies')'
     現在のアウトライン内の統計クッキーを更
     新します。`C-u'引数と呼び出されるとファイル全体を更新します。`C-c
     C-c'でチェ
     ックボックスをトグルした場合と`M-S-<RET>'で新しいチェックボックス項目が作成
     された場合、チェックボックス統計クッキーは、自動的に更新されます。TODO状態を
     変更すると統計クッキーも更新されます。手動でチェックボックスや項目を削除した
     り、それらを追加したり変更した場合は、このコマンドをつかって状態を更新してく
     ださい。もしくは、単にコマンドを二度トグルしてください「`C-c
     C-c'チェックボ ックスを作成など」。

   ---------- Footnotes ----------

   (1) これは概要リスト以外という意味ですが、このリストも
`org-list-automatic-rules'を修正することで可能です。

   (2) もし直下だけでなくクッキー
のしたにあるすべてのチェックボックスを網羅したい場合は、変数
`org-hierarchical-checkbox-statistics'を設定してください。


File: org-ja,  Node: Tags,  Next: Properties and Columns,  Prev: TODO Items,  Up: Top

6 Tags
******

相互に関係する情報のためにコンテキストやラベルをつけるためのすばらしい方法の
一つは見出しにタグを対応づけることです。Org-modeはタグについて幅広く対応して
います。

全ての見出しはタグのリストを取ることができて、タグは見出しの最後に置かれます
。タグはいわゆる普通の単語で利用される文字や数字、`_'、`_'を利用できます。タ
グはコロンで始まりコロンで終わらなければなりません。例えば、`:work:'です。複
数のタグはこのように書きます。`:work:urgent:'。タグはデフォルトでは太字のフ
ェイスで見出しと同じ色で表示されます。TODOのキーワード (*note Faces for
TODO keywords::)と同じように変数`org-tag-faces'を変更することで特
別なフェイスを設定することも可能です。

* Menu:

* Tag inheritance::          アウトラインのツリー構造に沿ってタグ付けされる
* Setting tags::             見出しにタグをつける
* Tag searches::             タグの組み合わせで検索する


File: org-ja,  Node: Tag inheritance,  Next: Setting tags,  Prev: Tags,  Up: Tags

6.1 Tag inheritance
===================

タグはアウトラインツリーの階層構造を利用します。もしある見出しに特定のタグが
ついていれば、全ての下位レベルにタグが継承されます。以下に例を示します:

     * Meeting with the French group      :work:
     ** Summary by Frank                  :boss:notes:
     *** TODO Prepare slides for him      :action:

最後の見出しには明示的にマークされていない、`:work:'、`:boss:'、`:notes:'、
`:action:'のタグがついています。ファイル全体の見出しに継承される見出しをつけ
ることもでき、これは仮定的にレベル0の見出しとして定義され、ファイル全体に反
映させることができます。この例を次に示します(1):

     #+FILETAGS: :Peter:Boss:Secret:

特定のタグについてタグの継承を制限するには変数`org-use-tag-inheritance'、
`org-tags-exclude-from-inheritance'を利用します。

タグの継承が有効の場合にタグの検索で見出しが一致したとき、その見出しの全ての
サブツリーも同じように一致します(2)。始めにタグが一致したサブツリーのみを表示したいの
であれば、変数`org-tags-match-list-sublevels'を設定してください (非推奨).

   ---------- Footnotes ----------

   (1) これら全てのバッファ内の設定は 、`C-c
C-c'とタイプすることでその行の変更を有効にすることができる

   (2) タグ以外の条件を加えて検索するとこの限りで
はない(これはもしその検索が、より複雑な属性を含む条件を伴わないときだけ正し
い)(*note Property searches::)


File: org-ja,  Node: Setting tags,  Next: Tag searches,  Prev: Tag inheritance,  Up: Tags

6.2 Setting tags
================

簡単に見出しの最後へタグは入力することができます。コロンの次に`M-<TAB>'でタ
グの補完をします。他にもタグの入力のための特別なコマンドが以下に続きます:

`C-c C-q     (`org-set-tags-command')'
     現在の見出しに新しくタグを入力します。org-modeは補完を始めるか、特別な
     ワンキーのインタフェースを提示します。ワンキーのインタフェースは後で説
     明します。タグを入力し、<RET>キーをタイプするとタグが挿入され、
     `org-tags-column'の列に整列されます。数引数(`C-u'
     prefix)をつけて呼び出すと、カレントバッファの全てのタグがきれいに見え
     るように整列されます。TAGSは自動的に昇格や降格した後に再整列され、TODO
     の状態が変わります(*note TODO basics::)。

`C-c C-c     (`org-set-tags-command')'
     カー ソルが見出し行にある時は`C-c C-q'と同じ動作をします。

   Org-modeは_list of
tags_に基づくタグの挿入をサポートしています。このリストは
デフォルトでは動的に構築され、バッファで使われているタグを全て含みます。変数
`org-tag-alist'にタグのリストを設定することでグローバルにタグを指定しておく
こともできます。デフォルトのタグを次のようにファイルに記述することでもデフォ
ルトのタグリストを設定できます。

     #+TAGS: @work @home @tennisclub
     #+TAGS: laptop car pc sailboat

もし変数`org-tag-alist'にタグを設定することでタグリストがグローバルに定義さ
れていたとして、そのリストよりもファイルから生成された動的なタグリストを利用
したければ、次のような空のTAGSオプションをファイルに指定します

     #+TAGS:

もし全てのファイルで使うつもりのタグや、ファイルごとのTAGSオプションで定義さ
れたタグの集合を優先したければ、変数`org-tag-persistent-alist'に明記すればよ
い。これを止めるにはファイルごとにSTARTUPオプションを次のように書きます。

     #+STARTUP: noptag

デフォルトでOrg-modeはタグの入力に標準的なミニバッファでの補完を使います。し
かし_fast tag selection_と呼ばれるもう一つの速い実装もあります。これはタグの
選択や除外をワンキーで可能にするものです。これをうまく動かすためにあなたはユ
ニークな文字を良く使うタグにアサインするべきです。変数`org-tag-alist'を
`.emacs'に設定することでグローバルにこの機能を使うことができます。例えば複数
のファイルの多くの項目に`:@home:'タグをつけるという需要があったとします。こ
の場合次のような設定なるでしょう。

     (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))

If the tag is only relevant to the file you are working on, then you can
instead set the TAGS option line as:

     #+TAGS: @work(w)  @home(h)  @tennisclub(t)  laptop(l)  pc(p)

タグインタフェースはスプラッシュウィンドウにとりうるタグを表示します。もし特
定のタグの後に新しい行から始めたいのであればタグリストに`\n'を挿入します。

     #+TAGS: @work(w)  @home(h)  @tennisclub(t) \n laptop(l)  pc(p)

もしくは2行に分けて書きます。

     #+TAGS: @work(w)  @home(h)  @tennisclub(t)
     #+TAGS: laptop(l)  pc(p)

また次のようにブレース(波括弧{})を使うことで相互排除したグループにタグをま
とめることもできます。

     #+TAGS: { @work(w)  @home(h)  @tennisclub(t) }  laptop(l)  pc(p)

これは`@work'、`@home'、`@tennisclub'のうち少なくとも一つは選択されること
を意図しています。そのようなグループを複数持つことも可能です。

Don't forget to press `C-c C-c' with the cursor in one of these lines to
activate any changes.

これらの相互排除グループを変数`org-tags-alist'で設定するためには、ブレースの
代わりにダミーのタグとして`:startgroup'と`:endgroup'を使わなければなりません
。同様に改行を表現するためにダミーのタグとして`:newline'を使うことができます
。直前の例を設定すると次のような記述になります。

     (setq org-tag-alist '((:startgroup . nil)
                           ("@work" . ?w) ("@home" . ?h)
                           ("@tennisclub" . ?t)
                           (:endgroup . nil)
                           ("laptop" . ?l) ("pc" . ?p)))

   もし少なくとも一つのタグに選択用キーが設定されていると、`C-c
C-c'が押された
ときに自動的に特別なインタフェースが表示されます。そのインタフェースは継承さ
れたタグ、現在の見出しのタグ、全ての有効な付随するタグを提示します(1)。このインタフェー
スでは以下のキーが利用できます。

`a-z...'
     アサインされたキーを押すことで現在の行にタグが追加または削除されます。
     相互排除グループのタグを選択することでそのグループの他のタグは無効にな
     ります。 

`<TAB>'
     たとえあらかじめ定義されていないタグでも、ミニバッファでタグを入力しま
     す。バッファ内の全てのタグを補完することができます。コンマで区切ること
     で複数のタグを追加することも可能です。

`<SPC>'
     この行のタグを全てクリアします。 

`<RET>'
     変更された集合を確定します。

`C-g'
     変更を破棄します。

`q'
     もし`q'がタグにアサインされていなければ`C-g'のように変更を破棄します。

`!'
     相互排除しているタグのグルーピングを無効にします。これはそのグループ内
     のタグを(例外的に)複数個、タグづけるときに使います。

`C-c'
     次の変更後の自動終了をトグルします(下記参照)。もしもしエキスパートモー
     ドを使っているのであれば、最初の`C-c'が選択ウィンドウに表示されます。

このメソッド(特別なインタフェース)であなたはとても少ないタイプで見出しにタグ
をつけられます。上記の設定で、現在のタグをクリアして、`@home'、`laptop'、
`pc'のタグをつけるには次のように入力します: `C-c C-c <SPC> h l p
<RET>'。タグ`@home'を`@work'へ付け替えるには `C-c C-c w
<RET>'とタイプするか代わりに`C-c C-c C-c w'とタイプします。定義さ
れていないタグ`Sarah'を追加するには`C-c C-c <TAB> S a r a h <RET> <RET>'すれ
ばよいのです。

   もしタグを決定するのをただひとつのキーを押すだけにする必要があれば、変数
`org-fast-tag-selection-single-key'を設定します。これによってタグを選択する
キーを押した後に`RET'を押す必要がなくなります。もしキー入力が必要であれば
`C-c'で無効化できます(つまりタグの選択を始めるために`C-c C-c C-c'の代わりに
`C-c C-c'を使います)。もしこの変数に`expert'を設定すれば、タグのワンキー選択
用の特別なウィンドウを表示しなくなります。`C-c'を追加してはじめてそのウィン
ドウが表示されるようになります。

   ---------- Footnotes ----------

   (1) キーが設 定されていないタグにはは自動的にキーがアサインされます。


File: org-ja,  Node: Tag searches,  Prev: Setting tags,  Up: Tags

6.3 Tag searches
================

一度タグシステムが設定されると、関連する情報を特殊なリストに集めるのに使われ
ます。

`C-c / m  or  C-c \     (`org-match-sparse-tree')'
     タグ検索にマッチした全てのツリーを抽出する。`C-u'のプレフィックスをつ
     けて呼び出すことで、TODOの見出しのみに限定する。 

`C-c a m     (`org-tags-view')'
     全てのアジェンダファイルにおいてタグにマッチし たものの一覧を作成する。
     *Note Matching tags and properties::. 

`C-c a M     (`org-tags-view')'
     全てのアジェンダファイルにおいてタグにマッチしたものの一覧を作成する。
     ただしTODOの項目に限定し、サブツリーの項目の検索を強制する(変数
     `org-tags-match-list-sublevels'参照)。

   これらのコマンドは全てマッチ文字列を問います。マッチ文字列はタグ`boss'と
`urgent'を含み、`project1'を含まないものを検索する`+boss+urgent-project1'や
、タグ`Kathy'または`Sally'がつけられているエントリーを検索する`Kathy|Sally'
のような基本的な論理構造が使用可能です。検索文字列の全ての構文はリッチでTODO
キーワードやエントリーのレベル、プロパティにもマッチします。完全な説明と多く
の例は*note Matching tags and properties::を見てください。


File: org-ja,  Node: Properties and Columns,  Next: 日付や時間,  Prev: Tags,  Up: Top

7 プロパティ（属性）とカラム（列）
**************************************************

プロパティは、エントリーに関連付けられたキーと値を持つペアの集合です。
Org-modeでは、プロパティのための2つの主要なアプリケショーンがあります。一番
目に、プロパティはタグのようですが値を持ちます。二番目に、Org-modeのバッファ
で(とても基本的な)データベース機能を実装するためにプロパティを使う事ができま
す。一番目のアプリケショーンの例のために、ソフトウェアのリリース計画とバグを
文章化するファイルを管理する事を想像して下さい。`:release_1:'、`:release_2:'
のようなタグを使う代わりに、`:Release:'というプロパティを使い、異なるサブツ
リーの中に`1.0'や`2.0'のような異なる値を持たせれば良いのです。プロパティの二
番目のアプリケーションの例のために、音楽CDのトラックを管理する事を想像して下
さい。そこではアルバム名、アーティスト名、リリース日、トラックの数などがプロ
パティとなるでしょう。

   プロパティは、カラムビューで便利に編集、閲覧できます(*note Column
view::)。

* Menu:

* Property syntax::          プロパティの表記の仕方
* Special properties::       他のorg-modeの機能を使用する
* Property searches::        プロパティ値の一致作業
* Property inheritance::     ツリー上でのプロパティの伝達
* Column view::              表による表示と修正
* Property API::             Lispプログラマのためのプロパティ


File: org-ja,  Node: Property syntax,  Next: Special properties,  Prev: Properties and Columns,  Up: Properties and Columns

7.1 Property syntax
===================

プロパティは、キーと値のペアです。それらは、名前`PROPERTIES'を持つ特別な引き
出し(*note
Drawers::)の中に入る必要があります。各プロパティは最初に(コロンで囲われ
た)キーを持ち、その後に値を持つ1行で記述されます。以下に例を示します。

     * CD collection
     ** Classic
     *** Goldberg Variations
         :PROPERTIES:
         :Title:     Goldberg Variations
         :Composer:  J.S. Bach
         :Artist:    Glen Gould
         :Publisher: Deutsche Grammophon
         :NDisks:    1
         :END:

プロパティ`:Xyz_ALL:'のように設定する事で、特定のプロパティ`:Xyz:'のため許容
値を定義できます。この特別なプロパティは、もしレベル1のエントリに設定された
ならば、全てのツリーに適用されるように_継承_されます。許可値を定義すると、対
応するプロパティの設定が簡単になり、入力ミスを防ぐ事ができます。CDコレクショ
ンの例では、以下のように1つのボックスの中に発売元とディスクの数を予め定義で
きます。

     * CD collection
       :PROPERTIES:
       :NDisks_ALL:  1 2 3 4
       :Publisher_ALL: "Deutsche Grammophon" Philips EMI
       :END:

1つのファイル全体で継承されるプロパティを設定したいならば、以下の行のように
使います。 
     #+PROPERTY: NDisks_ALL 1 2 3 4

   グローバル変数`org-global-properties'に設定するプロパティの値は全ての
Org-modeのファイルに継承されます。

以下のコマンドはプロパティを操作する助けとなります。

`M-<TAB>     (`pcomplete')'
     行の最初のコロンの後で、プロパティのキーを補完しま
     す。現在のファイルで使われた全てのキーは、可能な補完候補として提供され
     ます。

`C-c C-x p     (`org-set-property')'
     プロパティを設定します。プロパティ名
     と値の入力を促します。必要なら、プロパティの引き出しがさらに作られます。

`M-x org-insert-property-drawer'
     現在のエントリーの中にプロパティの引き出しを入れます。引き出しはエント
     リーのはじめに入りますが、デッドラインのような計画情報を持つ行の後とな
     ります。

`C-c C-c     (`org-property-action')'
     プロパティの引き出しの中にカーソ
     ルがあるとき、プロパティコマンドを実行します。 

`C-c C-c s     (`org-set-property')'
     現在のエントリにプロパティを設定します。プ
     ロパティと値の両方共、補完を使って入力できます。 

`S-<right>     (`org-property-next-allowed-value')'
`S-<left>     (`org-property-previous-allowed-value')'
     ポイントのプロパティを次/前の許可値に切り替えます。

`C-c C-c d     (`org-delete-property')'
     現在のエントリからプロパティを削除します。

`C-c C-c D     (`org-delete-property-globally')'
     プロパティを現在のファイルにある全てのエントリからグローバルに削除します。

`C-c C-c c     (`org-compute-property-at-point')'
     ポイントにあるプロパティを最も近い列のフォーマット定義からオペレータやスコープを使って計算します。


File: org-ja,  Node: Special properties,  Next: Property searches,  Prev: Property syntax,  Up: Properties and Columns

7.2 Special properties
======================

以前の章で述べたTODO状態や、エントリの優先度のようなスペシャルプロパティは、
Org-modeの機能への別のアクセス方法を提供します。このインターフェイスは、カラ
ムビュー(*note Column
view::)にそれらの状態を含めたり、クエリにそれらを使ったりす
る事で生じます。次のプロパティ名は特別(`:CATEGORY:'を除いて)で、プロパティの
引き出しでキーとして使われません。

     TODO         エントリのTODOキーワード
     TAGS         見出しに直接定義されたタグ
     ALLTAGS      継承されたタグも含む全てのタグ
     CATEGORY     エントリのカテゴリ
     PRIORITY     1文字の文字列である、エントリの優先度
     DEADLINE     山括弧(<>)のないデッドライン時刻文字列
     SCHEDULED    山括弧(<>)のないスケジュールタイムスタンプ
     CLOSED       いつこのエントリがクローズされたか
     TIMESTAMP    エントリで最初のキーワードのないタイムスタンプ
     TIMESTAMP_IA エントリで最初のアクティブでないタイムスタンプ
     CLOCKSUM     サブツリーでのCLOCKインターバルの合計。`org-clock-sum'が値を計算
     するために最初に実行されなければならない。
     BLOCKED      \t\ であれば、タスクが子供や兄弟に現在ブロックされている
     ITEM         エントリの内容
     FILE         エントリのあるファイル名


File: org-ja,  Node: Property searches,  Next: Property inheritance,  Prev: Special properties,  Up: Properties and Columns

7.3 Property searches
=====================

プロパティに基いて選択した特別なリストやツリーの抽出を作成するために、タグ検
索(*note Tag searches::)の場合と同じコマンドが使えます。
`C-c / m  or  C-c \     (`org-match-sparse-tree')'
     全てのマッチしたエントリについて抽出したツリーを作成します。前置引数
     `C-u'をつけると、TODO行でない見出しは無視されます。 

`C-c a m     (`org-tags-view')'
     全てのアジェンダファイルからタグ・プロパティに
     マッチしたグローバルなリストを作成します。 *Note Matching tags and
     properties::.  

`C-c a M     (`org-tags-view')'
     全てのアジェンダファイルからタグにマッチするグローバルなリストを作成し
     ます。しかし、TODO
     項目と下位項目の強制チェック(変数`org-tags-match-list-sublevels'参照)
     のみチェックします。

   検索文字列のための文法は、*note Matching tags and
properties::で説明されています。

1つのプロパティに基いて抽出したツリーを作成するための特別なコマンドもありま
す。

`C-c / p'
     Create a sparse tree based on the value of a property.  This first
     prompts for the name of a property, and then for a value.  A sparse
     tree is created with all entries that define this property with the
     given value.  If you enclose the value in curly braces, it is
     interpreted as a regular expression and matched against the property
     values.


File: org-ja,  Node: Property inheritance,  Next: Column view,  Prev: Property searches,  Up: Properties and Columns

7.4 プロパティの継承
============================

Org-mode文章のアウトライン構造はプロパティの継承モデルを適用しています。ツリ
ーの親があるプロパティを持っているならば、子はこのプロパティを継承します。
Org-modeはこれをデフォルトで有効としていません。これはプロパティの検索を遅く
してしまうためとあまり必要とされないためです。しかしながら、継承が役立つ場面
があるならば、変数`org-use-property-inheritance'を設定する事で有効とできます
。この変数は、全てのプロパティを親から継承する`t'、継承されるべきプロパティ
のリスト、継承されるプロパティにマッチする正規表現を設定できます。もしプロパ
ティが値`nil'を持つならば、継承検索がこの値で停止し`nil'を返すように、明示的
に未定義のプロパティであると解釈されます。

Org-modeは、継承がハードコードされているプロパティがいくつかあります。少くと
もそれらを使う特別なアプリケーションがあります。

`COLUMNS'
     The `:COLUMNS:' property defines the format of column view (*note
     Column view::).  It is inherited in the sense that the level where a
     `:COLUMNS:' property is defined is used as the starting point for a
     column view table, independently of the location in the subtree from
     where columns view is turned on.

`CATEGORIES'
     アジェンダビュー用えす。`:CATEGORY:'プロパティを通して設定されたカテゴ
     リがサブツリー全体に適用されます。

`ARCHIVE'
     アーカイブ用です。`:ARCHIVE:'プロパティは、サブツリー全体のアーカイブ
     位置を定義します(*note Moving subtrees::)。

`LOGGING'
     LOGGINGプロパティは、エントリやサブツリーのログ取得設定について定義し
     ます(*note Tracking TODO state changes::)。


File: org-ja,  Node: Column view,  Next: Property API,  Prev: Property inheritance,  Up: Properties and Columns

7.5 Column view
===============

アウトラインツリーにあるプロパティを閲覧、編集するための最も良い方法は_カラ
ムビュー_です。カラムビューでは、各アウトラインノードがテーブル行に変換され
ます。このテーブルにある列がエントリのプロパティへのアクセスです。Org-modeは
、各項目の見出し上にテーブル構造をオーバレイすることで列を実装します。見出し
はテーブル列に変換されますが、アウトラインツリーの見た目もまだ変えられます。
例えば、CONTENTS
ビュー(`S-<TAB>S-<TAB>'、もしくは、カラムビューがアクティブであるときに単純
に`c')にスイッチする事でコンパクトなテーブルを得られますが、まだ各見出し以下
のエントリを開いたり、読んだり、編集したりもできます。また、ツリーの抽出コマ
ンドを実行した後にカラムビューに切り替える事もでき、この方法では選択した項目
のみのテーブルを得ます。カラムビューは利用可能な複数のファイルから選択した項
目を集めたクエリのあるアジェンダバッファ(*note Agenda
Views::)でも動作します。

* Menu:

* Defining columns::         カラムの書式のプロパティ
* Using column view::        カラム表示の作り方と使い方
* カラム表示の保存::  カラム表示用の動的ブロック


File: org-ja,  Node: Defining columns,  Next: Using column view,  Prev: Column view,  Up: Column view

7.5.1 Defining columns
----------------------

最初にカラムビューを設定するために、カラムを定義する必要があります。これはカ
ラムフォーマット行を定義する事によってなされます。

* Menu:

* Scope of column definitions::  カラム設定の定義範囲の指定方法は？
* Column attributes::        カラム内の表示と値


File: org-ja,  Node: Scope of column definitions,  Next: Column attributes,  Prev: Defining columns,  Up: Defining columns

7.5.1.1 Scope of column definitions
...................................

カラムフォーマットを定義するために、次のように行を記載します。

     #+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO

指定したツリーに適用するだけのフォーマットを指定するために、`:COLUMNS:'プロ
パティをそのツリーの一番上のノードに追加します。例えば、

     ** カラムビューの一番最初のノード
        :PROPERTIES:
        :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
        :END:

   If a `:COLUMNS:' property is present in an entry, it defines columns for
the entry itself, and for the entire subtree below it.  Since the column
definition is part of the hierarchical structure of the document, you can
define columns on level 1 that are general enough for all sublevels, and
more specific columns further down, when you edit a deeper part of the tree.


File: org-ja,  Node: Column attributes,  Prev: Scope of column definitions,  Up: Defining columns

7.5.1.2 Column attributes
.........................

列定義は、列の属性の集りです。一般的な定義は以下のようになります。

      %[WIDTH]PROPERTY[(TITLE)][{SUMMARY-TYPE}]

パーセントとプロパティ名を除いて、全ての項目はオプションです。個々のパーツは
次の意味を持ちます。

     WIDTH           列の幅を文字数で指定する整数。
                     省略すると、幅は自動的に決定されます。
     PROPERTY        この列で編集できるプロパティ。
                     メタデータを示す特別なプロパティがここで許容されます。
                     (*note Special properties::)
     TITLE     列の見出しテキスト。省略するとプロパティ名が使われます。
     {SUMMARY-TYPE}  サマリタイプ。指定すると親ノードの列の値は子から計算され
     ます。
                     サポートされる概要のタイプは以下です。
                     {+}       この列にある数の和。
                     {+;%.1f}  `+'と似ているが、フォーマットが`%.1f'となる。
                     {$}       通貨。`+;%.2f'の略。
                     {:}       時刻の合計。HH:MM。数値は時間。
                     {X}       チェックボックスの状態。子が全て`[X]'ならば、
     `[X]'。
                     {X/}      チェックボックスの状態。`[n/m]'。
                     {X%}      チェックボックスの状態。`[n%]'。
                     {min}     列の最も小さい数値。
                     {max}     最も大きい数値。
                     {mean}    数の算術平均。
                     {:min}    列に最も小さい時間数値。
                     {:max}    最も大きい時間数値。
                     {:mean}   時刻の算術平均。
                     {@min}    最小時刻(日/時間/分/秒)。
                     {@max}    最大時刻(日/時間/分/秒)。
                     {@mean}   時刻の算術平均(日/時間/分/秒)。
                     {est+}    低-高見積りを追加。

含めるあらゆるプロパティに1つのサマリタイプしかを持てないという事に気をつけ
て下さい。同じプロパティを参照する後にくる列は全て同じサマリの情報を表示しま
す。

`est+'サマリタイプはもう少し説明が必要です。それは低-高の幅で表現される見積
りを組み合わせるために使われます。例えば、特定のタスクが5日必要であると見積
る代わりに、どのくらいの仕事が必要とされるか公正に確実に見積もるならば5日か
ら6日と、それをなすのに必要な時間が本当に分からないならば、1-10日と見積るで
しょう。両者の幅の平均は5.5日ですが、前者はより予測可能な発言を示しています
。

そのような見積りを組み合わせるとき、単純に低と高を追加すると非現実的な幅の結
果を作ります。代わりに、`est+'は合計から最終的な見積りを生成する事で統計的意
味やサブタスクの分散を追加します。例えば、10個のタスクがあるとき、各々が0.5
から2日の仕事であると見積られました。全てが非常によく進む、もしくは悪く進む
と期待する事による計算で、ストレートな追加は5日から20日の見積りであると生成
します。対照的に、`est+'は全ての仕事より現実的に10日から15日であると見積りま
す。

   以下は許容値にそって列定義を計算する例です。

     :COLUMNS:  %25ITEM %9Approved(Approved?){X} %Owner %11Status \(1)
                        %10Time_Estimate{:} %CLOCKSUM
     :Owner_ALL:    Tammy Mark Karl Lisa Don
     :Status_ALL:   "In progress" "Not started yet" "Finished" ""
     :Approved_ALL: "[ ]" "[X]"

最初の列、`%25ITEM'はその項目の25文字を意味します。すなわち見出しの\です。
おそらく常に`ITEM'指示子を持つ列定義をはじめるべきでしょう。その他の指示子は
許容値の名前のリストを持つ列`Owner'、4つの異なる利用可能な値を持つ`Status'、
チェックボックスフィールドを持つ`Approved'を生成します。`%'文字の後に幅が与
えられていないとき、列は全ての値を完全に表示するために必要な幅と同じぐらい正
確に広くなります。`Approved'列は修正れたタイトル(クエスチョンマークのある
`Approved?')を持っています。サマリはHH:MMのように表現される持続時間を追加し
た`Time_Estimate'列と子が全てチェックされているならば、`[X]'状態を持った
`Approved'列で作られます。`CLOCKSUM'は特別で、サブツリーにあるCLOCKインター
バルの合計をリストします。

   ---------- Footnotes ----------

   (1) Please note that the COLUMNS definition must be on a single line--it
is wrapped here only because of formatting constraints.


File: org-ja,  Node: Using column view,  Next: カラム表示の保存,  Prev: Defining columns,  Up: Column view

7.5.2 Using column view
-----------------------

カラムビューのオン・オフ
....................................

`C-c C-x C-c     (`org-columns')'
     カラムビューを有効とします。カーソルがそのファイルの最初の見出しより前
     にあるならば、カラムビューは`#+COLUMNS'定義を使う事によりファイル全体
     に対して有効となります。カーソルがアウトラインの内側のどこかにあるなら
     ば、このコマンドはフォーマットを定義する`:COLUMNS:'プロパティをポイン
     トから上部の階層に向かって検索します。1つ見つかったとき、カラムビュー
     テーブルは`:COLUMNS:'プロパティを含むエントリではじまるツリー用に設立
     されます。そのようなプロパティが見付からないときは、フォーマットは
     `#+COLUMNS'行もしくは、変数`org-columns-default-format'から取得され、
     カラムビューは現在のエントリとそのサブツリーのために設立されます。 

`r     (`org-columns-redo')'
     バッファにある最近作られた変更を反映するためにカラ
     ムビューを再生成します。

`g     (`org-columns-redo')'
     `r'と同じです。 

`q     (`org-columns-quit')'
     カラムビュー抜けます。

値を編集する
..................

`<left> <right> <up> <down>'
     フィールドからフィールドへカラムビューを通じて移動します。 

`S-<left>/<right>'
     フィールドの次と前の許容値を切り替えます。このために、プロパティの指定
     された許容値を持つ必要があります。

`1..9,0'
     直接にN番目の許容値を選択します。`0'は10番目の値を選択します。 

`n     (`org-columns-next-allowed-value')'
`p     (`org-columns-previous-allowed-value')'
     `S-<left>/<right>'と同じです。

`e     (`org-columns-edit-value')'
     ポイント下のプロパティを編集します。特別なプロパティでは通常そのプロパティを変更するために使うのと同じインタフェースを呼び出します。例えば、TAGSプロパティを編集するとき、タグ補完や高速選択インタフェースがポップアップします。

`C-c C-c     (`org-columns-set-tags-or-toggle')'
     チェックボックスがあるならば、それを切り替えます。

`v     (`org-columns-show-value')'
     このプロパティの完全な値を表示します。列の幅がその値よりも小さいときに便利です。

`a     (`org-columns-edit-allowed')'
     このプロパティの許容値のリストを編集します。リストが階層に見つかるならば、修正値はそこに保存されます。リストが見つからないならば、新しい値は現在のカラムビューの一部えある最初のエントリに保存されます。

テーブル構造を編集する
.................................

`<     (`org-columns-narrow')'
`>     (`org-columns-widen')'
     1文字分列を狭く・広くする

`S-M-<right>     (`org-columns-new')'
     現在の列の左に新しい列を挿入する。

`S-M-<left>     (`org-columns-delete')'
     現在の列を削除する。


File: org-ja,  Node: カラム表示の保存,  Prev: Using column view,  Up: Column view

7.5.3 カラム表示の保存
------------------------------

カラムビューはバッファへのオーバレイのみなので、直接にエクスポートや印字がで
きません。カラムビューをキャプチャしたいならば、`columnview'ダイナミックビュ
ー(*note Dynamic
blocks::)を使って下さい。このブロックのフレームは以下のように見え ます。

     * The column view
     #+BEGIN: columnview :hlines 1 :id "label"

     #+END:

This dynamic block has the following parameters:

`:id'
     これは最も重要なパラメータです。カラムビューはあるツリーによくローカラ
     イズされる機能であり、キャプチャブロックはファイル内の異なる位置にある
     かもしれません。キャプチャへのビューのツリーを識別するために、4つの値
     を使えます。 
          local     キャプチャブロックに位置するツリーを使います。
          global    そのファイル内の全ての見出しを含む、グローバルビューを作りま
          す。
          "file:PATH-TO-FILE"
                    このファイルの一番上のカラムビューを実行します。
          "ID"      `:ID:'を持つツリーにあるカラムビューを呼び出します。
                    値labelを持つプロパティ。現在のエントリ用にグローバルにユニー
          クな
                    IDを作るために`M-x org-id-copy'を使い、それをkill-ringにコピ
          ーします。

`:hlines'
     `t'のとき、全ての行の後に横線を挿入します。数値Nのとき、レベル `<=
     N'を持つ各見出しの前に縦線を挿入します。

`:vlines'
     `t'に設定するとき、列グループに縦線を強制します。

`:maxlevel'
     数値を設定すると、そのレベル以下のエントリをキャプチャしません。

`:skip-empty-rows'
     `t'に設定すると、カラムビューが`ITEM'である空でない識別子のみの行をス
     キップします。


次のコマンドはダイナミックブロックを挿入、更新します。

`C-c C-x i     (`org-insert-columns-dblock')'
     カラムビューをキャプチャするダイ
     ナミックブロックを挿入します。そのビューのスコープやIDの入力を促されま
     す。

`C-c C-c  or  C-c C-x C-u     (`org-dblock-update')'
     ポイント下のダイナミックブ
     ロックを更新します。カーソルはダイナミックブロクの`#+BEGIN'行にある必
     要があります。

`C-u C-c C-x C-u     (`org-update-all-dblocks')'
     全てのダイナミッ クブロックを更新します(*note Dynamic
     blocks::)。複数のクロックテーブルブロッ
     クや列キャプチャブロック、その他のダイナミックブロックがバッファにある
     とき便利です。

カラムビューテーブルに計算式を追加し、テーブルの前にプロットする命令を追加で
きます。これらはブロックの更新があっても生き残ります。テーブルの後に
`#+TBLFM:'があるならば、テーブルは実際に更新の後に自動的に実際に再計算されま
す。

   テーブルの中でプロパティ値を処理したりキャプチャする別の方法はEric
Schulteの`org-collector.el'によりできます。それは寄付されたパッケージ
(1)です。あるスコープにあ
るエントリからプロパティを集めるための一般的なAPIやテーブルやダイナミックブ
ロックの中に挿入する前にそれらの値を処理する任意のLisp式を提供します。

   ---------- Footnotes ----------

   (1)
寄付されたパッケージはEmacsの一部ではありませんがOrgのメインの配布物と共に
配布されます(`http://orgmode.org'を訪ずれて下さい)。


File: org-ja,  Node: Property API,  Prev: Column view,  Up: Properties and Columns

7.6 プロパティAPI
======================

プロパティにアクセス、変更するための完全なAPIがあります。このAPIはプロパティ
と共に動作するために、また、それらを元とした機能を実装するためにEmacs
Lispプログラムから使われます。詳細な情報は*note Using the property
API::を参照して 下さい。


File: org-ja,  Node: 日付や時間,  Next: Capture - Refile - Archive,  Prev: Properties and Columns,  Up: Top

8 日付と時刻
*****************

プロジェクトのプランニングを補助するため、TODOアイテムは日付または時刻でラベ
リングすることができます。このような形でフォーマットされた日付および時刻の情
報を含む文字列はOrg-modeでは_タイムスタンプ_と呼ばれています。一般的な用法で
は、タイムスタンプは何かを作成したときや最後に変更したときの記録を示しますの
で、若干紛らわしいかもしれませんが、Org-modeではタイムスタンプという用語をよ
り広い意味で用います。

* Menu:

* Timestamps::               ツリーに時間の割り当て
* Creating timestamps::      タイムスタンプを挿入するコマンド
* Deadlines and scheduling::  作業計画をたてる
* Clocking work time::       タスクに費す時間を追跡する
* Effort estimates::         事前に作業活動を計画する
* Relative timer::           実行中のタイマに関する注意
* カウントダウンタイマ::  タスクのカウントダウンタイマを起動する


File: org-ja,  Node: Timestamps,  Next: Creating timestamps,  Prev: 日付や時間,  Up: 日付や時間

8.1 タイムスタンプ、デッドラインおよびスケジューリング
===============================================================================

タイムスタンプは、例えば`<2003-09-16 Tue>'、`<2003-09-16 Tue 09:39>'、
`<2003-09-16 Tue 12:00-12:30>'といった独自形式での日付（場合によっては時刻お
よび時間間隔を含む）の指定方法です(1)。タイムスタンプはOrgツリー構造の見
出し、本文のいずれにも挿入できます。タイムスタンプを指定することにより、指定
された日付のアジェンダ(*note Weekly/daily
agenda::)にそのエントリーが表示されます 。その際には以下の区別が行われます。

`プレーンなタイムスタンプ、イベント、アポイント'
     項目に対して単一の日付または時刻を割り当てるシンプルなタイムスタンプで
     す。紙の予定表に予定あるいはイベントを記入するのとほぼ同じ感覚です。タ
     イムラインおよびアジェンダを表示すると、プレーンなタイムスタンプが指定
     されたエントリーの見出しはまさにその指定された日付に表示されます。

          * ピーターと映画を見に行く<2006-11-01 Wed 19:15>
          * 気候変動についてのディスカッション<2006-11-02 Thu 20:00-22:00>

`リピート間隔を指定したタイムスタンプ'
     タイムスタンプには_リピート間隔_を含めることができます。すなわち単一の
     日時だけでなく、N日(d)、N週間(w)、Nヶ月(m)あるいはN年(y)といった一定の
     間隔で繰り返すようなケースに対応しています。例えば、毎週水曜日のアジェ
     ンダに表示する場合は以下のようになります。

          * 学校までサムを迎えに行く<2007-05-16 Wed 12:30 +1w>

`ダイアリー形式のS式項目'
     より複雑な日付の指定方法として、Org-modeではEmacsのcalendarまたはdiary
     パッケージで実装されているS式のダイアリー項目を使用することができます
     。例えば以下のような形式です。

          * 毎月第2木曜日のオタクの集まり
            <%%(diary-float t 4 2)>

`日付または時刻の間隔'
     2つのタイムスタンプを`--'でつなげることにより、時間間隔を表現できます
     。時間間隔の指定されたヘッドラインは、間隔の始めと終わりの日、およびそ
     の間の現在表示されている日付の項目に表示されます。以下のような形です。

          ** アムステルダムでのミーティング
             <2004-08-23 Mon>--<2004-08-26 Thu>

`アクティブでないタイムスタンプ'
     プレーンなタイムスタンプと同様ですが、<>ではなく[]で囲むことによりアク
     ティブでないタイムスタンプとなります。このようなタイムスタンプが指定さ
     れたエントリーは、アジェンダに表示_されません_。

          * ジリアンが5度目の遅刻　[2006-11-01 Wed]


   ---------- Footnotes ----------

   (1) この表記は標準的なISO8601の日付、時刻フォ
ーマットをもとに考案されています。代替フォーマットの使用については、 *note
Custom time format::を参照してください。


File: org-ja,  Node: Creating timestamps,  Next: Deadlines and scheduling,  Prev: Timestamps,  Up: 日付や時間

8.2 Creating timestamps
=======================

Org-modeがタイムスタンプを認識するためには、特定のフォーマットを用いる必要が
あります。以下のコマンドのいずれを用いても正しいフォーマットでタイムスタンプ
を生成することができます。

`C-c .     (`org-time-stamp')'
     日付を入力して、それに対応するタイムスタンプを挿
     入します。既にバッファ内に存在するタイムスタンプにカーソルが置かれてい
     る場合は、このコマンドは新たなタイムスタンプを挿入する代わりに、既にあ
     るタイムスタンプを変更します。このコマンドを2回連続で使用すると、時間
     間隔を指定することができます。

`C-c !     (`org-time-stamp-inactive')'
     コマンド `C-c
     .'と同様ですが、アクティブでない（アジェンダのエントリーに反映さ
     れない）タイムスタンプを生成します。 

`C-u C-c .'
`C-u C-c !'
     `C-c .'および`C-c !'と同様ですが、日付と時刻を含む代替フォーマットを使
     用します。標準では、時刻は5分間隔で丸められます。
     `org-time-stamp-rounding-minutes'のオプションを参照して下さい。 

`C-c <     (`org-date-from-calendar')'
     カレンダーのカーソルに対応したタイムスタ ンプを挿入します。

`C-c >     (`org-goto-calendar')'
     現在時刻のEmacカレンダーに
     アクセスします。現在の行に既にタイムスタンプが存在する場合は、それに対
     応する日付にアクセスします。

`C-c C-o     (`org-open-at-point')'
     タイムスタンプ
     および時間間隔で指定された日付でアジェンダにアクセスします (*note
     Weekly/daily agenda::)。 

`S-<left>     (`org-timestamp-down-day')'
`S-<right>     (`org-timestamp-up-day')'
     カーソ
     ル一の日付を1日変更します。このキーバインドはシフト選択およびそれに関
     連するモードと衝突します(*note Conflicts::)。 

`S-<up>     (`org-timestamp-up')'
`S-<down>     (`org-timestamp-down-down')'
     カーソルのあ
     るタイムスタンプの項目を変更します。カーソルが年、月、日、時間あるいは
     分の上に置かれている場合に使用できます。例えば、タイムスタンプが
     `15:30-16:30'のように時間間隔を含む場合、左の時刻を変更すると自動的に
     右の時刻も変更され、間隔は一定の長さに保たれます。間隔の長さを変更する
     には、右の時刻を変更して下さい。ただし、カーソルがタイムスタンプではな
     く見出し上にある時には、同じキー操作により項目の優先度が変更されますの
     で気をつけて下さい(*note
     Priorities::)。このキーバインドはシフト選択および関
     連するモードとも衝突します(*note Conflicts::)。 

`C-c C-y     (`org-evaluate-time-range')'
     開始日時と終了日時の差を計算することにより、時間間隔を計算します。前置
     引数を指定することにより、計算結果をタイムスタンプの後に挿入できます（
     テーブルの中では隣の列に挿入されます）。

* Menu:

* The date/time prompt::     日付と時刻入力のサポート
* Custom time format::       日付を異なる見た目にする


File: org-ja,  Node: The date/time prompt,  Next: Custom time format,  Prev: Creating timestamps,  Up: Creating timestamps

8.2.1 The date/time prompt
--------------------------

Org-modeが日付または時刻をプロンプトに表示するとき、標準では標準フォーマット
による形式が表示されるため、そのフォーマットで入力することが必須だと勘違いし
そうになります。ところが、実際には日付または時刻の情報を含む任意の文字列を入
力することができ、Org-modeはかなり利口に入力された時間情報を解釈します。例え
ば、`C-y'により電子メールの文面からコピーした文字列（複数行でも可）を挿入す
ることができます。Org-modeは文面の中の時間情報を見つけ出し、そこで指定されて
いない情報は_デフォルトの日付時刻_を用います。デフォルトは通常は現在の日付お
よび時刻ですが、既にあるタイムスタンプを変更する場合や、時間間隔の2つ目の項
目を入力する場合には、バッファ内のタイムスタンプから情報が取得されます。情報
を解釈する際に、Org-modeは多くの場合では入力したい時間が未来の時間であると推
測します。例えば年月の情報を省略して、今日より前の時刻を指定しようとすると、
Org-modeは未来の時刻を意図しているものと推測します (1)。
日付が自動的に未来にシフトされた場合、プロンプトには`(=>F)'が表示されます。

例えば、今日が2006年6月13日であるとしたとき、以下の左ような入力は右のように
解釈されます。Org-modeにより推定された部分を太字で示します。

     3-2-5         => 2003-02-05
     2/5/3         => 2003-02-05
     14            => 2006-06-14
     12            => 2006-07-12
     2/5           => 2007-02-05
     Fri           => 直近の金曜日(基準日かそれより後)
     sep 15        => 2006-09-15
     feb 15        => 2007-02-15
     sep 12 9      => 2009-09-12
     12:45         => 2006-06-13 12:45
     22 sept 0:34  => 2006-09-22 0:34
     w4            => 現在の年（2006年）のISO週番号
     2012 w4 fri   => 2012年のISO4週目の火曜日の日付
     2012-w04-5    => 上と同様

さらに、相対的な日付を入力するための方法として、入力の_最初に_プラスまたはマ
イナス記号、数値および文字([dwmy])により日、週、月あるいは年の変化を指定する
方法があります。単一のプラス/マイナスを入力すると、常に今日に対する相対的な
日付が指定されます。2つのプラスまたはマイナスが入力されると、標準の日付に対
する相対値となります。一文字の代わりに時間に関する省略文字列を指定すると、N
番目の該当する日が指定されます。以下に例を示します。

     +0            => 今日
     .             => 今日
     +4d           => 今日から4日後
     +4            => 上と同様
     +2w           => 今日から2週間後
     ++5           => 標準日時から5日後
     +2tue         => 今日から数えて2回目の火曜日

この機能では、英語の月および曜日の省略記法に対応しています。省略しない記法や
他の言語の記法を使用したい場合には、変数`parse-time-months'および
`parse-time-weekdays'を変更して下さい。

時間間隔は、開始時刻と終了時刻を入力するか、開始時刻とその継続時間(HH:MMの形
式)を入力することにより指定できます。前者の場合は分離記号として`-'あるいは
`-{}-'を使用し、後者の場合は分離記号として'+'を使用して下さい。例えば以下
の通りです。

     11am-1:15pm    => 11:00-13:15
     11am--1:15pm   => 上と同様
     11am+2:15      => 上と同様

ミニバッファのプロンプトと並行して、カレンダーがポップアップします(2)。カレンダー内の日付をクリックするか、<RET>を入力することにより日付のプ
ロンプトを抜けると、カレンダーで選択した日付とプロンプトで入力された情報が組
み合わされます。カレンダーはミニバッファから自由に操作することがきます。

     <RET>           カレンダーのカーソル地点の日付を選択する。
     mouse-1        クリックにより日付を選択する。
     S-<right>/<left>     1日分進める/戻る
     S-<down>/<up>     1週間分進める/戻る
     M-S-<right>/<left>   1ヶ月分進める/戻る
     > / <          カレンダーを1ヶ月前/後ろにスクロールする
     M-v / C-v      カレンダーを3ヶ月前/後ろにスクロールする

文章の説明では、日付時刻プロンプトの動作は複雑に思えるかもしれませんが、徐々
に慣れてくると、これ以外の方法で日付および時刻を入力することのほうが面倒に感
じることでしょう。動作の仕組みに対する理解を助けるため、入力された情報に対す
るその時点での解釈がミニバッファに表示されます。(3)。

   ---------- Footnotes ----------

   (1)
`org-read-date-prefer-future'の変数を参照。この変数`time'に該当する変数を変
更することにより、現在時刻より前の時刻を明日にシフトすることも可能です。

   (2) カレンダ
ーの表示が不要の場合、変数`org-popup-calendar-for-date-prompt'を変更して下さ
い。

   (3) もしミニバッファの表示が目
障りな場合は、`org-read-date-display-live'で表示しないよう設定することができ
ます。


File: org-ja,  Node: Custom time format,  Prev: The date/time prompt,  Up: Creating timestamps

8.2.2 Custom time format
------------------------

日付や時間を表現するため、Org-modeはISO8601で定義されているような標準的なISO
の記法を使用しています。もしこの記法に不慣れで、別の日付や時間の記法のほうが
好みである場合は、変数`org-display-custom-times'および
`org-time-stamp-custom-formats'をカスタマイズすることができます。

`C-c C-x C-t     (`org-toggle-time-stamp-overlays')'
     カスタムフォーマットの日付 および時間の表示をトグルします。

Org-modeは文字列のスキャンニングのためにデフォルトのフォーマットを必要とする
ため、カスタムフォーマットの日付および時刻は標準フォーマットを_置き換えませ
ん_。その代わりに、テキストのプロパティを用いて標準フォーマットに_上書きされ
ます_。これが原因で以下のような動作が生じます。
   * タイムスタンプの上にカーソルを置くことはできなくなり、その前後にしかカ
     ーソルが移動しなくなります。

   * `S-<up>/<down>'のキー操作は、タイムスタンプの各要素を変更するために使
     用できなくなります。カーソルがスタンプの前にある場合、`S-<up>/<down>'
     によりスタンプを1日だけ変更します。これは`S-<left>/<right>'と同様です
     。スタンプの後ろにある場合、時間が1ヶ月ずつ変更されます。

   * タイムスタンプが時間間隔や繰り返し時刻を含む場合、これらは上書きされず
     に元の形式のままバッファに表示されます。

   * タイムスタンプを一文字ずつ消去した場合、(隠れた)ISO標準フォーマット文
     字列の_全て_を削除した場合のみカスタムフォーマットのタイムスタンプが消
     去されます。

   * もし、カスタムフォーマットのタイムスタンプが標準フォーマットより長く、
     テーブル内で用いられている場合、テーブルの整形が崩れます。標準フォーマ
     ットより短い場合には、期待通りに動作します。


File: org-ja,  Node: Deadlines and scheduling,  Next: Clocking work time,  Prev: Creating timestamps,  Up: 日付や時間

8.3 Deadlines and scheduling
============================

プランニングを補助するため、タイムスタンプの前に所定のキーワードを置くことが
できます。

`DEADLINE'
     意味:タスク(多くの場合はTODOアイテムですが、それに限りません)はタイム
     スタンプで示された日のうちに終了するものと見なされます。

     デッドラインが付けられた場合は、そのタスクはアジェンダの中に記載されま
     す。それに加えて、_今日_のアジェンダはデッドラインが近づいたり、それを
     超過したりした場合に警告を発します。警告は期限の
     `org-deadline-warning-days'だけ前から表示され、エントリがDONEとされる
     までは消えません。以下に例を示します。

          *** TODO ガイド誌の地球についての記事を書く。
              担当編集者は[[bbdb:Ford Prefect]]
              DEADLINE: <2004-02-29 Sun>

     以下の構文を用いることにより、個別のデッドラインについて異なる警告のリ
     ードタイムを指定することができます。以下は5日間の警告期間を指定する場
     合の例です`DEADLINE: <2004-02-29 Sun -5d>'。

`SCHEDULED'
     意味:指定された日に、そのタスクに取りかかる予定であることを示します。

     見出しは指定された日付の下に記載されます(1)。それに加えて、ス
     ケジューリングされた日付を超過した場合には_今日_のリストにエントリが
     DONEとなるまでリマインダが表示され続けます。すなわち、タスクは完了する
     まで自動的に後回しにされます。

          *** TODO トリリアンに大晦日のデートについて電話する。
              SCHEDULED: <2004-12-25 Sat>

     重要:Org-modeで項目をスケジューリングすることは、ミーティングをスケジュ
     ーリングすることと同様であるという理解は正しくありません。ミーティン
     グをセットするのは単なるアポイントですが、このような場合はエントリーに
     はプレーンなタイムスタンプを使用し、日付が来れば項目が表示されるように
     設定するべきです。これはユーザーがしばしば誤解する点です。Org-modeでは
     スケジューリングは何らかのアクションアイテムに取りかかる際に、日付を設
     定することを意味します。

スケジューリングやデッドラインの項目には、繰り返しを含むタイムスタンプを使用
することが可能です。Org-modeは、タイムスタンプが繰り返し日付の直近の日付を表
すものと推測して事前あるいは事後の警告を発します。しかし、スケジューリングや
デッドラインにおいては`<%%(diary-float t 42)>'のような日記のS式項目は限定的
にしか使用できません。Org-modeはこれらS式項目の内部構造について十分理解して
いないため、事前および事後の警告を発することはできません。ただし、S式項目と
一致したそれぞれの日付に項目を表示することは行われます。

* Menu:

* Inserting deadline/schedule::  計画項目
* Repeated tasks::           何度も現れる項目

   ---------- Footnotes ----------

   (1) 項目がDONEとマークされた場合
でも、指定日の項目に表示され続けます。この設定が好みでなければ、変数
`org-agenda-skip-scheduled-if-done'を指定して下さい


File: org-ja,  Node: Inserting deadline/schedule,  Next: Repeated tasks,  Prev: Deadlines and scheduling,  Up: Deadlines and scheduling

8.3.1 デッドラインおよびスケジュールの挿入
------------------------------------------------------------

以下のコマンドにより、項目にデッドラインまたはスケジュールを瞬時に挿入
(1)することができます。

`C-c C-d     (`org-deadline')'
     タイムスタンプと`DEADLINE'キーワードを挿入します
     。挿入は見出しの直下の行に対して行われます。前置引数を伴って呼ばれた場
     合は、エントリーから既に存在するデッドラインが消去されます。変数
     `org-log-redeadline'(2)に対応して、既に存在する
     デッドラインを変更する際にノートをとることができます。 

`C-c C-s     (`org-schedule')'
     タイムスタンプと`SCHEDULED'キーワードを挿入しま
     す。挿入は見出しの直下の行に対して行われます。CLOSEDのタイムスタンプは
     全て消去されます。前置引数を伴って呼ばれた場合は、エントリーからスケジ
     ューリングの日付が消去されます。変数`org-log-reschedule'(3)に対応して、既に存在するスケジューリングを変更する際
     にノートをとることができます。 

`C-c C-x C-k     (`org-mark-entry-for-agenda-action')'
     現在の項目をアジェンダのアクションのためにマークします。このように項目
     をマークした後で、アジェンダまたはカレンダーを開いて適切な日を探すこと
     ができます。選択した日付の上にカーソルを置いて`k s'あるいは`k d'を入力
     することにより、マークされた項目にスケジュールを設定できます。 

`C-c / d     (`org-check-deadlines')'
     全てのデッドラインのうち、既に過ぎているものと
     `org-deadline-warning-days'以内に期限となるものを抽出したツリーを作成
     します。前置引数`C-u'により、ファイル内の全てのデッドラインを表示しま
     す。前置引数で数値を指定すると、指定した分だけ先のデッドラインを表示し
     ます。例えば、`C-1 C-c / d'とすると明日期限となる全てのデッドラインを
     表示します。

`C-c / b     (`org-check-before-date')'
     指定された日より前のデッド ラインを抽出したツリーを作成します。

`C-c / a     (`org-check-after-date')'
     指定 された日より後のデッドラインを抽出したツリーを作成します。

   ---------- Footnotes ----------

   (1)
`SCHEDULED'あるいは`DEADLINE'の付いた日付が見出しのすぐ下の行に挿入されます
。見出しとこの行の間には文字を記入してはいけません。

   (2) 対応する`#+STARTUP'キーワード`logredeadline'、
`lognoteredeadline'、および`nologredeadline'

   (3) 対応する
`#+STARTUP'キーワード`logredeadline'、`lognoteredeadline'、および
`nologredeadline'


File: org-ja,  Node: Repeated tasks,  Prev: Inserting deadline/schedule,  Up: Deadlines and scheduling

8.3.2 Repeated tasks
--------------------

タスクの中には、何度も繰り返し行うものがあります。Org-modeでは、そのようなタ
スクの管理を助けるため、通常あるいはDEADLINE、SCHEDULEDのタイムスタンプに対
してリピーターと呼ばれる機能を提供しています。以下の例を参照して下さい。
     ** TODO 家賃の支払い
        DEADLINE: <2005-10-01 Sat +1m>
この中で`+1m'がリピーターと呼ばれるもので、そのタスクが<2005-10-01>のデッド
ラインを持つと同時に、その日から一週間ごとに繰り返すことを意味します。デッド
ラインエントリーに対してリピーターと警告期間の両方を指定する必要がある場合に
は、`DEADLINE: <2005-10-01 Sat +1m -3d>'のようにリピータを先に書き、警告期間
を後に書きます。

デッドラインおよびスケジューリングされた項目は期限を過ぎた場合にはアジェンダ
上にエントリーが作成されるため、項目が終了した場合にはそのようなエントリは実
施済みとマークできることが必要です。DEADLINEあるいはSCHEDULEDのTODOエントリ
ーをDONEとマークした時には、アジェンダ上でのエントリーは作成されなくなります
。一方で、問題となるのは繰り返し項目の_次の_日時も同時にアクティブでなくなっ
てしまうことです。Org-modeでは、このような状況に対して以下のように対処します
。繰り返しのエントリーをDONEに変更しようとした場合(`C-c C-t'などにより)、繰
り返しタイムスタンプの基準時刻が一つ分シフトされ、すぐにエントリーの状態が
TODOに戻されます(1)。上の例では、DONEの状態にする
ことにより日付が以下のように変更されます。

     ** TODO 家賃の支払い
        DEADLINE: <2005-11-01 Tue +1m>

   デッドラインの下にタイムスタンプが追加され(2)、これにより前の時刻の
デッドラインについて実際に行動したことが記録されます。

日付がシフトされた結果として、このエントリーはアジェンダ上の過去の日付からは
見えなくなりますが、将来の日付はアジェンダ上で確認することができます。

`+1m'の繰り返し指定により、日付は常に1ヶ月きっちりシフトされます。そのため、
例えば家賃を3ヶ月支払っていない場合には、一度このエントリーをDONEにしたとし
ても、相変わらず期限を過ぎたデッドラインと判断されます。タスクの性質によって
、この方法が常に適切な処理方法とは限りません。例えば、父親と連絡をとるのを3
週間忘れてしまった場合、それを埋め合わせるために一日に3回電話をすることはな
いでしょう。さらに、バッテリーの充電のように、最後に行ってから一定時間経過後
に常に繰り返す必要がある場合もあります。このようなタスクについてはOrg-modeは
専用の反復演算子`++'および`.+'を用意しています。例えば以下の通りです。

     ** TODO 父に電話
        DEADLINE: <2008-02-10 Sun ++1w>
        この項目をDONEとすると、日付が一週間シフトされ、同時にタスクが
        行われるまでは将来の全ての日曜日に対して項目がシフトされます。
        土曜日に電話をしたとしても、次の日曜日にシフトされます。
     ** TODO 火災報知器の電池をチェックする
        DEADLINE: <2005-11-01 Tue .+1m>
        この項目をDONEとすると、確認した日のちょうど1ヶ月後にシフトされます。

同じタスクに対して、スケジューリングとデッドラインの情報を両方付けることがで
きます。この場合には、両方の繰り返し間隔は同じになりますので、注意して下さい
。

繰り返し演算子を使わない代替的な方法の一つとして、タスクサブツリーのコピーを
いくつか作成し、それぞれのコピーに対してシフトされた時刻を指定する方法があり
ます。そのために`C-c C-x c'コマンドがあります。この機能は*note Structure
editing:: で解説されています。

   ---------- Footnotes ----------

   (1) 実際には、変更される状態は`REPEAT_TO_STATE'プロパティ或いは
変数`org-todo-repeat-to-state'によって決められます。これらが指定されていない
場合は、デフォルトとしてTODO状態に戻ります。

   (2) この部分の動作は、オプション
`org-log-repeat'、あるいは`#+STARTUP'オプションの`logrepeat'、
`lognoterepeat'、`nologrepeat'により変更することができます。`lognoterepeat'
を指定した場合には、メモを入力するように促されます。


File: org-ja,  Node: Clocking work time,  Next: Effort estimates,  Prev: Deadlines and scheduling,  Up: 日付や時間

8.4 Clocking work time
======================

Org-modeでは、プロジェクトの中で特定のタスクを実行するのにかかった時間を計測
することができます。ある項目について取りかかる時に、計測を開始します。そのタ
スクを中断するときやタスクが終了した時に計測が終了し、対応する時間間隔が記録
されます。同時に、あるプロジェクトの全てのサブツリーでかかった時間の合計が計
算されます。さらに、最近に時間が計測されたタスクが記憶されているため、その時
点で取りかかっている複数のタスク間を素早く移動することができます。

Emacsセッションでの経過時間の履歴を保存するためには、以下のコマンドを使いま
す。
     (setq org-clock-persist 'history)
     (org-clock-persistence-insinuate)
   Emacsの再開後に新しいタスクの計測を始めると、不完全な時計(1)が表示され
(*note Resolving idle
time::)、それについて何をするかを入力するように促されます。

* Menu:

* Clocking commands::        時計の開始と終了
* The clock table::          詳細な報告
* Resolving idle time::      空いた時間を解決する

   ---------- Footnotes ----------

   (1) Emacsの外でタスク
に取りかかっていたという想定で時計を再開する場合は、 `(setq
org-clock-persist t)'を使用して下さい。


File: org-ja,  Node: Clocking commands,  Next: The clock table,  Prev: Clocking work time,  Up: Clocking work time

8.4.1 Clocking commands
-----------------------

`C-c C-x C-i     (`org-clock-in')'
     現在の項目に対して、時間の計測を開始します（クロックイン）。これにより
     CLOCKキーワードとともにタイムスタンプが挿入されます。最初の計測でない
     場合には、複数のCLOCK行が表示され、`:LOGBOOK:'という引き出しに格納され
     ます(変数`org-clock-into-drawer'についても参照のこと)。前置引数`C-u'と
     共に呼ばれた場合は、最近時間が計測されたタスクのリストからタスクを選択
     します。2個の前置引数`C-u C-u'が入力された場合は、現在位置のタスクの計
     測を開始し、そのタスクをデフォルトに指定します。デフォルトのタスクは、
     時間計測の選択をする場合に常にリストの中に表示され、文字`d'が付けられ
     ます。
     時間を計測している間は、現在の計測時間とタスクの名前がモード行に表示さ
     れます。表示される計測時間はこのタスクとその子タスクについての全ての時
     間です。タスクが工数の見積もり(*note Effort
     estimates::)を含む場合には、モー
     ド行は見積もりに対する現在の経過時間を表示します(1)。タスクが繰り返しを含む
     場合には、そのタスクの最近のリセットからの経過時間(2)のみが計測されます。表示される時間について変更
     したい場合には、プロパティ`CLOCK_MODELINE_TOTAL'を変更します。この中に
     は現在計測中の時刻のみ表示する`current'、今日計測された全ての時間を表
     示する`today'(変数`org-extend-today-until'についても参照)、全ての時間
     を表示する`all'、デフォルトの設定である`auto'などがあります(3)。
     モード行を`mouse-1'でクリックすることにより、メニューと時間計測のオプシ
     ョンがポップアップします。

`C-c C-x C-o     (`org-clock-out')'
     時間の計測を終了します（クロックアウト）。これにより、時間計測が開始さ
     れたのと同じ場所にもう一つのタイムスタンプが挿入されます。同時に、計測
     された時間間隔が開始時刻と終了時刻の後に`=> HH:MM'の形式で挿入されます
     。クロックアウトのタイムスタンプ作成時にノートを追加するには、変数
     `org-log-note-clock-out'を参照して下さい(4)。 

`C-c C-x C-e     (`org-clock-modify-effort-estimate')'
     現在時間を計測しているタ
     スクについて、工数見積もりをアップデートします。 

`C-c C-c  or  C-c C-y     (`org-evaluate-time-range')'
     タイムスタンプの一つを変更し
     た後で、時間間隔を更新します。これはタイムスタンプを手動で変更した場合
     にのみ必要です。`S-<cursor>'キーにより変更した場合には、自動的に再計算
     されます。

`C-c C-t     (`org-todo')'
     TODOの項目をDONEに変更することにより、その
     項目で時間が計測されている場合には自動的に停止します。 

`C-c C-x C-x     (`org-clock-cancel')'
     現在の時間計測をキャンセルします。これは
     間違って時間を計り始めてしまった場合や、結果的に意図したタスク以外を行
     ってしまった場合に便利です。

`C-c C-x C-j     (`org-clock-goto')'
     現在クロックイ
     ン中のタスクの見出しにジャンプします。前置引数`C-u'により、最近時間が
     計測されたタスクから目的のタスクを選択します。 

`C-c C-x C-d     (`org-clock-display')'
     現在のバッファの各サブツリーからの時間のサマリーを作成します。これによ
     りそれぞれの見出しの後ろに時間が上書きされ、その見出しの中で下位の見出
     しも含めて記録された時間の合計が表示されます。表示の切り替えにより、ツ
     リーの各項目を確認できますが、バッファを変更した場合や`C-c C-c'を入力
     した場合は時間の上書きは消えてしまいます(変数
     `org-remove-highlights-with-change')を参照)。

   タイムライン(*note Timeline::)およびアジェンダ(*note Weekly/daily
agenda::)の中でキー
`l'を入力することにより、その日のうちに完了したタスクがどれかを表示すること
ができます。

   ---------- Footnotes ----------

   (1) 「その場で」工数の見 積もりを追加するには、その機能を持つ関数を変数
`org-clock-in-prepare-hook'にフックして下さい

   (2) プロパティ `LAST_REPEAT'により記録

   (3) 変数 `org-clock-modeline-total'についても参照

   (4) これに対応するバッファ内の設 定は`#+STARTUP: lognoteclock-out'です。


File: org-ja,  Node: The clock table,  Next: Resolving idle time,  Prev: Clocking commands,  Up: Clocking work time

8.4.2 The clock table
---------------------

Org-modeは、時間計測の情報をもとにかなり詳細なレポートを作成することができま
す。このようなレポートは_クロックテーブル_と呼ばれており、その名の通り
Org-modeのテーブルまたはその組み合わせにより作成されます。

`C-c C-x C-r     (`org-clock-report')'
     現在のファイルにOrg-modeテーブル形式の計
     測時間レポートを含む動的ブロック(*note Dynamic
     blocks::)を挿入します。前置引
     数とともに呼ばれた場合は、現在の文書の最初のクロックテーブルに移動し、
     それを更新します。

`C-c C-c  or  C-c C-x C-u     (`org-dblock-update')'
     現在位置の動
     的ブロックを更新します。カーソル位置は動的ブロックの`#+BEGIN'行の中に
     位置している必要があります。

`C-u C-c C-x C-u'
     全ての動的ブロックを更新 します(*note Dynamic
     blocks::)。この機能はバッファ内で複数のクロックテーブル
     が存在する場合に有用です。 

`S-<left>'
`S-<right>     (`org-clocktable-try-shift')'
     現在の`:block'の時間間隔
     を変更し、テーブルを更新します。このコマンドを使用するには、カーソルが
     `#+BEGIN: clocktable'行にある必要があります。例えば`:block'が`today'の
     場合、このコマンドにより`today-1'にシフトされます。

   以下に、`C-c C-x
C-r'コマンドによりバッファに挿入されるクロックテーブルのフ
レームの例を示します。

     #+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
     #+END: clocktable
   `BEGIN'行には、レポートの対象範囲、構造およびフォーマットを定めるオプション
を指定します。これらのデフォルト値は変数`org-clocktable-defaults'により変更
することができます。

First there are options that determine which clock entries are to be
selected:
     :maxlevel    テーブルに表示される最大の深さレベル。
                  これより深いレベルの時間は上位レベルに積算されて表示される。
     :scope       対象とするスコープ。以下のうちいずれかを指定する。
                  nil        現在のバッファ、或いはナローされた領域
                  file       現在のバッファ全体
                  subtree    クロックテーブルのあるサブツリー内
                  treeN      周囲のレベルNのツリー、例えば`tree3'
                  tree       周囲のレベル1のツリー
                  agenda     アジェンダファイル群の全体
                  ("file"..) 指定されたファイルをスキャンする
                  file-with-archives    現在のファイルとそのアーカイブ
                  agenda-with-archives  アーカイブを含む全てのアジェンダファイル
     :block       対象とする時間範囲、この範囲は絶対時間または現在からの相対時間
                  で表記され、以下のいずれかのフォーマットに従う。
                  2007-12-31    2007年の大晦日
                  2007-12       2007年12月
                  2007-W50      2007年のISO週で50週目
                  2007-Q2       2007年の第二四半期
                  2007          2007年
                  today, yesterday, today-N          相対的な日指定
                  thisweek, lastweek, thisweek-N     相対的な週指定
                  thismonth, lastmonth, thismonth-N  相対的な月指定
                  thisyear, lastyear, thisyear-N     相対的な年指定
                  `S-<left>/<right>'キーにより間隔をシフトすることができる。
     :tstart      対象となる時間の始まりを示す文字列
     :tend        対象となる時間の終わりを示す文字列
     :step        テーブルをまとめる間隔。`week'または`day'を指定。
                  この機能を使うには、`:block'、`:tstart'、`:tend'のいずれかを指定
     する必要がある。
     :stepskip0   時間間隔がゼロの項目を表示しない。
     :fileskip0   時間間隔がゼロのファイルについて、テーブルに表示しない。
     :tags        特定のタグがついたエントリのみ収集の対象とする。

さらに、テーブルのフォーマットを指定するためのオプションがあります。これらの
オプションは関数`org-clocktable-write-default'により解釈されますが、パラメー
タ`:formatter'により解釈のためのユーザ独自の関数を指定することができます。
     :emphasize   値が`t'の場合、レベル1およびレベル2の項目を強調表示します。
     :lang        項目名のセル(例えば"Task")で用いる言語(1)。
     :link        テーブルの見出しの項目と元のファイルでの位置をリンクする。
     :narrow      Org-modeのテーブルの見出し列の幅を上限を決める整数。
                  `50!'のように指定すると、エクスポート時にも見出しが短縮表示され
     る。
     :indent      各見出しフィールドをそのレベルに合わせてインデントする。
     :tcolumns    時間を表示するために使われる列の数。この値が`:maxlevel'より小さ
     い場合、
                  それより下位のレベルは一つの列に合わせて表示される。
     :level       レベル番号を示す列を含めるかどうか指定する。
     :compact     コンパクトに表示する。
     `:level nil :indent t :narrow 40! :tcolumns 1'
                  の短縮表現で、明示的に`:narrow'で指定されなければ、全ての変数は
     上書きされる。
     :timestamp   エントリのタイムスタンプが存在する場合には、それを表示する。
     SCHEDULED、
                  DEADLINE、TIMESTAMP、TIMESTAMP_IAの順に探索される。
     :formula     追加的な`#+TBLFM'の内容。通常の形式に追加されて評価される。
                  特殊なケースとして、`:formula %'を追加すると経過時間の割合行が追
     加される。
                  ここで形式をしていしない場合は、クロックテーブルの下に存在する形
     式が
                  アップデートされずに評価される。
     :formatter   時刻データをフォーマットし、バッファに表示するための関数。
現在のレベル1のツリーについて、当日分の時間サマリーを得る場合は以下のように
指定します。
     #+BEGIN: clocktable :maxlevel 2 :block today :scope tree1 :link t
     #+END: clocktable
   明示的に時間間隔を指定する場合には、以下のように記述します(2)。
     #+BEGIN: clocktable :tstart "<2006-08-10 Thu 10:00>"
                         :tend "<2006-08-10 Thu 12:00>"
     #+END: clocktable
現在のサブツリーでの経過時間のまとめを%表示するには、以下のように記述します
。
     #+BEGIN: clocktable :scope subtree :link t :formula %
     #+END: clocktable
ここ1週間で計測された時間をコンパクトな幅で表示するには、以下のようにします
。
     #+BEGIN: clocktable :scope agenda :block lastweek :compact t
     #+END: clocktable

   ---------- Footnotes ----------

   (1) 言語に関する項目は、変数
`org-clock-clocktable-language-setup'により設定することができます。

   (2) 全てのパラメータ
は単一行で指定する必要があるので注意して下さい。この例ではマニュアルの文字幅
の制約のために改行が入っています。


File: org-ja,  Node: Resolving idle time,  Prev: The clock table,  Up: Clocking work time

8.4.3 Resolving idle time
-------------------------

ある項目について作業を開始したあとで、例えば電話を取る場合などで一時的にコン
ピュータの前を離れると、その時間について現在の経過時間から差し引いたり、他の
項目に加えたりして「解決」する必要が生じます。

変数`org-clock-idle-time'を適当な整数値(例えば10や15)に設定することにより、
設定時間を超える休止のあとで戻ってきた場合にEmacsはアラートを出し、その休止
時間をどのように処理するか尋ねます(1)。休止か
ら戻った時点で幾つか質問が表示され、実際にどの程度休止時間があったか（その時
点までの計測時間が随時表示されます）を入力すると同時に、休止の扱いについて以
下のような選択が可能です。

`k'
     休止時間として計測された時間の一部または全てをタスクの計測時間として保
     持する場合には、`k'を押します。Org-modeは何分間保持するか尋ねます。
     <RET>キーを押すことにより全ての時間が保持され、タスクの計測時間は変更
     されません。数値を指定すると、指定した分数だけ時間が保持されます。

`K'
     シフトキーと共に`K'を押した場合、入力された分数だけ時間を保持すると同
     時にただちに現在のタスクの計測を中止します。全ての休止時間を保持する場
     合、これは単にタスクの計測を中止したのと同じことになります。

`s'
     休止時間を保持しない場合には、`s'を押すことにより計測時間から全ての休
     止時間が差し引かれ、戻ってきた時点から再開されます。

`S'
     休止時間を保持せず、休止開始時の時刻で時間の計測を止める場合には、シフ
     トキーと共に`S'を押して下さい。シフトキーを使うと、いずれのオプション
     でも時間の計測が中止されるということを覚えておいて下さい。

`C'
     時間計測そのものをキャンセルする場合は、`C'を押して下さい。キャンセル
     しない場合でも、時間が引かれた結果の残り時間が1分未満である場合には、
     中身の無いエントリでログが見づらくなるのを防ぐため、時間計測はやはりキ
     ャンセルされますので注意して下さい。

空き時間について、現在の計測時間から差し引いたあとで別の計測項目に追加したい
場合にはどうすれば良いでしょうか。その場合は、差し引いたあとに単純に次のタス
クの計測を開始して下さい。Org-modeは差し引かれた時間があることを記憶していて
、次の時間計測を始める際にその時間を足し込むかを尋ねます。

次のようなケースでも、時間解決機能が魔法のような働きをします。あなたがタスク
の時間計測をしながらご機嫌に作業をすすめていると、突然飼い猫がネズミを追いか
けて、それを見たハムスターが驚いてUPSの電源装置に衝突してしまったとしましょ
う!あなたは全てのバッファを失うことになりますが、オートセーブ機能のおかげで
Org-modeで行った最近の変更は保持され、途中であった時間計測の時間も保持されて
います。

Emacsを再開してタスクの計測を開始すると、Org-modeは最後のセッションで計測が
終了されていない半端の時間計測があることに気がつきます。そのようなタスクにつ
いては、計測の開始時刻を不明な時刻の始点として、その間の時間をどのように解決
するかについて尋ねます。その際の考え方や挙動は空き時間の処理方法と全く同じで
、単に空き時間ではなくリカバリの際に発生しているだけなのです。

Org-modeのアジェンダが半端時間を絶えずチェックしているファイルのリストは、
`M-x org-resolve-clocks'により確認することができます。

   ---------- Footnotes ----------

   (1) Mac OS Xのコンピュータでは、Emacsの休止時
間だけでなくユーザーが実際に休止した時間を計測します。X11では、Org-modeのgit
ディストリビューションから入手できるユーティリティプログラム`x11idle.c'をイ
ンストールすることにより、同様に全体の休止時間を計測することができます。その
他のシステムでは、休止時間はEmacsが休止していた時間のみを表します。


File: org-ja,  Node: Effort estimates,  Next: Relative timer,  Prev: Clocking work time,  Up: 日付や時間

8.5 Effort estimates
====================

詳細な作業計画を立てて仕事を行いたい場合や、仕事の工数の見積もりを作成する必
要がある場合には、エントリに工数見積もりを割り当てたいと思うかもしれません。
また、同時に時間の計測を行う場合には、あとで見積もった時間数と実際にかかった
時間を比較したいと思うかもしれません。それは見積もりの精度を上げる良い方法で
もあります。工数の見積もりは専用のプロパティである`Effort'に保存されます (1)
。エントリに工数を追加するには、以下のようなコマンドを用います。

`C-c C-x e     (`org-set-effort')'
     現在のエントリについて工数の見積もりを行いま
     す。前置引数に数値を指定することにより、N番目の数値に指定します(下記の
     例を参照)。このコマンドはアジェンダからも`e'キーを押すことによりアクセ
     スできます。

`C-c C-x C-e     (`org-clock-modify-effort-estimate')'
     現在時間が計 測されている項目の工数見積もりを変更します。

   明らかなように、工数見積もりを行う最善の方法はカラムビュー(*note Column
view::)を
用いることです。個別の項目についての工数見積もりから始めて、`COLUMNS'フォー
マットによりこれらの値と実際の計測時間(時間の計測を行いたい場合)を同時に表示
します。例えば、あるバッファについて以下のように指定できます。

     #+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00
     #+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM

さらに良い方法としては、変数`org-global-properties'あるいは
`org-columns-default-format'をカスタマイズすることにより、これらの数値をグロ
ーバルに指定できます。特にこの指定をアジェンダで使用したい場合には、グローバ
ルな指定を行うことが推奨されます。

   個別の項目について見積もりを割り当てるには、カラムモードに移行し、
`S-<right>'および`S-<left>'を使うことにより値を変更します。入力された数値は
すぐに階層構造で足し合わされます。その隣の列には計測された時間が表示されるこ
とになります。

日別あるいは週別のアジェンダでカラムビューに移行すると、工数の列は各日につい
ての工数見積もりを足し合わせて表示され(2)、これを用いてスケジュールの
空きを見つけることができます。その日の作業について全体像をつかみたい場合には
、オプション`org-agenda-columns-add-appointments-to-effort-sum'を指定するこ
とができます。時間間隔が指定されているアポイントで、その日に発生するものにつ
いても負荷見積もりに加算して表示されます。

工数見積もりは、アジェンダ内で`/'を押すことによりアジェンダの2次的なフィルタ
リングに用いることができます(*note Agenda
commands::)。このような見積もりを確実に
行えば、2、3回キーを押すことにより空いている時間間隔に合うように項目を絞り込
むことができます。

   ---------- Footnotes ----------

   (1)
使用されるプロパティは、変数`org-effort-property'で変更することができます

   (2) 単準なリストを階層的に足し合わせる際 には落とし穴があります(*note
Agenda column view::)。


File: org-ja,  Node: Relative timer,  Next: カウントダウンタイマ,  Prev: Effort estimates,  Up: 日付や時間

8.6 相対時間タイマーを使ったノート作成
=======================================================

例えば会議やビデオ閲覧時にノートをとる際など、開始時からの経過時間がわかると
便利な場合があります。Org-modeはそのような場合に使える相対時間タイマー機能を
持っており、時間を含むノートを簡単に作ることができます。

`C-c C-x .     (`org-timer')'
     バッファに相対時間タイマーを挿入します。最初に使
     う際にはタイマーが開始されます。前置引数と共に呼ばれた場合には、タイマ
     ーがリスタートされます。

`C-c C-x -     (`org-timer-item')'
     現在の相対時刻での記
     述項目を挿入します。前置引数と共に呼ばれた場合は、タイマーの時刻が0に
     リセットされます。

`M-<RET>     (`org-insert-heading')'
     タイマーリストが既に開始
     されている場合は`M-<RET>'で新しいタイマー項目を追加することもできます
     。 

`C-c C-x ,'
     タイマーを一時停止します。一時停止されている場合には再開します
     (`org-timer-pause-or-continue')。 

`C-u C-c C-x ,'
     タイマーを停止します。これを実行した後には古いタイマーを再開することは
     できず、新しいタイマーの作成のみが可能です。このコマンドによりモード行
     からもタイマーが削除されます。

`C-c C-x 0     (`org-timer-start')'
     バッファに何
     も挿入せずにタイマーをリセットします。デフォルトではタイマーは0にリセ
     ットされますが、前置引数`C-u'と共に呼ばれた場合は、指定された時間から
     タイマーが始められます。ユーザーは開始時間を入力するよう促されます。同
     じ位置に既にタイマー文字列がある場合には、その時間がデフォルトとして指
     定されます。そのため、このコマンドは休憩時間のあとなどでノート取りを再
     開する場合などに用いることができます。2つの前置引数`C-u C-u'と共に呼ば
     れた場合は、アクティブなリージョンにある全てのタイマー文字列を一定の時
     間だけ変化させます。これはタイマーを正しい時刻に開始できなかった場合、
     タイマー文字列を一度に修正する場合に使用できます。


File: org-ja,  Node: カウントダウンタイマ,  Prev: Relative timer,  Up: 日付や時間

8.7 カウントダウンタイマ
==================================

Org-modeバッファから`org-timer-set-timer'を呼ぶことにより、カウントダウンタ
イマーが利用できます。アジェンダバッファの場合は<;>、その他は<C-c C-x ;>によ
り実行できます。

`org-timer-set-timer'により、ユーザーに時間間隔を入力するように促し、モード
行にカウントダウンタイマーを表示します。`org-timer-default-timer'によりデフ
ォルトのカウントダウン値を設定します。前置引数で数値を指定することで、デフォ
ルトの値が上書きされます。


File: org-ja,  Node: Capture - Refile - Archive,  Next: Agenda Views,  Prev: 日付や時間,  Up: Top

9 Capture - Refile - Archive
****************************

管理システムにおける重要な点の一つとして、新しいアイディアやタスクを素早くキ
ャプチャし、それらを参考資料と連携する能力があることです。Org-modeではキャプ
チャと呼ばれるプロセスを用いて行います。また、タスクに関係するファイル
(attachments)を特別なディレクトリに保存することがも可能です。一度システムへ
取り込むと、タスクとプロジェクトを移動させる必要があります。完了したプロジェ
クトツリーをアーカイブファイルへ移動することで、システムをコンパクトで速く保
つことが可能です。

* Menu:

* Capture::                  新しいものをキャプチャする
* Attachments::              タスクにファイルを追加する
* RSS Feeds::                RSSフィードから取り込む
* Protocols::                外部（e.g.
                               ブラウザ）からEmacsとOrg-modeにアクセスする
* Refiling notes::           別な場所にツリーを移動する
* Archiving::                完了したプロジェクトの扱い方


File: org-ja,  Node: Capture,  Next: Attachments,  Prev: Capture - Refile - Archive,  Up: Capture - Refile - Archive

9.1 Capture
===========

Org-modeでは、新しいアイテムをキャプチャする方法はJohn
Wiegleyによる素晴らしいrememberパッケージから多くのアイディアを得ています。
バージョン6.36のOrg-modeまでは`remember.el'用の特別な設定を使っていました。
`org-remember.el'は従来の設定との逆互換性のため、まだOrg-modeの一部です。
org-rememberに関するドキュメントは`http://orgmode.org/org-remember.pdf'にあ
ります。

ここで述べる新しいキャプチャのための設定が好ましく、新しいユーザーはこれを使
用するべきです。あなたの`org-remember-templates'を変換する場合は以下のコマン
ドを実行します。
     M-x org-capture-import-remember-templates <RET>
   そして新しい変数を`M-x customize-variable
org-capture-templates'でカスタマイ
ズし、結果を確認してから保存してください。これにより、新しい仕組みになれるま
ではリメンバーとキャプチャの両方を使うことができます。

キャプチャはワークフローにおいて小さい割り込みで素早くノートを保存することが
できます。キャプチャの基本的なプロセスはリメンバーととても良く似ていますが、
Org-modeはそれをテンプレートなどで強化しました。

* Menu:

* Setting up capture::       キャプチャされたノートが保存される場所
* Using capture::            キャプチャの実行と中止コマンド
* Capture templates::        異なるタイプのテンプレートを定義する


File: org-ja,  Node: Setting up capture,  Next: Using capture,  Prev: Capture,  Up: Capture

9.1.1 Setting up capture
------------------------

以下のカスタマイズはノートを取るデフォルトのファイルと新しい素材をキャプチャ
するためのグローバルなキー(1)

     (setq org-default-notes-file (concat org-directory "/notes.org"))
     (define-key global-map "\C-cc" 'org-capture)

   ---------- Footnotes ----------

   (1) 自分のキーを選択して下さい。`C-c c'はただの提案で す。


File: org-ja,  Node: Using capture,  Next: Capture templates,  Prev: Setting up capture,  Up: Capture

9.1.2 Using capture
-------------------

`C-c c     (`org-capture')'
     `org-caputre'コマンドを呼びます。このキーバインドは
     グローバルで、デフォルトではアクティブになっておらず、インストールする
     必要があることに注意が必要です。もしテンプレートがあるならば defined
     *note Capture templates::, これらのテンプレートの選択か、デフォルト
     のテンプレートを使用した新しい Org アウトラインノードが使用されます。

`C-c C-c     (`org-capture-finalize')'
     キャプチャバッファに情報を入力し終わった ら、`C-c
     C-c'はキャプチャプロセスの前に設定されたウィンドウへ戻します
     。これによってこれ以上気を散らさずに作業を再開することができます。前置
     引数と一緒に呼ばれた場合は、仕上げをしたあとキャプチャした項目へ移動します。

`C-c C-w     (`org-capture-refile')'
     ノートを別の場所に差し替える (*note Refiling
     notes::)ことでキャプチャプロセスを仕上げます。これは通常の差
     し替えコマンドが実行されることを認識してください。したがってこのコマン
     ドを実行するときのカーソル位置が重要です。もし親や小を持つツリーを挿入
     する場合、まずカーソルを親へ移動してください。このコマンドに渡された接
     頭辞引数はすべて`org-refile'コマンドに渡されます。

`C-c C-k     (`org-capture-kill')'
     キャプチャプロセスをアボートして前の状態へ戻 ります。


   `org-capture'をアジェンダから`k
c'キーの組合せを用いた特別な方法で呼ぶことも
できます。この方法では、選択されたキャプチャテンプレートに挿入されるタイムス
タンプは、現在の日付ではなくアジェンダ内のカーソルがある位置の日付がデフォル
トになります。

最後にキャプチャが保存された場所を探すには、`org-capture'をプレフィックスコ
マンドと一緒に使用します。

`C-u C-c c'
     キャプチャテンプレートが対象としている場所に移動します。テンプレートの
     選択は通常と同じように行います。

`C-u C-u C-c c'
     バッファ内で最後に保存したキャプチャアイテムの場所に移動します。


File: org-ja,  Node: Capture templates,  Prev: Using capture,  Up: Capture

9.1.3 Capture templates
-----------------------

テンプレートは異なる種類のキャプチャアイテムや、異なる場所へ使用することがで
きます。最も簡単にそのようなテンプレートを作る方法、カスタマイズインターフェ
ースを通じて行うことです。

`C-c c C'
     `org-capture-templates'変数のカスタマイズを行います。

テンプレート定義の正式な説明の前に、例を挙げます。一般的なTODOエントリーを作
成する場合を考えます。また、これらのエントリーは`~/org/gtd.org'の中にある見
出し`Tasks'の下に作成され、`journal.org'内のデートツリーはジャーナルエントリ
ーがキャプチャされます。このような場合の設定は以下のようになります。

     (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
             "* TODO %?
       %i
       %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
             "* %?
     Entered on %U
       %i
       %a")))

ここで`C-c c t'を押すと、Org-modeはこのようなテンプレートを用意します。
     * TODO
       [[file:LINT TO WHERE YOU INITIATED CAPTURE]]

テンプレートが展開される際、`%a'はキャプチャコマンドを呼んだ場所へのリンクに
変換されます。これは例えばメールからタスクを登録する時にとても役立ちます。タ
スクの定義を埋め、`C-c C-c'を押すとOrg-modeはキャプチャ動作を始めた場所へま
た連れ戻してくれます。

特定のテンプレートを対話的な選択なしに用いてキャプチャする特別なキーを定義す
るには、以下のようにキーバインドを作成できます。

     (define-key global-map "\C-cx\n"
       (lambda () (interactive) (org-capture nil "x")))

* Menu:

* Template elements::        完全なテンプレート入力のために必要なこと
* テンプレートの拡張::  時刻と条件についての情報を書き込む


File: org-ja,  Node: Template elements,  Next: テンプレートの拡張,  Prev: Capture templates,  Up: Capture templates

9.1.3.1 Template elements
.........................

それではテンプレートを定義するための要素について述べてます。
`org-capture-templates'中にあるそれぞれのエントリーは以下の項目から構成され
るリストです。

`keys'
     キーは文字列で示されるテンプレートを文字だけで選択します。例えば、
     `"a"'はaキーだけで選択するテンプレートであり、`"bt"'は２つのキーで選択
     します。幾つかのキーを使う場合、同じ接頭辞キーを持つキーはリストの中で
     連続している必要があり、以下に例をあげるような、接頭辞キーを表す２つの
     要素を持つエントリーをその前に置きます。
                   ("b" "買い物リストのためのテンプレート")
     もし`C'キーにテンプレートを定義していなければ、このキーでこの複雑な変
     数のカスタマイズバッファを開きます。

`description'
     選択時に表示されるテンプレートの短い説明文。

`type'
     エントリーの種類をシンボルで表します。正しい値は以下の通りです。
    `entry'
          見出しのついたOrg-modeのノード。対象エントリーの子かトップレベルのエン
          トリーとして書き込まれます。対象のファイルはOrg-modeのファイルでなけれ
          ばならなりません。

    `item'
          対象の場所の最初にある単純なリストへ書き込まれる単純なリストの項目。対
          象のファイルはOrg-modeのファイルでなければならなりません。

    `checkitem'
          チェックボックス項目。これは単純なリストとデフォルトのテンプレートが異
          なるだけです。

    `table-line'
          対象の場所にある最初のテーブルへ追加する新しい行。行が追加される場所は
          `:prepend'と`:table-line-pos'プロパティに依存します。(下記参照)

    `plain'
          そのまま挿入される文章

`target'
     キャプチャされた項目が挿入されるべき場所の指定。Org-modeファイルでは、通常タ
     ーゲットはノードで定義されます。エントリーはこのノードの子になります。他のタ
     イプはこのノードの本文にあるテーブルやリストに追加されます。多くのターゲット
     の指定にはファイル名が含まれます。もしファイル名が空の文字列だった場合、
     `org-default-notes-file'がデフォルトになります。ファイルは変数や関数、Emacs
     Lispのフォームでも与えられます。

     正しい値は以下の通りです。
    `(file "path/to/file")'
          文章はこのファイルの先頭か最後に挿入されます。

    `(id "現存するorgエントリーのid")'
          このエントリーの子として、もしくはこのエントリの本文として記入します。

    `(file+headline "path/to/file" "node headline")'
          対象の見出しがファイル中で一つしか内場合の早い設定。

    `(file+olp "path/to/file" "Leval 1 heading" "Leval 2" ...)'
          唯一でない見出しの場合、フルパスの方が安全です。

    `(file+regexp  "path/to/file" "regexp to find location")'
          カーソルの位置に正規表現を使った場合。

    `(file+datatree "path/to/file")'
          今日の日付で日付ツリーの見出しを作ります。

    `(file+datetree+prompt "path/to/file")'
          promptで与えられた日付で日付ツリーの見出しを作ります。

    `(file+function "path/to/file" function-finding-location)'
          ファイルの中で正しい場所を見つける関数

    `(clock)'
          ファイル中で現在時間を測っているエントリー。

    `(function function-finding-location)'
          一般的な方法、ファイルと場所を見つける自分の関数を書く方法。

`template'
     キャプチャする項目を作るテンプレート。もし空にした場合、デフォルトのテンプレ
     ートを使用します。もしエスケープコードを付加した文字列の場合、キャプチャされ
     た時の時間と状況に依存して置換されます。エスケープされた文字列はテンプレート
     ファイルからロードされ、特別な構文`(file
     "path/to/template")'を使用します。 詳細をいかに示します。

`properties'
     エントリーの残りは追加オプションのプロパティリストです。理解できるプロパティ
     は
    `:prepend'
          通常新しくキャプチャされた情報は対象の場所(最後の子、最後のテーブル、
          最後のリスト項目...)に追加されます。このプロパティを設定することで変更
          します。

    `:immediate-finish'
          セットされると情報の編集を行わなず、追加だけを直ちに行います。テンプレ
          ートが自動的に追加できる情報だけを必要とする場合だけ意味を成します。

    `:empty-lines'
          新しい項目の前後に挿入する行の数をこれに設定します。デフォルトは０で、
          通常の他の値は１です。

    `:clock-in'
          この項目の時計を開始します。

    `:clock-keep'
          キャプチャしたエントリーを追加しても時計を動かし続けます。

    `:clock-resume'
          もし時計を割り込むキャプチャを始めた場合、キャプチャ終了時に時計を再開
          します。`:clock-keep'は`:clock-resume'より優先されることに注意が必要で
          す。もしどちらの設定も`t'に設定された場合、現在の時計が動き、一つ前の
          時計は再開されません。

    `:unnarrowed'
          対象とするバッファの幅を狭めず、単純にフルバッファで表示します。デフォ
          ルトでは幅を狭くし、新しい内容だけが表示されます。

    `:kill-buffer'
          対象のファイルがキャプチャ時にまだ読み込まれていなかった場合、キャプチ
          ャ終了時に再びバッファを閉じます。


File: org-ja,  Node: テンプレートの拡張,  Prev: Template elements,  Up: Capture templates

9.1.3.2 テンプレートの拡張
...................................

テンプレート自身の中では、特別な`%'-エスケープ(1)によって動的に内容を
挿入できます。

     %^{PROMPT} ユーザーに文字列を入力させこの順序と置換します。
                 デフォルトの値と補完テーブルは以下のように指定します。
                 %^{prompt|デフォルト値|補完2|補完3...}
                 矢印キーで入力の履歴をたどることができます。
     %a          注釈、通常は`org-store-link'で作成されたリンク
     %A          `%a'と同様、しかし説明部分への入力を行います。
     %i          初期の内容、キャプチャが呼ばれた時にアクティブに
                 なっているリージョン全体。
                 全体のテキストは`%i'自身と同じ様にインデントされます。
     %t          タイムスタンプ、日付のみ
     %T          時間と日付からなるタイムスタンプ
     %u, %U      上記と同じだが、不活性なタイムスタンプ
     %^t         `%t'と同じだが、日付の入力を行います。`%^T'、`%^u'、`%^U'と似てま
     す。
                 プロンプトを`%^{Birthday}t'の様に定義できます。
     %n          ユーザーネーム(`user-full-name'から取ってきます)
     %c          現在のキルリングの先頭
     %x          Xクリップボードの内容
     %^C         キルかクリップどちらを使うか対話的に選択します。
     %^L         `%^C'と同様だが、リンクとして挿入します。
     %k          現在計時しているタスクのタイトル。
     %K          現在計時しているタスクへのリンク。
     %f          org-captureが呼ばれた時に現在のバッファーで表示していたファイル。

     %F          `%f'と同様だが、フルパスを含んでいます。
     %^g         タグの入力を対象ファイル中のタグから補完して入力します。
     %^G         タグの入力をアジェンダファイルすべてから補完して入力します。
     %^{PROP}p   ユーザーにPROPプロパティの値の入力を行わせます。
     %:keyword   あるリンクのタイプを指示する特定の情報
     %[FILE]     FILEで与えられるファイルへ内容を挿入します。
     %(SEXP)     SEXPで与えられるElispを評価してその結果と入れ替えます。

リンクのタイプを指定するため、以下のキーワードが定義(2)されています。

     リンクタイプ       |  使用可能なキーワード
     -------------------+----------------------------------------------
     bbdb                    |  %:name %:company
     irc                     |  %:server %:port %:nick
     vm, wl, mh, mew, rmail  |  %:type %:subject %:message-id
                             |  %:from %:fromname %:fromaddress
                             |  %:to   %:toname   %:toaddress
                             |  %:date (ヘッダーメッセージ中にあるメッセージの日付
     )
                             |  %:date-timestamp (アクティブなタイムスタンプとして
     の日付)
                             |  %:date-timestamp-inactive (アクティブでないタイム
     スタンプとしての日付)
                             |  %:fromto (\"to NAME\"か\"from NAME\"のどちらか
     )(3)
     gnus                    |  %:group, メッセージとそれに加えてすべてのemailフィ
     ールドのため。
     w3, w3m                 |  %:url
     info                    |  %:file %:node
     calendar                |  %:date

テンプレート展開後のカーソル位置のために以下を用います。

     %?          テンプレートを完了したあと、カーソル位置をここに移動します。

   ---------- Footnotes ----------

   (1) もしこれらの文字通りの並びが
必要な場合は、`%'をバックスラッシュでエスケープすること

   (2) もしあなたが自分のリン クタイプを定義しているならば(*note Adding
hyperlink types::)、
`org-store-link-props'に保存されているいずれのプロパティもキャプチャテンプレ
ート中に同じ方法でアクセス可能です。

   (3)
これはユーザーではなく常に他人になる。`org-from-is-user-regexp'を参照する
こと。


File: org-ja,  Node: Attachments,  Next: RSS Feeds,  Prev: Capture,  Up: Capture - Refile - Archive

9.2 Attachments
===============

参照すべきものをアウトラインノートやタスクと連携させることは大抵役立ちます。
小さなプレーンテキストの塊は単純にプロジェクトのサブツリーとして保存可能です
。ハイパーリンク(*note
Hyperlinks::)はあなたのコンピュータやクラウドなどにあるファ
イル、例えばプロジェクトに関連するemailやソースコードファイルとの連携を確立
します。その他の方法として、attachmentsがあります。これはアウトラインノード
の属するディレクトリにあるファイルです。これらのディレクトリは`data'ディレク
トリの中に位置し、あなたのOrgファイルが保存されているディレクトリと同じディ
レクトリの中にある(1)。 もしこのディレクトリを`git
init'で初期化した場合、Org-modeは変更点を見つけた
時に自動的にそれらをコミットします。添付システムはJohn
Wiegleyの貢献によってOrg-modeへ追加されました。

もしそれがより良い方法に思える場合は、エントリーへディレクトリを添付すること
も自身の選択で可能です。子エントリーは親から添付ディレクトリを受け継ぐため、
サブツリー全体が同じ添付ディレクトリを使うことになります。

以下のコマンドはプロパティを操作する助けとなります。

`C-c C-a     (`org-attach')'
     添付システムに関連するコマンドのコマンド選択画面。これらのキーのあとに
     、コマンドのリストが表示され、コマンドを選択するために更にキーを押す必
     要があります。

    `a     (`org-attach-attach')'
          ファイルを選択してそれをタスクの添付ディレクトリへ移動します。ファイル
          は`org-attach-method'によって複製、移動、リンクされます。ハードリンク
          はすべてのシステムでサポートされていないことに注意が必要です。

    `c/m/l'
          コピー/移動/リンクメソッドを使ってファイルを添付します。ハードリンクは
          すべてのシステムでサポートされていないことに注意が必要です。

    `n     (`org-attach-new')'
          Emacsのバッファとして新しい添付を作成しま す。

    `z     (`org-attach-sync')'
          あなた自身で添付を追加した場合に、現在のタスクをその添付ディレクトリと
          同期します。

    `o     (`org-attach-open')'
          現在のタスクに関する添付を開きます。もし１つ以上ある場合は、まずファイ
          ル名を入力させます。開き方は`org-file-apps'に従います。詳細は、ハイパ
          ーリンクを辿るための情報(*note Handling
          links::)を参照してください。

    `O     (`org-attach-open-in-emacs')'
          これも添付を開きますが、強制的にファイルをEmacsを用います。

    `f     (`org-attach-reveal')'
          現在のタスクの添付ディレクトリを開きま す。

    `F     (`org-attach-reveal-in-emacs')'
          これもディレクトリを開きますが、強制的にEmacs内で`dired'を用います。

    `d     (`org-attach-delete-one')'
          添付の１つを選択し削除します。

    `D     (`org-attach-delete-all')'
          タスクに関連する添付をすべて削除します。安全な方法は`dired'を用いてデ
          ィレクトリを開き、そこから削除する方法です。

    `s     (`org-attach-set-directory')'
          特定のディレクトリをエントリーの添付ディレクトリーに指定します。これは
          ディレクトリーのパスを`ATTAH_DIR'プロパティに代入することで動作します。

    `i     (`org-attach-set-inherit')'
          `ATTACH_DIR_INHERIT'プロパティをセットします。これによって子も親と同じ
          ディレクトリを添付として使用します。

   ---------- Footnotes ----------

   (1) もしエントリーやOrgファイルを他のディレクトリに移動した場
合、`org-attach-directory'が絶対パスを含むように設定する必要があります。


File: org-ja,  Node: RSS Feeds,  Next: Protocols,  Prev: Attachments,  Up: Capture - Refile - Archive

9.3 RSSフィード
===================

Org-modeはエントリーの追加や変更をRSSフィードとAtomフィードの情報を元に行う
ことができます。この機能を使ってプロダクトフィードのなかからそれぞれの新しい
プロダクトに対してタスクを作ることも可能です。もしくは、携帯電話を対象とした
Web上のノート作成サービスをOrg-modeのタスクにインポートできます。フィードに
アクセスするには、`org-feed-alist'を設定します。この変数のドキュメント文字列
に詳細はあります。以下に例をしまします。

     (setq org-feed-alist
          '(("Slashdot"
              "http://rss.slashdot.org/Slashdot/slashdot"
              "~/txt/org/feeds.org" "Slashdot Entries")))

この例は、以下のコマンドが使われるたびに、`rss.slashdot.org'で提供されている
フィードの新しいアイテムから、`~/org/feeds.org'ファイル内に `Slashdot
Entries'をヘッダーにもつ新しいエントリーを生成します。

`C-c C-x g     (`org-feed-update-all')'

`C-c C-x g'
     `org-feed-alist'に設定されたフィードからアイテムを収集し、上記のように
     振る舞う。

`C-c C-x G     (`org-feed-goto-inbox')'
     はフィード名を入力し、そのフ
     ィードに設定されたインボックスへ移動します。

幾つかの見出しでは、Org-modeは`FEEDSTATUS'という引き出しを作成します。これは
フィード中にあるアイテムのステータス情報を保存しています。なんども同じアイテ
ムが追加されないためには、`FEEDSTATUS'をファイルの引き出しの中に追加すること
が必要です。

     #+DRAWERS: LOGBOOK PROPERTIES FEEDSTATUS

Atomフィードの読み方などのより詳しい情報は、`org-feed.el'を御覧ください。ま
た、`org-feed-alist'のドキュメント文字列もあります。


File: org-ja,  Node: Protocols,  Next: Refiling notes,  Prev: RSS Feeds,  Up: Capture - Refile - Archive

9.4 外部アクセスのためのプロトコル
=================================================

Org-modeを扱うためのプロトコルを外部のアプリケーションから、`emacsserver'を
通じてEmacsに渡すことができます。例えば、ウェブブラウザーのブックマークをキ
ャプチャ(*note
Capture::)を使って現在のページへのリンクとしてOrg-modeに送り、新し
いノートを作るように設定できます。または、Emacsに現在ウェブブラウザーで開い
ているウェブサイトのローカルにあるソースファイルを開くようなブックマークを作
ることも出来ます。詳細な説明や設定方法は
`http://orgmode.org/worg/org-contrib/org-protocol.php'を御覧ください。


File: org-ja,  Node: Refiling notes,  Next: Archiving,  Prev: Protocols,  Up: Capture - Refile - Archive

9.5 Refiling notes
==================

キャプチャしたデータを見なおしているとき、幾つかのエントリーをプロジェクトな
どの異なるリストへ移動したい時があるでしょう。カットし、正しい位置をさがし、
ノートを貼り付けるのは面倒です。これを単純にするには、以下に示す特別なコマン
ドを使います。

`C-c C-w     (`org-refile')'
     エントリーや現在のリージョンをリファイルします。このコマンドはエントリ
     ーをリファイルする場所を求め、補完とともに１つ選択させます。アイテム(
     またはリージョン内のアイテム)は対象の見出しの下にサブアイテムとして挿
     入されます。`org-reverse-note-order'に依存して、サブアイテムの先頭か最
     後のどちらかに挿入されます。
     デフォルトでは、現在のバッファのレベル１の見出しすべては対象と考えられ
     ますが、いくつものファイルにまたがった複雑な定義もすることが可能です。
     詳細は`org-refile-targets'変数をご覧ください。もし場所をアウトラインの
     パスをファイルパスのような補完で選択したければ、
     `org-refile-use-outline-path'と`org-outline-path-complete-in-steps'変
     数をご覧ください。もしリファイルするノードの親ノードをその場で作れるよ
     うにしたいときは、`org-refile-allow-creating-parent-nodes'変数をご覧く
     ださい。`org-log-refile'変数(1)がセットされてい
     る場合、タイムスタンプやノートがエントリーがリファイルされたときに記録
     されます。

`C-u C-c C-w'
     　リファイルのインターフェースを見出しのジャン プに使います。 

`C-u C-u C-c C-w     (`org-refile-goto-last-stored')'
     `org-refile'が最後に木を 移動させた場所に移動します。

`C-2 C-c C-w'
     現在計時しているアイテムの子としてリファイルします。

`C-0 C-c C-w  or  C-u C-u C-u C-c C-w'

`C-0 C-c C-w  or  C-u C-u C-u C-c C-w     (`org-refile-cache-clear')'
     対象のキャッシュを削除します。リファイル対象のキャッシュは
     `org-refile-use-cache'を設定することで設定します。コマンドに新しい対象
     を見せるために、このコマンドでキャッシュを削除する必要があります。

   ---------- Footnotes ----------

   (1) `#+STARTUP'キーワード、`logfile'、
`lognoterefile'、そして`nologrefile'に対応している。


File: org-ja,  Node: Archiving,  Prev: Refiling notes,  Up: Capture - Refile - Archive

9.6 Archiving
=============

(サブ)ツリーとして表現されたプロジェクトが終わった時、ツリーを外に移動し、そ
れがアジェンダに現れない様にしたいでしょう。アーカイブは活動中のファイルをコ
ンパクトにし、アジェンダビューを作るようなグローバルな検索を早くするために重
要です。

`C-c C-x C-a     (`org-archive-subtree-default')'
     現在のエントリーを`org-archive-default-command'変数で指定されたコマン
     ドを使ってアーカイブします。

* Menu:

* Moving subtrees::          アーカイブファイルにツリーを移動する
* ファイル内部でのアーカイブ::  アーカイブタグを付けてファイル内に残す


File: org-ja,  Node: Moving subtrees,  Next: ファイル内部でのアーカイブ,  Prev: Archiving,  Up: Archiving

9.6.1 ツリーをアーカイブファイルへ移動
------------------------------------------------------

もっとも一般的なアーカイブアクションはプロジェクトを他のファイル、アーカイブ
ファイル、へ移動させることです。

`C-c C-x C-s  or short  C-c $     (`org-archive-subtree')'
     カーソルの場所から始まるサブツリーを`org-archive-location'で与えられる
     場所にアーカイブします。

`C-u C-c C-x C-s'
     現在の見出しにある子がアーカイブへ移動可能か調べます。これを行うために
     は、それぞれのサブツリーがオープンなTODOエントリーとしてチェックされて
     いる必要がります。もし１つも見つからなければ、コマンドはこれをアーカイ
     ブの場所へ移動するか訪ねてきます。もしコマンドが入力されたときに、カー
     ソルがへっどらいんで_ない_場合、レベル１のツリーがチェックされます。

通常のアーカイブ場所は現在のファイルと同じディレクトリにある、現在のファイル
名に`_archive'を付加した名前のファイルです。これを変更するための情報や例は、
`org-archive-location'変数のドキュメント文字列をご覧ください。以下に示すよう
な、バッファ内でこれを変更するためのオプションもあります(1)。

     #+ARCHIVE: %s_done::

もしあるエントリー又は(サブ)ツリーに対して特別なアーカイブ場所を指定したいと
きには、エントリーに`:ARCHIVE:'プロパティを場所を値として与えてください
(*note Properties and Columns::)。

もしサブツリーが移動した場合、エントリーが移動してきたファイル、アーカイブし
たときのアウトラインパスなどのコンテクスト情報が記録されます。
`org-archive-save-context-info'変数を設定することで追加される情報の量を調整
します。

   ---------- Footnotes ----------

   (1) 後方互換性のために
、もしこれらの行がファイル中にいくつか存在する場合、それ以下のテキストのアー
カイブ場所をそれぞれ指定します。最初の行はその定義以前のすべてのテキストに適
応されます。しかし、この方法は文書のアウトライン構造と互換性が無く、_全く_推
奨されません。複数のアーカイブ場所をバッファ内で設定する正しい方法は、プロパ
ティを使う方法です。


File: org-ja,  Node: ファイル内部でのアーカイブ,  Prev: Moving subtrees,  Up: Archiving

9.6.2 ファイル内部でのアーカイブ
---------------------------------------------

もし異なるファイルへサブツリーを移動させずに、それをアジェンダビューに表示さ
せないようにするには、`ARCHIVE tag'を使うことができます。

   ARCHIVE タグ(*note
Tags::)でマークされている見出しはアウトラインツリー内の場所に留
まりますが、下記のような振る舞いをします。
   - 表示を切り替えるコマンド(*note Visibility
     cycling::)では開くことはできません
     。アーカイブしたサブツリーを強制的に切り替えるには`C-<TAB>'を使うか、
     `org-cycle-open-archived-trees'オプションを設定します。また、
     `show-all'などの通常のアウトラインコマンドはアーカイブしたサブツリーも
     開きます。

   - ツリーの抽出を行う過程で(*note Sparse
     trees::)、アーカイブしたサブツリー内で
     マッチしたものは`org-suparse-tree-open-archived-trees'オプションを設定
     しない限り現れません。

   - アジェンダビューの抽出を行う過程で(*note Agenda
     Views::)、アーカイブしたツリ
     ーの内容は、`org-agenda-skip-archived-trees'を設定した場合は無視され、
     設定されない場合は常に表示されます。アジェンダでは、`v a'を押すことで
     一時的にアーカイブを含むことができます。

   - アーカイブされたツリーは見出し以外はエクスポートされません (*note
     Exporting::)。`org-export-with-archived-trees'変数を使って詳細な設定
     は行なってください。

   - アーカイブしたツリーは`org-columns-skip-archived-trees'変数が`nil'に設
     定されない限りカラムビューから除外されます。

   以下に示すコマンドがARCHIVEタグの編集に役立ちます。

`C-c C-x a     (`org-toggle-archive-tag')'
     現在の見出しのARCHIVEタグをトグルす
     る。もしタグが設定されているならば、見出しは shadowed
     faceに変更され、以下のサブツリーは隠されます。

`C-u C-c C-x a'
     現在の見出しが持つ直接の子がアーカイブされるべきかチェックする。これを
     おこなうには、それぞれのサブツリーがオープンなTODOエントリーかチェック
     される。もし何も見つからなかった場合、コマンドは子にARCHIVEタグをセッ
     トする。もしカーソルがコマンド実行時に見出し上に_無い_場合、レベル１の
     ツリーがチェックされる。

`C-TAB     (`org-force-cycle-archived')'
     もしARCHIVE タグがついていてもツリーの切り替えを行う 

`C-c C-x A     (`org-archive-to-archive-sibling')'
     現在のエントリーを_アーカイ
     ブ兄弟_に移動する。これは見出しが`Archive'か`ARCHIVE'タグの付いたエン
     トリーの兄弟である。このエントリーはこの兄弟の子になる。そのため、継承
     したタグやアウトライン内のだいたいな位置など、従来の状況は保ち続けている。


File: org-ja,  Node: Agenda Views,  Next: Markup,  Prev: Capture - Refile - Archive,  Up: Top

10 アジェンダビュー
***************************

Org-modeで作業した結果、TODOアイテム、タイムスタンプのついたアイテム、タグの
付いた見出しなどが、1つのファイル、あるいはいくつものファイルにまたがって、
撒き散らされることとなります。ある特定の日に重要な、実際に動いているアイテム
やイベントの全体像を把握するためには、ひとつの管理された方法で、これらの情報
を集めたり、並び替えたりしながら、表示することが必要です。

Org-modeでは、いろいろな基準によってアイテムを選択することが可能であり、独立
したバッファにそれらのアイテムを表示させることができます。７つの異なるビュー
のタイプが用意されています。：

   * _アジェンダ_　カレンダーのように指定した日付の情報を表示します、

   * _TODOリスト_　未完了のアクションアイテムをカバーします、

   * _マッチビュー_　関連づけられているタグやプロパティ、TODOの状態に基づい
     て見出しを表示します、

   * _タイムラインビュー_　1つのOrg-modeのファイルの中に含まれている全ての
     イベントを時間順のビューに表示します、

   * a _テキストの検索ビュー_　複数のファイルの中かから、指定したキーワード
     を含んでいるすべてのエントリーを表示します、

   * a _詳細が未決定のプロジェクトビュー_　現在作業が進んでいないプロジェク
     トを表示します。そして、

   * _カスタムビュー_　特別な検索や異なるビューの組合せによるビューです。

抽出された情報は特別な_アジェンダバッファ_に表示されます。このバッファはリー
ドオンリーですが、オリジナルのOrg-modeファイルにジャンプしたり、オリジナルの
ファイルを間接的に編集することができます。

２つの変数によって、アジェンダバッファをどのように表示するか、アジェンダが存
在したときに、ウインドウの設定を元に戻すかどうかをコントロールします。；
`org-agenda-window-setup'と`org-agenda-restore-windows-after-quit'.

* Menu:

* Agenda files::             アジェンダ生成のために探索されるファイル
* Agenda dispatcher::        アジェンダビューへのキーボードアクセス
* Built-in agenda views::    すぐに使える機能に何があるでしょう？
* Presentation and sorting::  表示のためにどのようにアジェンダ項目が準備され
るのか
* Agenda commands::          タスクツリーのリモート編集
* Custom agenda views::      特別な検索とビューを定義する
* Exporting Agenda Views::   ビューをファイルに書き出す
* Agenda column view::       収集したエントリーのためにコラムビューを使用す
る


File: org-ja,  Node: Agenda files,  Next: Agenda dispatcher,  Prev: Agenda Views,  Up: Agenda Views

10.1 Agenda files
=================

表示される情報は、通常すべての_アジェンダファイル_から収集されます。アジェン
ダファイルは`org-agenda-files'(1)変数にリスト化されたファイルが対象となります。もしもこのリ
ストの中にディレクトリ名が記載されていたら、
そのディレクトリの中にある`.org'という拡張子がついた全てのファイルが、アジェ
ンダファイルの対象となります。

したがって、たとえあなたが1つのOrg-modeファイルでしか作業をしていなくても、
このファイルをそのリスト(2)に記載したことになるでしょう。`org-agenda-files'をカスタマイズすることが
可能で、しかも以下に述べるコマンドを通して簡単な方法で維持することができます
。

`C-c [     (`org-agenda-file-to-front')'
     　アジェンダファイルのリストに編集中の
     ファイルを追加する。そのファイルは、リストの先頭に追加される。もしも既
     にリストに存在していたら、先頭に移動する。前置引数をつけることで、リス
     トの最後に追加／移動する。

`C-c ]     (`org-remove-file')'
     　編集中のファイルを アジェンダファイルのリストから削除する。 

`C-'     (`org-cycle-agenda-files')'
`C-,'
     アジェンダファイルのリストに従って、1つのファイルから次のファイルへと
     切り替える。 

`M-x org-iswitchb'
     `iswitchb'と似たようなインターフェースでOrg-modeのバッファの間を切り替
     えるコマンド。

Org-modeメニューには、現時点のファイルのリストが含まれており、その中のファイ
ルに移動するのに役立ちます。

もしもこのリストに載っているファイルではなく、作業中のアジェンダファイルに焦
点をあてたかったり、リストにあるファイルのまさにひとつのファイルに焦点をあて
たかったり、はたまたあるファイルの中のあるサブツリーに焦点をあてたかったりし
たいときは、いくつかの方法が用意されています。単一のアジェンダコマンドとして
、コマンド選択画面上 (*note Agenda
dispatcher::)で`<'を1回ないし数回押すとよいのです。アジェンダの対象
をある限定した期間に絞り込むために以下のコマンドが用意されています。：

`C-c C-x <     (`org-agenda-set-restriction-lock')'
     アジェンダの対象を現在カー
     ソルが置かれているサブツリーに固定的に制限します。前置引数をつけたり、
     ファイルの最初の見出しよりも前にカーソルが置かれているときには、アジェ
     ンダの対象範囲はファイル全体になります。この制約は`C-c C-x >'を実行し
     て取り除くか、`<'または`>'をアジェンダのコマンド選択画面上で入力するま
     では維持します。もしもウインドウ上にアジェンダビューが表示されているな
     らば、あたらしい制約が即座に効果を及ぼします。 

`C-c C-x >     (`org-agenda-remove-restriction-lock')'
     `C-c C-x <'で作成された 固定する制限を削除します。

`speedbar.el'を併用しているときは、Speedbarのフレームの中で以下のコマンドを
使用することができます。
`< in the speedbar frame     (`org-speedbar-set-agenda-restriction')'
     　
     Speedbarのフレームの中で、1つのOrg-modeファイルか、そのファイルのサブ
     ツリーの一つか、カーソルの置かれているアイテムに対応してアジェンダを恒
     久的に限定します。もしもアジェンダビューが表示されているウインドウがあ
     るならば、限定箇所が変更されると即座に反映する。 

`> in the speedbar frame     (`org-agenda-remove-restriction-lock')'
     　制限を ふたたび解除する。

   ---------- Footnotes ----------

   (1) もしもその変数の値がリストではなく、単独のフ
ァイル名の場合には、その外部ファイルの中に記載されているアジェンダファイルの
名前となります。

   (2) コマンド選択画面を使用しているときに、コマンドを選
択する前に、`<'を押すと、編集中のファイルに対するコマンドが制限されて、次の
コマンド選択画面でコマンドが入力されるまで、`org-agenda-files'は無視されます
。


File: org-ja,  Node: Agenda dispatcher,  Next: Built-in agenda views,  Prev: Agenda files,  Up: Agenda Views

10.2 アジェンダのコマンド選択画面
===============================================

グローバルなキーと結びついている、コマンド選択画面を通してそのビューは作成さ
れます。--例えば、`C-c a' (*note
Installation::)のように。以下のように、コマンド選択画面にアクセスする方法と
して`C-c a'を想定しており、キーボードでコマンドにアクセスするためのリストが
表示されています。`C-c a'を入力した後、コマンドを実行するために、次に入力す
る文字を要求します。コマンド選択画面では以下に記載するデフォルトのコマンドが
提供されています。
`a'
     カレンダーのようなアジェンダを作成します。(*note Weekly/daily agenda::)

`t / T'
     すべてのTODOアイテムのリストを作成します。 (*note Global TODO list::)

`m / M'
     タグの表記にマッチした見出しのリストを作成します。 (*note Matching
     tags and properties::)

`L'
     カレントバッファ用のタイムラインのビューを作成します。(*note
     Timeline::)

`s'
     そのエントリーに存在するしないにかかわらず、and/orという正規表現による
     キーワードの論理式で選択したエントリのリストを作成します。

`/'
     すべてのアジェンダファイルと`org-agenda-text-search-extra-files'の中で
     リスト化かれているファイルの中から正規表現を用いて検索します。これは
     Emacsの`multi-occur'というコマンドを使用します。前置引数をつけると、そ
     れぞれのマッチした行の状況の数をしていすることができます。デフォルトは
     1となっています。

`# / !'
     詳細が未決定のプロジェクトのリストを作成します。(*note Stuck
     projects::)

`<'
     カレントバッファ(1)に対してアジェンダコマンドを制限します。
     `<'を入力したあと、コマンドを選択するために文字を入力する必要がありま
     す。

`< <'
     もしもアクティブなリージョンがあるときは、以下のようなアジェンダコマン
     ドがそのリージョンに限定されます。一方、カレントのサブツリー(2)に限定することもできます。`<
     <'を入力し たあと、コマンドを選択する文字を入力する必要があります。

あなたは、あたかもデフォルトのコマンドのように、コマンド選択画面でアクセスす
るカスタムコマンドを定義することもできます。複数のブロックを同時に含めた拡張
されたアジェンダバッファを作成する可能性を含んでいます。例えば週のアジェンダ
、グローバルなTODOリスト、そして多数の特定タグの検索など。 *Note Custom
agenda views::.

   ---------- Footnotes ----------

   (1) 逆の互換性として、`1'をカレントバッファを制限するため
に入力することもできます。

   (2) 逆の互換
性として、カレントリージョンまたはカレントサブツリーに限定するために
`0'を入力することもできます。.


File: org-ja,  Node: Built-in agenda views,  Next: Presentation and sorting,  Prev: Agenda dispatcher,  Up: Agenda Views

10.3 agendaに組み込まれているビュー
===============================================

このセクションではビルトインビューについて説明します。

* Menu:

* Weekly/daily agenda::      現在のタスクが表示されたカレンダーのページ
* Global TODO list::         全ての未完了アクション項目
* Matching tags and properties::  微調整された検索での構造化された情報
* Timeline::                 単一ファイルでの時間順のビュー
* Search view::              文章の中を検索してエントリーを見つける
* Stuck projects::           レビューが必要なプロジェクトを見つける


File: org-ja,  Node: Weekly/daily agenda,  Next: Global TODO list,  Prev: Built-in agenda views,  Up: Built-in agenda views

10.3.1 1週間／1日のアジェンダ
---------------------------------------

1週間の／1日の_アジェンダ_の目的は、その週あるいはその日のタスクをすべて表示
して、紙のアジェンダのページのように、実行に移すことです。

`C-c a a     (`org-agenda-list')'
     　Org-modeのファイルのリストの中からその週の
     予定を収集するものです。予定はそれぞれの日に表示されます。（ `C-u 2 1
     C-c a
     a'のように)前置引数に数字をつけて(1)表示する日数を設定することができます。

表示されるデフォルトの日数は、`org-agenda-span'(あるいは古くさくなってしまい
ましたが`org-agenda-ndays')という変数で設定します。この変数は、アジェンダの
中でデフォルトとして確認したい日数、あるいは、期間を示す`day'、`week'、
`month'や`year'といった期間を示す名前をつけて設定します。

アジェンダバッファからリモートで編集するとは、例えば、アジェンダバッファの中
でデッドラインやアポイントメントの日付を変更することができるという意味です。
アジェンダバッファの中で利用できるコマンドは、*note Agenda
commands::の中で一覧表 にしています。

カレンダー／日記の統合
.................................

Emacsには、Edward M.
Reingoldによって開発されたカレンダーと日記の機能があります。カレンダーでは、
国や文化の異なる祝祭日を備えた3ヵ月分のカレンダーが表示されます。日記には記
念日、月の満ち欠け、日の出日の入り、繰り返しの予定（隔週、隔月）などを記録し
ておくことができます。このような機能は、Org-modeに対して大変補完的な関係にあ
ります。日記とOrg-modeの出力を結びつけることは大変有益です。

Emacsの日記からOrg-modeのアジェンダに項目を落とし込むために、あなたは次のよ
うに変数を設定するだけです。

     (setq org-agenda-include-diary t)

After that, everything will happen automatically.  All diary entries
including holidays, anniversaries, etc., will be included in the agenda
buffer created by Org-mode.  <SPC>, <TAB>, and <RET> can be used from the
agenda buffer to jump to the diary file in order to edit existing diary
entries.  The `i' command to insert new entries for the current date works
in the agenda buffer, as well as the commands `S', `M', and `C' to display
Sunrise/Sunset times, show lunar phases and to convert to other calendars,
respectively.  `c' can be used to switch back and forth between calendar
and agenda.

もしもあなたが日記をS式項目と祝祭日だけで使用しているのならば、上のような設
定をするよりも、Org-modeファイルに直接コピーしたり移動したりしたほうが手っ取
り早いです。Org-modeは日記形式のS式項目を評価し、しかもより早く、というのは
、最初にカレンダーを表示するという負荷がかからないからです。S式項目は左端か
ら記述し、式の前にスペースが入ってはいけないことに注意してください。たとえば
、あるOrg-modeファイルについての、以下にのべるセグメントが処理され、項目がア
ジェンダの中に作成されます。

     * Birthdays and similar stuff
     #+CATEGORY: Holiday
     %%(org-calendar-holiday)   ; special function for holiday names
     #+CATEGORY: Ann
     %%(diary-anniversary  5 14 1956)(2) Arthur Dent is %d years old
     %%(diary-anniversary 10  2 1869) Mahatma Gandhi would be %d years old

Anniversaries from BBDB
.......................

もしもBig Brothers
Databaseを使用して連絡先を管理しているのならば、あなたは先に述べたのと同様に
、独立したOrg-modeのファイルや日記のファイルに登録するよりも、BBDBの中に記念
日を登録したいと考えるでしょう。Org-modeはこれもサポートしており、アジェンダ
の一部としてBBDBの記念日を表示することができます。そのために必要なことは、以
下のような記述をアジェンダファイルに行うことです。

     * Anniversaries
       :PROPERTIES:
       :CATEGORY: Anniv
       :END:
     %%(org-bbdb-anniversaries)

それからBBDBのデータレコードのための記念日の定義に取り掛かることができます。
基本的には、BBDBのレコードの中にカーソルを置いて、`C-o anniversary <RET>'を
実行し、それから日付を`YYYY-MM-DD'または`MM-DD'の形式で記入し、半角スペース
に続けて記念日の種類(`birthday'、`wedding'、または定型句)のクラスを記入しま
す。もしもクラスを省略した場合は、デフォルトでは`birthday'であるとみなします
。いくつかの例を書いてみました。`org-bbdb.el'ファイルの先頭のところにもう少
し詳しい説明が書いてあります。

     1973-06-22
     06-22
     1955-08-02 wedding
     2008-04-14 %s released version 6.01 of org-mode, %d years ago

BBDBを変更したり、Emacsのセッションで最初にアジェンダを表示したとき後は、ア
ジェンダの表示が少し遅くなるかもしれません。というのはOrg-modeが記念日のハッ
シュデータを更新するからです。しかしながら、そのことについていうと非常に早い
といえます。実際Org-modeの日記ファイルに`%%(diary-anniversary)'のエントリー
を長々と書き連ねた場合よりもずっと早いと言えるでしょう。

Appointment reminders
.....................

Org-modeはEmacsの予定を通知する機能と連携しています。あなたのアジェンダファ
イルに含まれているすべてのアポイントを追加するために、`org-agenda-to-appt'コ
マンドを使います。このコマンドはあなたの予定のリストにフィルターをかけ、特別
なカテゴリーに属しているものや正規表現の検索に合致したものを追加します。詳細
はドキュメント文字列を参照してください。

   ---------- Footnotes ----------

   (1) 逆方向の互換性のため
に、普遍的な前置引数`C-u'をつけることでアジェンダ（予定表）より上に、
TODOリストを書き出すことができます。この機能は軽視されており、専用の
TODOリストやブロックアジェンダ(*note Block agenda::).をその代わりに利用する
ことが多いです。

   (2) Note that the order of the arguments (month, day, year) depends on
the setting of `calendar-date-style'.


File: org-ja,  Node: Global TODO list,  Next: Matching tags and properties,  Prev: Weekly/daily agenda,  Up: Built-in agenda views

10.3.2 The global TODO list
---------------------------

グローバルなTODOリストには、形式を整えられ、1つの場所に集められたすべての未
完了のTODOアイテムが含まれています。

`C-c a t     (`org-todo-list')'
     　グローバルなTODOリストを表示します。これはす
     べてのアジェンダファイル(*note Agenda
     Views::)からTODOアイテムを１つのバッフ
     ァに集約します。デフォルトでは、このアイテムのリストはDONEという状態で
     はないアイテムです。そのバッファは`agenda-mode'となり、そのバッファか
     らTODOアイテムを直接調べたり操作したりするコマンドが用意されています
     (*note Agenda commands::)。 上と似ていますが、指定したTODOキーワードと合致したものを表示します。同
     じことを前置引数をつけて`C-c a t'を実行することでも指定できます。キー
     ワードの入力を促す指示が表示され、そして複数のキーワードを論理式ORとい
     う意味で`|'で区切って指定することができます。数字付きの前置引数をつけ
     ると`org-todo-keywords'の中のN番目のキーワードを選択することができます
     。 `r'キーをアジェンダバッファで使用するとバッファの再構成が行われます。
     たとえば`3 r'というように、前置引数をつけてこのコマンドを実行すると選
     択したTODOキーワードが変更することができます。もしも特定のキーワードを
     使って検索することが多い場合は、カスタムコマンドを定義することもできま
     す(*note Agenda dispatcher::)。
     特定のTODOキーワードと合致するものを検索するのは、タグ検索の１機能として行
     うこともできます(*note Tag searches::)。

リモートでTODOアイテムを編集するということの意味は、1つのキーを入力すること
でTODOエントリーの状態を変更できるということです。TODOリストの中で利用できる
コマンドは*note Agenda commands::の記述を参考にしてください。

通常グローバルなTODOリストには、TODOキーワードのついたすべて見出しが表示され
ます。このリストは大変長いものになる場合もあります。それをコンパクトにするに
は２つの方法があります。
   - TODOアイテムが、実行するために_scheduled_となっている、あるいは、もは
     や_open_となっている_deadline_(*note
     Timestamps::)を持っているかどうかを確認
     したい人もいるでしょう。`org-agenda-todo-ignore-scheduled'、
     `org-agenda-todo-ignore-deadlines'、`org-agenda-todo-ignore-timestamp'
     および／または`org-agenda-todo-ignore-with-date'という変数を設定し、グ
     ローバルなTODOリストから取り除くことができます。

   - TODOアイテムがサブタスクにブレイクダウンされた下位のレベルを持っている
     かもしれません。そういった場合は、最上位のTODOの見出しを表示すれば十分
     で、グローバルなリストからは下位のレベルの項目は省略してもよい場合があ
     ります。そういったときは`org-agenda-todo-list-sublevels'変数を設定する
     ことで可能となります


File: org-ja,  Node: Matching tags and properties,  Next: Timeline,  Prev: Global TODO list,  Up: Built-in agenda views

10.3.3 Matching tags and properties
-----------------------------------

アジェンダファイルの中の見出しに_tags_(*note
Tags::)がついていたり、あるいは属性 (*note Properties and
Columns::)がついていたときは、このメタデータに基づいて見出し
を選択し、アジェンダバッファに収集することができます。この項で述べている検索
構文は`C-c / m'を用いたツリーの抽出を行うときも適用できます。

`C-c a m     (`org-tags-view')'
     　一組のタグのセットに合致したすべての見出しの
     リストを作成します。選択の基準の入力を指示するコマンドでタグのついた論
     理式による表現で記入します。例えば、`+work+urgent-withboss'あるいは
     `work|home' というように(*note
     Tags::)。もしも特定の検索をよく行うならばそのためのカスタ
     ムコマンドを定義することができます(*note Agenda dispatcher::)。 

`C-c a M     (`org-tags-view')'
     `C-c a m'と似ていますが、not-DONEの状態にあるTODOアイテムの見出しから
     選択するもので、自動的にサブアイテムもチェックします
     (`org-tags-match-list-sublevels'変数参照)。予定／期限のついたアイテム
     を除外するには`org-agenda-tags-todo-honor-ignore-options'の変数を参照
     してください。特定のTODOキーワードをタグの一致と一緒に指定することも可
     能です。*note Tag searches::を参照してください。

   タグのリストで利用できるコマンドは*note Agenda
commands::のところで説明しています 。

Match syntax
............

検索文字列ではANDの意味で`&'、ORの意味で`|'という論理式を使うことができます
。`&'は`|'よりも強く結びつけます。括弧（
）は現在準備されていません。検索のどの要素も、タグそのものか、正規表現でマッ
チしたタグか、あるいは`PROPERTY OPERATOR VALUE'のような属性値にアクセスして
比較操作のできる値のいずれかになります。どの要素も`-'を先頭につけてそれ以外
のものを表現するか、`+'を先頭につけてポジティブな選択を行う、というような糖
衣構文（簡便な構文）で表現します。`&'でANDを取り扱うことは`+'、`-'で表現でき
るもののオプションです。下にタグだけをつかったいくつかの例を挙げておきました
。

`+work-boss'
     `:work:'というタグがついているが、`:boss:'というタグがついていない見出
     しを選択します。

`work|laptop'
     `:work:'または`:laptop:'というタグがついたものを選択します。

`work|laptop+night'
     前の文と同じですが、`:laptop:'の行には、同時に`:night:'というタグが付
     いている必要があります。

タグの代わりに、大括弧でくくられた正規表現により指定をすることもできます。例
えば、`work+{^boss.*}'と指定すると、`:work:'というタグのついた見出しで
`boss'という単語でstartingするタグがついているものに一致します。

   タグとマッチするものを探すと同時に属性(*note Properties and
Columns::)の検索をする
ことも可能です。属性としては実際の属性のほかに、他のメタデータで表現された特
別な属性(*note Special
properties::)にも対応しています。例えば、そのエントリーの中
のTODOキーワードで表現された`TODO'という「属性」。あるいは、そのエントリーの
階層を示す`LEVEL'という「属性」などです。そのため、
`+LEVEL=3+boss-TODO="DONE"'という検索式は、第3階層のすべての見出しの中で、
`boss'というタグがついており、TODOキーワードがDONEでは`ない'もののリストを表
示します。`org-odd-levels-only'という設定がなされているバッファでは`LEVEL'は
＊の数を数えるのではなく、`LEVEL=2'（2番目）
の階層は＊が３つある階層が該当します。

   いくつかの例を紹介します。
`work+TODO="WAITING"'
     `:work:'というタグがあるTODO行のうち、特にTODOキーワードが`WAITING'と
     なっている行を選択します。

`work+TODO="WAITING"|home+TODO="WAITING"'
     workとhomeというタグがついているWaitingとなっているタスク

属性の検索では、多数の異なる操作で属性の値をテストすることができます。複雑な
例を挙げます。

     +work-boss+PRIORITY="A"+Coffee="unlimited"+Effort<2         \
              +With={Sarah\|Denny}+SCHEDULED>="<2008-10-11>"

比較のタイプは比較の値がどのように書かれているかによります。
   - 比較する値が普通の数字ならば、数値の比較が行われ、`<'、`='、`>'、`<='
     、`>='、および`<>'という操作が可能です。

   - 比較する対象がダブルクォーテーションで囲まれている場合は、文字列の比較
     が行われ、前項と同じ操作が可能です。

   - もしも比較対象が、(`DEADLINE<="<2008-12-24 18:30>"'のように)、ダブルク
     ォーテーション_および_角括弧<>で囲まれていた場合は、両方の値がOrg-mode
     流の標準的な日付・時刻の指定であると仮定し、それにそって比較を行います
     。いくつかの特別な値があります。`"<now>"'は（時刻も含めた）現在を示し
     、`"<today>"'、`"<tomorrow>"'はそれらの日の0:00つまり、時刻の指定が
     ないことを表します。同様に、`"<+5d>"'または`"<-2m>"'というような文字列
     は、それぞれ日、週、月、年を示す、`d'、`w'、`m'、`y'という単位がついて
     いるものとして使用されます。

   - もしも比較対象が中括弧｛｝でくくられていて、正規表現での比較がなされる
     ときは、`='は一致していることを示し、`<>'は一致していないことを示しま
     す。

そのため、例に掲げた検索文字列の意味は、`:work:'というタグがつけられているが
、`:boss:'というタグはついておらず、また、優先順位の値が`A'であり、
`:Coffee:'が`unlimited'という値であり、`Effort'
属性が数値で２より小さく、`:With:'の値が`Sarah\|Denny'であり、スケジュールが
2008年10月11日もしくはそれ以降に予約されたものを示しています。

TODO、LEVEL、CATEGORYを検索するときは短時間ですみます。それ以外の属性を検索
するときはいささか時間がかかります。しかしながら、一度高い代償を払って1つの
プロパティを検索したら、他の属性を追加して再び検索するときは安くあがります。

検索の際にOrg-modeで属性の継承という機能を使用するように設定することができま
すが、相当検索スピードが落ちることを覚悟してください。詳細は *note Property
inheritance::参照。

逆互換として、さらにまたタイプのスピードを上げるために、検索においてTODOの状
態をテストする別の方法があります。このためには、検索文字列（それは`|'で結合
された複数の用語が含まれていると思いますが）のタグ・属性検索の部分を`/'を使
って終了させ、TODOキーワードを論理式で結んで指定します。その構文はタグの検索
で使用したのと似ていますが、よく考えて適用する必要があります。例えば、複数の
TODOキーワードが存在することを検索するには論理式のANDで結びつけても意味があ
りません。しかしながら、_negative selection_（存在しないことを選択する場合）
では「AND」で結合することは意味を持ちます。これを確かめるには、実際にいくつ
かのTODOキーワードで、`C-c a M'を用いて確認するだけです（そのほうがスピード
アップできます）。あるいはスラッシュのあとに`!'を記入して同時にTODOの部分を
開始します。`C-c a M'または`/!'を使用したときは、DONEの状態にあるTODOキーワ
ードを検索することはできません。例えば、

`work/WAITING'
     `work+TODO="WAITING"'と同じ

`work/!-WAITING-NEXT'
     `:work:'を選択。ただしTODO行では`WAITING'と`NEXT'のどちらのタグもつい
     ていないもの

`work/!+WAITING|+NEXT'
     `:work:'を選択。TODO行に`WAITING'か`NEXT'かどちらかのタグがついている
     もの。


File: org-ja,  Node: Timeline,  Next: Search view,  Prev: Matching tags and properties,  Up: Built-in agenda views

10.3.4 Timeline for a single file
---------------------------------

タイムラインはひとつのOrg-modeファイルの中から_time-sorted view_（時間順のビ
ュー）ですべてのタイムスタンプのついたアイテムをまとめてて表示します。このコ
マンドの主な目的は、あるプロジェクトに含まれているイベント全体の概要をつかむ
ためにあります。

`C-c a L     (`org-timeline')'
     すべてのタイムスタンプの付いたアイテムについて、
     Org-modeファイルの中で時間順のビューを提供します。`C-u'という前置引数
     をつけて呼び出したときは、現在の日付の時点で、すべての未完了のTODOエン
     トリー（予約されているものも、そうでないものも）を一覧にします。

タイムラインのバッファで利用できるコマンドは、*note Agenda
commands::にリスト化さ れています。


File: org-ja,  Node: Search view,  Next: Stuck projects,  Prev: Timeline,  Up: Built-in agenda views

10.3.5 Search view
------------------

アジェンダのビューではOrg-modeのエントリーに対する一般的なテキスト検索機能を
持っています。これはノートを探すのに特に役に立ちます。

`C-c a s     (`org-search-view')'
     　このコマンドは特別な検索のためのもので、論
     理式を使って、文字列または特定の単語に合致するエントリーを選択します。
   例えば、`computer equipment'という検索文字列は、`computer
equipment'という1
つの文字列が含まれているエントリーを検索するでしょう。もしも、２つの単語が、
1つ以上のスペースまたは改行で分かれていても、依然として一致するものを検索す
るでしょう。検索ビューでは、エントリーの中にある特別なキーワードについて論理
式を使って検索することもできます。`+computer +wifi -ethernet -{8\.11[bg]}'
という検索文字列では、次のようなノートエントリーを検索します。`computer'と
`wifi'というキーワードを含んでおり、`ethernet'というキーワードは含まれておら
ず、`8\.11[bg]'という正規表現を含んでいない、すなわち8.11bおよび
8.11gともに含まれていないという意味ですが、エントリーを検索します。最初の
`+'は単語検索を開始するために必要ですが、ほかの`+'はオプションです。詳しく知
りたい場合は、`org-search-view'というコマンドのドキュメント文字列を参照して
ください。

   アジェンダファイルに加えて、このコマンドは
`org-agenda-text-search-extra-files'の中で一覧になっているファイルもまた検索
するということに注意してください。


File: org-ja,  Node: Stuck projects,  Prev: Search view,  Up: Built-in agenda views

10.3.6 Stuck projects
---------------------

もしもあなたが、以下に述べるようなDavid
Allen氏のGTDのようなシステムであなたの仕事を管理しているならば、あなたが抱え
ている「義務」のひとつは、すべてのプロジェクトが進んでいるかを明確にするため
に、レビューを定期的に行うことです。_詳細が未決定_のプロジェクトは、次の行動
が何も定義がされていないため、Org-modeが提示するTODOリストに、全く何も表示さ
れることがないのです。レビューをする際に、そういったプロジェクトを明確にし、
それらのプロジェクトための次の行動を定義することが必要です。

`C-c a #     (`org-agenda-list-stuck-projects')'
     　詳細が未決定のプロジェクトリ スト 

`C-c a !'
     `org-stuck-projects'の変数をカスタマイズすることで何が詳細が未決定のプ
     ロジェクトで、どうやったらそういうプロジェクトを発見できるかを定義する
     ことができます。

あなたは九分九厘このコマンドが機能するために、このビューを定義する必要があり
ます。あらかじめビルトインされているデフォルトの設定では、すべてのあなたのプ
ロジェクトは第2階層の見出しに記述されており、あるプロジェクトが未決定である
とはいえない状況とは、すくなくとも1つのエントリーにTODOまたはNEXTまたは
NEXTACTIONという印がつけられている場合です。

Org-modeを使う際に、あなた自身の方法でアプローチするとして、PROJECTというタ
グがあるものをプロジェクトと定義し、プロジェクトがまだ検討する段階にないとい
うことを示すためにTODOキーワードでMAYBEと書いているものと仮定しましょう。さ
らにTODOキーワードでDONEという印の付いたものは完了したプロジェクトであると仮
定しましょう。そしてまたNEXTもしくはTODOと書かれたものはNextActionであると仮
定しましょう。@SHOPというタグがついたときはNEXTというタグが付いていなくても
、ショッピングに行くという次の行動を示しているとします。最終的に、もしもプロ
ジェクトにIGNORE（無視）という特別なキーワードがどこかについていたら、それは
リストに表示されないものとします。このようなケースの場合、タグ・
TODO(1)が`+PROJECT/-MAYBE-DONE'とマッチし、さらにサブツリーに
TODO、NEXT、@SHOP、およびIGNOREというタグが付いているようなプロジェクトは、
詳細が未決定のプロジェクトではないといえます。このようなカスタマイズを正しく
定義するには、

     (setq org-stuck-projects
           '("+PROJECT/-MAYBE-DONE" ("NEXT" "TODO") ("@SHOP")
                                    "\\<IGNORE\\>"))

もしもあるプロジェクトが詳細が未決定のプロジェクトではないと定義されたならば
、そのエントリーのサブツリーは依然として詳細が未決定のプロジェクトとして検索
されるということに注意してください。

   ---------- Footnotes ----------

   (1) *Note Tag searches::.


File: org-ja,  Node: Presentation and sorting,  Next: Agenda commands,  Prev: Built-in agenda views,  Up: Agenda Views

10.4 Presentation and sorting
=============================

アジェンダビューにアイテムが表示される前に、Org-modeではそのアイテムを表示し
並び替える準備を行っています。それぞれのアイテムは1行を占めます。その行には
その項目の_category_ (*note
Categories::)を含んだ_prefix_とそれ以外の重要な情報を含んでいます。あなたは
`org-agenda-tags-column'を使って表示されるコラムタグをカスタマイズすることが
できます。`org-agenda-prefix-format'のオプションを使用して前置引数をカスタマ
イズすることができます。この前置引数は、そのアイテムに関連するアウトラインの
見出しの最新のバージョンに従います。

* Menu:

* Categories::               全てのタスクが同じであるとは限らない
* Time-of-day specifications::  agendaはどうやって時間を知るか
* agendaの項目をソートする::  物事の順番


File: org-ja,  Node: Categories,  Next: Time-of-day specifications,  Prev: Presentation and sorting,  Up: Presentation and sorting

10.4.1 Categories
-----------------

カテゴリーとは、それぞれのアジェンダアイテムに割り当てられた幅の広いラベルで
す。デフォルトでは、カテゴリーはファイルの名前から単純に作成されます。しかし
、バッファ上で特別な行を足すことでそれを指定することができます。(1)

     #+CATEGORY: Thesis

もしもあなたが、1つのエントリーもしくは1つの（サブ）ツリーに特別なCATEGORYを
持たせたいと望むのならば、そのエントリーに、値として適用したいと思っている特
別なカテゴリーを`:CATEGORY:'という属性に設定しなさい。

アジェンダバッファの表示は、そのカテゴリーが10文字以上長くしない方が見栄えが
良いです。

あなたは`org-agenda-category-icon-alist'変数をカスタマイズすることで、カテゴ
リーにアイコンを設定することができます。

   ---------- Footnotes ----------

   (1) 逆に言うと
、以下のような動作も生じます。もしも1つのファイルの中に、いくつかののそうい
う行が存在するならば、それよりも下の行にあるテキストに、そのカテゴリーをそれ
ぞれ指定することになります。最初のカテゴリーは、その最初のCATEGORYの行はより
も前にあるどのテキストにも適用されます。しかしながら、_strongly_という手法を
使うことは、文書のアウトライン構造と非互換であることを、_強く_非難することに
なります。複数のカテゴリーをバッファの中で設定する正しい方法は属性を使用する
ことです。.


File: org-ja,  Node: Time-of-day specifications,  Next: agendaの項目をソートする,  Prev: Categories,  Up: Presentation and sorting

10.4.2 Time-of-day specifications
---------------------------------

Org-modeは時刻の仕様に基づいて、それぞれのアジェンダアイテムをチェックします
。時刻は、例えば、`<2005-05-10 Tue 19:00>'のように、アジェンダの中に含まれ
ているものをトリガーとしたタイムスタンプの一部です。時間の幅は２つのタイムス
タンプで指定され、例えば`<2005-05-10 Tue 20:30>--<2005-05-10 Tue 22:15>'の
ように記載されます。

そのエントリー自身の見出しの中で、時刻（時間）はプレーンなテキストとして（
`12:45'や`8:30-1pm')のように表示されます。もしもアジェンダがEmacsのダイアリ
ー(*note Weekly/daily
agenda::)と一体化されていたときは、ダイアリーのエントリーの
中で指定した時間は、同様に認識されます。

アジェンダの表示のために、Org-modeは時間を引き出し、前置引数の一部として標準
的な24時間のフォーマットでそれを表示します。前の段落に書かれた時間の例は、ア
ジェンダの中で結局以下のように表示されます。

         8:30-13:00 Arthur Dent lies in front of the bulldozer
        12:45...... Ford Prefect arrives and takes Arthur to the pub
        19:00...... The Vogon reads his poem
        20:30-22:15 Marvin escorts the Hitchhikers to the bridge

もしもアジェンダが一日モードであるならば、あるいは今日を表示しているならば、
時間設定されたエントリーは、次のような時間のグリッドに埋め込まれます。

         8:00...... ------------------
         8:30-13:00 Arthur Dent lies in front of the bulldozer
        10:00...... ------------------
        12:00...... ------------------
        12:45...... Ford Prefect arrives and takes Arthur to the pub
        14:00...... ------------------
        16:00...... ------------------
        18:00...... ------------------
        19:00...... The Vogon reads his poem
        20:00...... ------------------
        20:30-22:15 Marvin escorts the Hitchhikers to the bridge

時間のグリッドは、`org-agenda-use-time-grid'変数で表示したりしなかったさせる
ことができます。そしてまた`org-agenda-time-grid'で設定をすることができます。


File: org-ja,  Node: agendaの項目をソートする,  Prev: Time-of-day specifications,  Up: Presentation and sorting

10.4.3 agendaの項目をソートする
----------------------------------------

ビューに書き出される前に、各アイテムは並び替えが行われます。この並び替えはビ
ューのタイプによって決まります。
   * 一日／一週間のアジェンダでは、それぞれの日の各アイテムは順番に並びます
     。デフォルトの順番は、明示的に日付と時刻の指定を含んでいるアイテムを、
     最初に集めます。これらのアイテムは、その日の_スケジュール_に応じて、リ
     ストの最初から順番に表示されます。その次に、各アイテムは
     `org-agenda-files'によって決められた順番に、カテゴリーごとにグループ分
     けされます。それぞれのカテゴリーの中で、各アイテムは優先順位 (*note
     Priorities::)に従って並び替えられます。優先順位は基本的な優先順位で構
     成されます（優先順位`A'ならば2000、`B'ならば1000、`C'ならば0として）。
     さらに、予定あるいはデッドラインを過ぎているアイテムのウエイトが追加さ
     れます。

   * TODOリストでは、各アイテムはカテゴリーの順番に並び替えられますが、各カ
     テゴリーの中では、優先順位(*note
     Priorities::)によって並び替えられます。優先
     順位は、優先順位の記号に従って並べ替えられます。さらに、アイテムが実行
     する日あるいは予約した日にどれだけ近いかということも考慮されます。

   * タグでの一致については、項目は並び替えは行われず、アジェンダファイルの
     中で一致した項目が発見された順番に従って表示されるのみです。

並び替えは、`org-agenda-sorting-strategy'変数でカスタマイズすることができま
す。そして、並び替えはそのエントリーの工数の見積りに基づく評価も含まれます。


File: org-ja,  Node: Agenda commands,  Next: Custom agenda views,  Prev: Presentation and sorting,  Up: Agenda Views

10.5 Commands in the agenda buffer
==================================

アジェンダバッファでのエントリーは、その項目が作成されたOrg-modeファイルと日
記ファイルの間でリンクされます。アジェンダバッファでは編集することはできませ
んが、コマンドを使って、そのエントリーがある場所を表示したり、ジャンプして、
アジェンダバッファから「遠隔的に」Org-modeファイルを編集することができます。
この方法で、すべての情報は１度書き込めばよく、あなたがアジェンダとノートのフ
ァイルが別の情報になるというリスクを避けることができます。

いくつかのコマンドはアジェンダの行上でマウスをクリックすることで実行されます
。それ以外のコマンドは、必要とされる行の中にカーソルが置かれている必要があり
ます。

Motion
......

`n     (`org-agenda-next-line')'
     　次の行へ(<up>及び`C-p'と同じ)。 

`p     (`org-agenda-previous-line')'
     　次の行へ(<down>及び`C-n'と同じ)。

View/Go to Org file
...................

     　

`<SPC>  or  mouse-3     (`org-agenda-show-and-scroll-up')'
     　
     そのアイテムのオリジナルの場所を別のウインドウで表示する。前置引数を使
     うことで、見出しだけでなく、アウトライン上にエントリー全体を明確に表示
     する。

`L     (`org-agenda-recenter')'
     　オリジナルの場所を表示し、ウインドウの センターに再配置する。

`<TAB>  or  mouse-2     (`org-agenda-goto')'
     　別のウインドウ でそのアイテムのオリジナルの場所に移動する。 

`<RET>     (`org-agenda-switch-to')'
     　そのアイテムのオリジナルの場所に移動し、 他のウインドウは削除する。

`F     (`org-agenda-follow-mode')'
     Followモードをトグルする。Followモードではアジェンダバッファ上でカーソ
     ルを動かすと、Org-modeファイルの中で、別のウインドウ上で対応する場所を
     表示する。新しいアジェンダバッファの中でこのモードの初期設定値は、
     `org-agenda-start-with-follow-mode'変数で設定することができる。 

`C-c C-x b     (`org-agenda-tree-to-indirect-buffer')'
     　間接的なバッファの中で
     可憐とアイテムのサブツリー全体を表示する。数値付きの前置引数Nをつける
     と、第N階層まで階層を上がり、そのツリーを取得する。もしもNがマイナスな
     らば、多くの階層まで上がる。`C-u'という前置引数を付けた場合は、既に使
     われた間接的バッファは消去されない。

`C-c C-o     (`org-agenda-open-link')'
     　エントリーの中にあるリンクをフォローす
     る。この機能は、参照されているOrg-modeのノードに属しているテキストの中
     に含まれているいくつかのリンクの中から選択するという機能を提供する。も
     しもリンクが1つしかない場合は、選択画面を表示せずに、そこにリンクを貼る。

Change display
..............

`o'
     他のウインドウを削除します。 

`v d  or short  d     (`org-aganda-day-view')'
`v w  or short  w     (`org-aganda-day-view')'
`v m     (`org-agenda-month-view')'
`v y     (`org-agenda-month-year')'
`v SPC     (`org-agenda-reset-view')'
     日／週／月／年のビューを切り替えます。日または週にビューを切り替えたと
     きは、この設定は、それに続くアジェンダの更新ついてのデフォルトの設定と
     なります。月および年のビューは、作成するために時間を要するので、デフォ
     ルトとはしていません。数字の付いた前置引数をつけると、その年、ISOの週
     、月、年の指定した日に直接ジャンプします。例えば`32 d'と書いたときは2
     月1日、`9 w'と書いたらISOの週番号が9を指します。日、週あるいは月のビュ
     ーを設定したときは、1年は同様に前置引数の中でコード化されます。例えば
     、`200712 w'と書いたときは2007年の第12週にジャンプするでしょう。もしも
     そのような年の指定を、1桁もしくは2桁の数字で行いたいたときは、1938年か
     ら2037年の間に位置づけられます。`v <SPC>'によって、`org-agenda-span'で
     の設定をリセットすることができます。

`f     (`org-agenda-later')'
     　時間を前の日 付の表示へと遡ります。

`.     (`org-agenda-goto-today')'
     　今日へ移動します。 

`j     (`org-agenda-goto-date')'
     　日付の選択画面でその日に移動します。 

`J     (`org-agenda-clock-goto')'
     　アジェンダバッファの中で現在時間を計測中の タスクに移動します。

`D     (`org-agenda-toggle-diary')'
     　日記のエントリーに含 めるかどうかトグルします。参照 *note
     Weekly/daily agenda::.

`v l  or short  l     (`org-agenda-log-mode')'
     Logbook modeにするかどうかをトグルします。Logbook modeの中では、ログの
     取得中に(変数
     `org-log-done')DONEと印が付けられたエントリーが、その日の時刻を持って
     いるエントリーとして、アジェンダの中に表示されます。
     `org-agenda-log-mode-items'変数を用いてlogモードに含まれるエントリーの
     タイプを設定することができます。`C-u'という前置引数をつけて呼び出すと
     、状態の変化を含め、すべてのおこりうるlogbookのエントリーを表示できる
     でしょう。`C-u C-u'という2つの前置引数をつけて呼び出すと、ログの情報の
     みが表示され、それ以外は表示されません。`v L'は、`C-u v l'と等価です。 

`v [  or short  [     (`org-agenda-manipulate-query-add')'
     　現在のビューに、不活性のタイ
     ムスタンプを含めます。週／日のアジェンダとタイムラインビューのみです。 

`v a     (`org-agenda-archives-mode')'
`v A     (`org-agenda-archives-mode 'files')'
     　
     Archivesモードをトグルします。Archivesモードでは、`ARCHIVED'と印された
     ツリーもまたアジェンダを作成するときにスキャンされます。大文字の`A'を
     使用したときは、全てのアーカイブファイルを含みます。archives
     modeから出るためには、再度`v a'を押してください。 

`v R  or short  R     (`org-agenda-clockreport-mode')'
     Clockreportモードをトグルします。Clockreportモードでは、日／週のアジェ
     ンダは、時間軸のための時刻のついた表を表示し、カレントのアジェンダビュ
     ーでカバーされる範囲をファイルします。新しいアジェンダバッファの中で、
     このモードの初期設定は、`org-agenda-start-with-clockreport-mode'変数で
     設定することができます。このモードをトグル(すなわち `C-u
     R')している時に、前置引数を使用することで、アジェンダフィルター
     (1)によって隠されているエントリーからの情報を表示しないでしょう。 

`v E  or short  E     (`org-agenda-entry-text-mode')'
     entry text modeをトグルします。entry text
     modeでは、アジェンダ行によって参照されているOrg-modeのアウトラインのノ
     ードから、多数の行が、その行の下に表示されるでしょう。最大の行数は、
     `org-agenda-entry-text-maxlines'変数で指定します。数値付きの前置引数を
     付けて、このコマンドを呼び出すと、前置引数の値の数によって、即座に修正
     されます。

`G     (`org-agenda-toggle-time-grid')'
     時間のグリッドの表示をトグルします。`org-agenda-use-time-grid'と
     `org-agenda-time-grid'変数を参照してください。

`r     (`org-agenda-rodo')'
     　ア
     ジェンダバッファを再構築する。例えば、`S-<left>'と`S-<right>'を使って
     、アイテムのタイムスタンプを改修したあと、その変更を反映するために。そ
     のバッファがグローバルなTODOリストの場合は、指定したTODOキーワードを選
     択できるリストを作成するために、前置引数を解釈します。 

`g     (`org-agenda-rodo')'
     　カレントのEmacsのセッションにおいて、すべての
     Org-modeのバッファを保存します。あわせてIDの場所も。 

`C-c C-x C-c     (`org-agenda-columns')'
     アジェンダバッファの中でカラムビュー(*note Column
     view::)を作成します。カラ
     ムビューのフォーマットは、その時点のエントリーから作成され、あるいは(
     もしも、その時点でエントリーが存在しないなら)、アジェンダビューの最初
     のエントリーから作成されます。そのエントリーのためのフォーマットが何で
     あれ、(プロパティーから、`#+COLUMNS'という行から、あるいは
     `org-columns-default-format'変数のデフォルトから作成された)オリジナル
     のバッファに存在しているエントリーのフォーマットがアジェンダで使用されます。

`C-c C-x >     (`org-agenda-remove-restriction-lock')'
     　もしもファイルまたはサ
     ブツリーをその時点で制限しているならば、アジェンダをロックする制限を取
     り除きます。 (*note Agenda files::).

Secondary filtering and query editing
.....................................

`/     (`org-agenda-filter-by-tag')'
     タグおよび（または）工数の見積りに対して、カレントのアジェンダビューに
     フィルターをかけます。これとカスタムなアジェンダコマンドとの間の差異は
     、このフィルターが非常に早いということです。このため、あなたは、アジェ
     ンダ（注１）を再表示することなく、異なるフィルターの間を素早く切り替え
     ることができます。(2)

     タグ選択の文字を入力しましょう。<SPC>はタグの全てを意味しています。入
     力部分で<TAB>を押すと、選択するタグの補完機能を使用できます(すべてのタ
     グに選択用の文字が指定されているとはかぎりません)。そして、そのコマン
     ドは、このタグを含んでいないか継承していないエントリーを全て隠します。
     前置引数をつけて呼び出した場合は、そのタグを持っているエントリーを削除
     さえしてしまいます。入力部で2番目の`/'はフィルターを終了し、隠されてい
     るエントリーを再度出現させます。もしも最初に入力したキーが、`+'または
     `-'ならば、前のフィルターは、選択された新たなタグの要求あるいは禁止に
     応じて、幅を狭くします。`/'の後に、`+'あるいは`-'を入力する代わりに、
     `\' コマンドを即座に使用することもできます。

     工数見積のフィルターをかけるために、予め認められている汎用的な工数を設
     定すべきです。例えば
          (setq org-global-properties
              '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))
     あなたは、`<'、`>'および`='のひとつの操作を最初に入力することで、工数
     のためのフィルターをかけることができます。それから、あらかじめ認められ
     た値のリストの中で、工数見積りのインデックスの数字を入力します。そこで
     は`0'は１０番目の値を意味します。フィルターは選択された値よりも、以下
     、イコール、以上であるかによって限定されます。もしも0-9のキーがタグへ
     のアクセスキーとして使用されていないならば、単純にあなたは操作コマンド
     を利用することなく、直接インデックスとなる数字を入力するだけです。この
     場合`<'が仮定されます。操作のアプリケーションのために、定義された工数
     がないエントリーでは、`org-sort-agenda-noeffort-is-high'変数の値に従っ
     て取り扱われます。工数の定義のないタスクにフィルターをかけるには、`?'
     を操作の値として入力します。

     Org-modeはまた、コンテクストに対応したタグのフィルターを自動的にサポー
     トしています。もしも、`org-agenda-auto-exclude-function'変数の値が、ユ
     ーザが定義した機能に設定されているときは、その機能によって、どのような
     タグがアジェンダから自動的に排除されるかを決定します。一度この機能が設
     定されると、それによって、`/'コマンドは、`RET'
     をサブのオプションキーとして受け付け、自動的に排除ロジックを走らせます
     。例えば、いってみれば、ネットワークへのアクセスを必要とするタスクを定
     義するために`Net'というタグ、街での用事のために`Errand'というタグ、電
     話を掛けなければならないときに`Call'というタグを使用しているとします。
     あなたは、インターネットを利用できるかどうか、仕事時間外にあるかどうか
     、このような状況に基づいて、これらのタグを自動的に排除することができる
     のです。

          (defun org-my-auto-exclude-function (tag)
            (and (cond
                  ((string= tag "Net")
                   (/= 0 (call-process "/sbin/ping" nil nil nil
                                       "-c1" "-q" "-t1" "mail.gnu.org")))
                  ((or (string= tag "Errand") (string= tag "Call"))
                   (let ((hour (nth 2 (decode-time))))
                     (or (< hour 8) (> hour 21)))))
                 (concat "-" tag)))

          (setq org-agenda-auto-exclude-function 'org-my-auto-exclude-function)

`\     (`org-agenda-filter-by-tag-refine')'
     追加の条件によってカレントのアジェ
     ンダフィルターをナローイングします。前置引数を用いてコマンドを呼び出し
     たときは、まさにタグがついているエントリー、あるいは工数の基準にまさに
     合致するエントリーを削除する。`/'コマンドのあとの最初のキーとして、
     `+'あるいは`-'を押すことで同様の効果を達成することができる。

`[ ] { }'

    in search view
          新しい検索の単語(`['と`]')、あるいは新しい正規表現(`{'と`}')をクエリ
          ー文字列に追加する。開いた角括弧／大括弧は、`+'という接頭辞のついたポ
          ジティブな検索用語を追加する。この検索用語は、必ずそのエントリーに発生
          ／合致しなければならないことを示す。閉じた角括弧／大括弧は、ネガティブ
          な検索用語を追加し、それは、選択されているエントリーの中で、絶対に発生
          ／合致しないということである。

Remote editing
..............

`0-9'
     Digit argument.  

`C-_     (`org-agenda-undo')'
     　外部の編集コマンドでの変更を元に戻す。この変更はアジ
     ェンダバッファと外部のバッファの両方を元に戻す。

`t     (`org-agenda-todo')'
     　アイテ
     ムのTODOのステータスを変更する。アジェンダファイルでもオリジナルのOrgファイ
     ルでも有効である。

`C-S-<right>     (`org-agenda-todo-nextset')'

`C-S-<left>     (`org-agenda-todo-previousset')'
     　次／前のTODOキーワードのセットへと 切り替える。

`C-k     (`org-agenda-kill')'
     オリジナルのOrgファイルの中で、そのアイテムが属しているサブツリー全体と共に
     、カレントのアジェンダアイテムを削除する。もしも外部ファイルの削除するテキス
     トが１行以上ならば、削除を行うには、ユーザーが指定する必要がある。
     `org-agenda-confirm-kill'変数を参照のこと。

`C-c C-w     (`org-agenda-refile')'
     　その 時点でそのエントリーを差し替える。 

`C-c C-x C-a  or short  a     (`org-agenda-archive-default-with-confirmation')'
     `org-archive-default-command'に設定されたデフォルトのアーカイブコマンドを使
     用して、その時点でエントリーに対応したサブツリーをアーカイブする。`a'キーを
     使用したときは、承認が必要である。

`C-c C-x a     (`org-agenda-toggle-archive-tag')'
     　カレントの見出しのためのARCHIVEタグをトグルする。 

`C-c C-x A     (`org-agenda-archive-to-archive-sibling')'
     　カレントエントリーに対応
     したサブツリーを、_アーカイブファイル_に移動する。 

`C-c C-x C-s  or short  $     (`org-agenda-archive')'
     　カレントの見出しに対応したサブツリーをア
     ーカイブする。これは、設定されたアーカイブの場所に、多くの場合それは異なるフ
     ァイルであるが、エントリーを移動することを意味している。 

`T     (`org-agenda-show-tags')'
     カレントアイテムと関連づけられたすべてのタグを表示する。もしも、あなたたが
     `org-agenda-show-inherited-tags'機能を停止しているにもかかわらず、依然として
     、たびたび見出しのすべてのタグを確認したいというときに役に立つ。 

`:     (`org-agenda-set-tags')'
     　カレントの見出しにタグを設定する。もしもアジェンダ
     の中にアクティブなリージョンがあるときは、そのリージョンの中ですべての見出し
     用としてタグを変更する。 

`,'
     カレントアイテムに優先順位を設定する。(`org-agenda-priority')　Org-modeは優
     先順位を表す文字を指示します。もしも、<SPC>を使って返答すると、優先順位のク
     ッキーがそのエントリーから取り除かれる。

`P     (`org-agenda-show-priority')'
     　カレン トアイテムの優先順位の重み付けを表示する。

`+  or  S-<up>     (`org-agenda-priority-up')'
     　カレントアイテムの優先順位を高くする。優先順位はオリジナルのバッファで変更
     される。しかしアジェンダ上では並び替えの更新は行われない。このためには、`r'
     キーを使用する。

`-  or  S-<down>     (`org-agenda-priority-down')'
     　カレントアイテムの優先順位を低くする。

`z  or  C-c C-z     (`org-agenda-add-note')'
     そのエントリーにのノートを追加する。このノートは記録され、ノートが置かれてい
     る状態を変更した同じ場所にファイルされる。`org-log-into-drawer'によって、こ
     れは引き出しの中に入る。

`C-c C-a     (`org-attach')'
     　すべてのコマンドの選択画面は、 付属するものに関連づけられる。

`C-c C-s     (`org-agenda-schedule')'
     　このアイテムを
     予約する。前置引数をつけると、予約のタイムスタンプが削除される。 

`C-c C-d     (`org-agenda-deadline')'
     　このアイテムにデッドラインを設定する。前置引
     数をつけるとデッドラインが削除される。

`k     (`org-agenda-action')'
     　カーソルの置か
     れた日付に選択されたアイテムの日付を設定するための、アジェンダのアクション。
     このコマンドはカレンダーでも動作する！コマンドは追加されたキーで入力する。
          m   その地点でアクションのためにエントリーにマークする。複数のエントリーに対
          しても可能である。
              Org-modeでは次を伴う`C-c C-x C-k'.
          d   その時点の日付でマークされたエントリーのデッドラインを設定する。
          s   その時点の日付でマークされたエントリーを予約する。
          r   デフォルトの日付としてカーソルの日付とともに`org-capture'を呼び出す。
     アジェンダを更新した後に、`r'を押すと、コマンドの効果を確認できる。 

`S-<right>     (`org-agenda-do-date-later')'
     　カレント行に関連づけられたタイムスタン
     プを１日先に変更する。数値付きの前置引数をつけると、その数字の日数分だけ先に
     変更する。例えば、`3 6 5
     S-<right>'と入力すると１年先に変更される。`C-u'とい
     う前置引数をつけると、１時間ずつ時間を変更する。もしもあなたが、同じコマンド
     を即座に繰り返したいときは、前置変数を付けなくても１時間単位で変化し続けるで
     しょう。二重の`C-u
     C-u'という前置引数をつけると、同様に分単位で変更される。
     オリジナルのOrg-modeファイルの中でタイムスタンプは変更されるが、その変更はア
     ジェンダバッファには直接は反映されない。バッファを更新するには、`r'または
     `g'を使用する。

`S-<left>     (`org-agenda-do-date-earlier')'
     　カレント行のに関連づけ られたタイムスタンプを1日過去に変更する。

`>     (`org-agenda-date-prompt')'
     　カレン
     ト行に関連づけられたタイムスタンプを変更する。`>'キーが選択される。というの
     は、私のキーボード上では`S-.'と同じだからである。

`I     (`org-agenda-clock-in')'
     　カ
     レントアイテムの時計をスタートする。もしもすでに時計が動いているのならば、ま
     ずそれが停止する。

`O     (`org-agenda-clock-out')'
     　すでにスタートした時計を停止する 。

`X     (`org-agenda-clock-cancel')'
     　カレントで動いている時計をキャンセルする。 

`J     (`org-agenda-clock-goto')'
     　別のウインドウの中の動いている時計にジャンプする 。

Bulk remote editing selected entries
....................................

`m     (`org-agenda-bulk-mark')'
     　大量のアクションについて、その時点でエントリーにマ
     ークをつける。前置引数を付けると、多くの連続したエントリーにマークをつける。 

`U     (`org-agenda-bulk-remove-all-marks')'
     　大量のアクションのマークを取り除く。 

`U     (`org-agenda-bulk-remove-all-marks')'
     　大量のアクションのためにマークがつけら
     れたエントリーのマークを取り除く。

`B     (`org-agenda-bulk-action')'
     　大量のアクショ
     ン。アジェンダの中ですべてのマークをつかられたエントリーについて実行する。こ
     の機能では、適用されるアクションを選択するために、別のキーを入力する。`B'に
     前置引数をつけると、`s'や`d'のコマンドをパスして、これらの特別なタイムスタン
     プをまとめて取り除く。
          r  １つのリフィル上のターゲットに入力しすべてのエントリーを移動する。そのエン
          トリーは
             アジェンダ上には表示されなくなる。再表示(`g')によって再度表示される。
          $  選択されているエントリーをすべてアーカイブする。
          A  エントリーをアーカイブし、それぞれを所定のアーカイブ先に移動する。
          t  TODOの状態を変更する。これはTODOキーワード1文字を入力し、そして
             選択されたエントリーすべての状態を変更する。それはブロックしているのを無視
          し
             ログのノートを抑え込んで（タイムスタンプは別です）。
          +  選択されたエントリーのすべてにタグを付加する。
          -  選択されたエントリーのすべてから、タグのひとつを削除する。
          s  すべてのアイテムに新しい日付で予約する。すでに予約がついていれば、日数分だ
          け
             日付を更新する。入力欄でプラスを２つつけて何かの数字を最初に打つことで。
             例えば、`++8d'とか`++2w'のように。
          S  N日を指定して、それぞれをリスケジュールする。Nは入力欄で指定する。前置引数

             (`C-u B S')をつけることで、平日のみに指定できる。
          d  指定した日をデッドラインとして設定する。

Calendar commands
.................

`c     (`org-agenda-goto-calendar')'
     　Emacsのカレンダーを開き、アジェンダのカーソル
     の置かれている日付に移動します。

`c     (`org-calendar-goto-agenda')'
     　すでにカレンダ
     ーの中にあるときは、カーソルの置かれている日付で計算し、Org-modeのアジェンダ
     を表示します。 

`i     (`org-agenda-diary-entry')'
     カーソルの置かれている日付および（ブロックエントリーでは）マークされた日付を
     使って、新しいエントリーを日記に書き込みます。この機能ではEmacsの日記ファイ
     ル(3)に追加することになります。ある意味では、カレンダーの
     `i'コマンドと似た機能です。日記ファイルは別のウインドウにポップアップし、そ
     こでエントリーを書き加えることができます。

     もしもOrg-modeファイルに`org-agenda-diary-file'
     を指定したならば、Org-modeではそのファイルの中に（Org-modeの構文を使って）日
     記の代わりに、エントリーを作成することができます。ほとんどのエントリーは、日
     付を元にしたアウトラインのツリーの中に記述されており、あとで過去の月／年の中
     から予定をアーカイブするのを簡単にします。そのツリーは、`DATE_TREE'属性か、
     最上位のエントリーとして、年という属性を持ったエントリーのもとに構築されてい
     ます。Emacsでエントリーのテキストを入力するようプロンプトが表示されるでしょ
     う。もしもあなたがそれを指示するならば、さらなる連携なく、
     `org-agenda-diary-file'にそのエントリーを作成することになるでしょう。テキス
     トを入力することなく、その入力欄で直接<RET>を入力したら、そのターゲットとな
     るファイルがその場でのエントリーを終了させ、別のウインドウが表示されるでしょ
     う。`k r'コマンドを参照してください。

`M     (`org-agenda-phases-of-moon')'
     　その日を 中心として3ヶ月間の月齢を表示する。

`S     (`org-agenda-sunrise-sunset')'
     　日の出と日
     の入りを表示する。地理上の場所によって、カレンダーの変数が設定される。Emacs
     のcalendarの章を参照のこと。

`C     (`org-agenda-convert-date')'
     　カーソルの置かれて
     いる日付によって、多くの他の文化的・歴史的なカレンダーに変換する。 

`H     (`org-agenda-holidays')'
     　カーソルのある日付を中心に3ヶ月間の祝祭日を表示する 。

`M-x org-export-icalendar-combine-agenda-files'
     すべてのアジェンダファイルからエントリーを含んだiCalendar形式のファイルにエ
     クスポートする。これはグローバルに利用できるコマンドで、そしてまたアジェンダ
     メニューの中で利用できるコマンドです。

Exporting to a file
...................

`C-x C-w     (`org-write-agenda')'
     アジェンダビューを1つのファイルに書き出します。選択したファイル名の拡張子に
     従って、そのビューは、HTML (拡張子が`.html'または`.htm')、Postscript
     (拡張子`.ps')、PDF
     (拡張子`.pdf')、そしてプレーンテキスト(その他の拡張子）などにエクスポートさ
     れます。`C-u'という前置引数を用いてコマンドを呼び出したならば、即座に新しく
     作成されたファイルが開きます。エクスポートの間に使用されている`ps-print'およ
     び`htmlize'のためのオプションを設定するために、
     `org-agenda-exporter-settings'変数を使用します。

Quit and Exit
.............

     　

`q     (`org-agenda-quit')'
     　アジェンダを終了し、アジェンダバッファ を削除しますｓ。 

`x     (`org-agenda-exit')'
     　アジェンダを終了し、アジェンダバッファとアジェンダを編
     集するためにEmacsで読み込まれたすべてのバッファを削除する。Org-modeファイル
     を読み込むためにユーザーによって作成されたバッファは削除されない。

   ---------- Footnotes ----------

   (1) ここではタグフィルターだけが有効です。工数のフィルターは無視されます
。

   (2) カスタムコマンドによって、オプションとして
`org-agenda-filter-preset'変数と結びつけることで、フィルターを事前にセ
ットすることができます。このフィルターは、ビューに適用されます。そして
、リフレッシュや２番目のフィルターを通して、基本的なフィルターとして存
続します。このフィルターは、アジェンダのブロックの中で、アジェンダビュ
ー全体のグローバルなプロパティです。この設定を行うためには、個別のブロ
ックのセクションではなく、グローバルオプションのセクションで行います。

   (3)
`org-agenda-include-diary'が設定されているときは、このファイルはアジェン
ダ用に解析されます。


File: org-ja,  Node: Custom agenda views,  Next: Exporting Agenda Views,  Prev: Agenda commands,  Up: Agenda Views

10.6 Custom agenda views
========================

カスタムアジェンダコマンドは２つの目的を提供する。ひとつはTODOとタグの検索を
使用して、保存と素早く頻繁にアクセスするため。もうひとつは、特別に合成したア
ジェンダバッファを作成するため。カスタムなアジェンダコマンドはデフォルトのコ
マンドと同様に、コマンド選択画面ディスパッチャー(*note Agenda
dispatcher::)を通し て利用できる。

* Menu:

* Storing searches::         一度入力し、何度も使う
* Block agenda::             必要な事項をひとつのバッファに集める
* Setting Options::          ルールを変更する


File: org-ja,  Node: Storing searches,  Next: Block agenda,  Prev: Custom agenda views,  Up: Custom agenda views

10.6.1 Storing searches
-----------------------

カスタム検索の最初のアプリケーションは、よく使われる検索式のためのキーボード
ショートカットを定義することです。それはアジェンダバッファの作成、またはツリ
ーの抽出（後者は言うまでもなくカレントバッファのみをカバーする）のどちらに対
してでも。 カスタムコマンドは、`org-agenda-custom-commands'変数で設定されます。あなたは
この変数をカスタマイズできます。例えば、`C-c a C'というように。またあなたは
`.emacs'にEmacsのLispを記述して直接設定することもできます。以下に述べる例は
すべての適正な検索タイプを含んでいます。

     (setq org-agenda-custom-commands
           '(("w" todo "WAITING")
             ("W" todo-tree "WAITING")
             ("u" tags "+boss-urgent")
             ("v" tags-todo "+boss-urgent")
             ("U" tags-tree "+boss-urgent")
             ("f" occur-tree "\\<FIXME\\>")
             ("h" . "HOME+Name tags searches") ; description for "h" prefix
             ("hl" tags "+home+Lisa")
             ("hp" tags "+home+Peter")
             ("hk" tags "+home+Kim")))

それぞれのエントリーの頭文字は、コマンドにアクセスするために、コマンド選択画
面を呼び出す`C-c a'というコマンドの後に、入力しなければならないキーを定義し
ます。通常、これは1文字をあてますが、もしもあなたが似たようなコマンドをたく
さん持っていたら、あなたは2文字の組合せで定義することができます。その場合、
いくつかの組合せでは最初の文字が同じものとなり、前置引数(1).と同じように提供されます。2番目のパラメーターは検
索の種類を示し、マッチさせるために使われる文字列や正規表現がそれに続きます。
上の例ではそれゆえ以下のように定義します。

`C-c a w'
     TODOのキーワードとして、`WAITING'となっているTODOエントリーのためのグ
     ローバルな検索として。す。

`C-c a W'
     同じような検索であるが、カレントバッファにのみ適用され、ツリーの抽出と
     して検索結果を表示する。

`C-c a u'
     `:urgent:'ではなく`:boss:'というタグがつけられた見出しのための、グロー
     バルなタグ検索を行う。

`C-c a v'
     `C-c a u'と同じ検索を行うが、TODOアイテムである見出しに対してのみ検索
     を行うという制限がある。

`C-c a U'
     `C-c a u'と同じ検索を行うが、カレントバッファに対してのみ検索を行い、
     結果をツリーの抽出として表示する。

`C-c a f'
     すべてのエントリーのうちで`FIXME'という言葉を含んでいるものを検索して
     ツリーの抽出を行う（くどいかもしれませんが、カレントバッファだけが対象
     です）。

`C-c a h'
     HOMEというタグ検索のためのコマンドの前置引数として、そこでは、タグ検索
     の追加として、一つの名前(Lisa、Peter、またはKim)を選択するために、あな
     たはさらに(`l'、`p'、または`k')というキーを追加入力する必要があります
     。

   ---------- Footnotes ----------

   (1) あなたは前置引数と
説明をつけて、コンソールのセルを挿入することで、前置引数のキーのための説明を
表示することができます。


File: org-ja,  Node: Block agenda,  Next: Setting Options,  Prev: Storing searches,  Up: Custom agenda views

10.6.2 Block agenda
-------------------

もう一つの可能性とは、アジェンダビューの構築です。そのビューは、_様々な_コマ
ンドの結果で構成されており、それぞれのコマンドはアジェンダバッファの中の１つ
のブロックを作成します。利用できるコマンドは（`C-c a a'を実行して作成された
）一日または週間アジェンダのための`agenda'、（`C-c a t'を実行して作成された
）グローバルなtodoリストのための`alltodo'、そして上で議論してきた`todo'、
`tags'、`tags-todo'などの検索コマンドに含まれています。２つの例を挙げます。

     (setq org-agenda-custom-commands
           '(("h" "Agenda and Home-related tasks"
              ((agenda "")
               (tags-todo "home")
               (tags "garden")))
             ("o" "Agenda and Office-related tasks"
              ((agenda "")
               (tags-todo "work")
               (tags "office")))))

これによって、家で精を出さなければならない用事に対するマルチブロックのビュー
を作成するために、`C-c a h'を定義します。アジェンダバッファには結果として、
その週の、`home'というタグが含まれているすべてのTODOアイテムと、`garden'とい
うタグがついたすべての行のためのアジェンダを含むことになります。最後に、
`C-c a o'というコマンドで、同様に、オフィスの作業についてのビューを得ること
ができます。


File: org-ja,  Node: Setting Options,  Prev: Block agenda,  Up: Custom agenda views

10.6.3 Setting options for custom commands
------------------------------------------

Org-modeはたくさんのアジェンダの構築や表示について調整する変数を含んでいます
。グローバルな変数では、カスタムコマンドも含めて、アジェンダの全てのコマンド
の動作を定義することができます。しかしながら、もしもあるひとつのカスタムビュ
ーについて、いくつかの設定を変更したいならば、それも可能です。オプションの設
定は変数名のリストに書き込むことが必要で、`org-agenda-custom-commands'の中に
、正しい位置に値を書き込む必要があります。例えば。

     (setq org-agenda-custom-commands
           '(("w" todo "WAITING"
              ((org-agenda-sorting-strategy '(priority-down))
               (org-agenda-prefix-format "  Mixed: ")))
             ("U" tags-tree "+boss-urgent"
              ((org-show-following-heading nil)
               (org-show-hierarchy-above nil)))
             ("N" search ""
              ((org-agenda-files '("~org/notes.org"))
               (org-agenda-text-search-extra-files nil)))))

こう書き込むことによって、`C-c a w'というコマンドは、優先順位によってのみ収
集したエントリーを並べ替えるでしょう。そのエントリーのカテゴリを設定する変わ
りに、例えば` Mixed: 'という文字をprefixの形で書くことで変更することができま
す。`C-c a U'というタグでツリーを抽出するコマンドは、この結果、超コンパクト
となるでしょう。なぜならば、検索に合致した項目の上の階層の見出しも、合致した
項目の見出しもどちらも表示されないからです。`C-c a N'というコマンドは、１つ
のファイルに制限されたテキスト検索を実行します。

   ブロックアジェンダを作成するコマンドセットのために、
`org-agenda-custom-commands'ではオプションの設定用に２つの別の場所を用意して
います。その設定の中にたったひとつのコマンドに有効なオプションを付け加えるこ
とも、その設定の中にすべてのコマンドに有効なオプションを付け加えることもでき
ます。前者のオプションは１つのコマンドエントリーを付け加える。後者のオプショ
ンは、コマンドエントリーのリストを書き込むことが必要です。ブロックアジェンダ
の例に戻ると(*note Block agenda::)、`C-c a
h'というコマンドで、並べ替えの順序を優
先順位の降順`priority-down'に変更することができますし、その中で「GARDEN」と
いうタグのついたものについては反対の順序、すなわち優先順位の昇順
`priority-up'に並べ替えることができるでしょう。このことは以下のように記述で
きます。

     (setq org-agenda-custom-commands
           '(("h" "Agenda and Home-related tasks"
              ((agenda)
               (tags-todo "home")
               (tags "garden"
                     ((org-agenda-sorting-strategy '(priority-up)))))
              ((org-agenda-sorting-strategy '(priority-down))))
             ("o" "Agenda and Office-related tasks"
              ((agenda)
               (tags-todo "work")
               (tags "office")))))

おわかりだと思いますが、変数とカッコで囲んでいる設定はやや複雑なところがあり
ます。わかりにくいときは、カスタマイズのインターフェースとしてこの変数を設定
してください。これはカスタマイズの構造を完全にサポートしています。注意しなけ
ればならないのは、このインターフェースでオプションを設定するときに、_変数_は
、Lispによる表現をとっているということです。そのため、もしもその変数が１つの
文字ならば、あなた自身でその変数の値に「”（ダブルクォート）」で囲む必要があ
るということです。


File: org-ja,  Node: Exporting Agenda Views,  Next: Agenda column view,  Prev: Custom agenda views,  Up: Agenda Views

10.7 Exporting Agenda Views
===========================

もしもあなたが自分のコンピュータから離れているときは、いくつかのアジェンダの
バージョンを印刷して持ち歩くことは大変役に立ちます。Org-modeはカスタムアジェ
ンダビューをプレーンなテキスト、HTML(1)、Postscript、PDF(2)、iCalenderファイルとしてエキスポートすることができます。もしも、ときどき
このようなことを実行するのならばコマンドを使用しましょう。

`C-x C-w     (`org-write-agenda')'
     アジェンダビューを１つのファイルに書き出します。選択したファイル名の拡
     張子により、そのビューはHTML（拡張子が`.html'または`.htm'）、
     Postscript（拡張子が`.ps'）、iCalendar（拡張子が`.ics'）、あるいはプレ
     ーンなテキスト（何かほかの拡張子）としてエクスポートされます。エクスポ
     ートの間に、`ps-print'のため、および`htmlize'のためにオプションを設定
     するには、`org-agenda-exporter-settings'変数を使用します。例えば

          (setq org-agenda-exporter-settings
                '((ps-number-of-columns 2)
                  (ps-landscape-mode t)
                  (org-agenda-add-entry-text-maxlines 5)
                  (htmlize-output-type 'css)))

もしも、あなたがアジェンダビューをたびたびエクスポートする必要があるのならば
、アウトプットのファイルの名前(3)のリストに、いくつかのカスタムなアジェンダのコマンドを
関連づけることができます。ここに一つの例があります。最初のものはアジェンダと
グローバルなTODOリストに対するカスタムなコマンドを定義しており、それらをエク
スポートするたくさんのファイルと一緒になっています。それから２つのブロックア
ジェンダコマンドを定義し、同様にそれらのためのファイル名を指定しています。フ
ァイル名は、現在作業しているディレクトリに対して相対パスにすることも絶対パス
にすることもできます。

     (setq org-agenda-custom-commands
           '(("X" agenda "" nil ("agenda.html" "agenda.ps"))
             ("Y" alltodo "" nil ("todo.html" "todo.txt" "todo.ps"))
             ("h" "Agenda and Home-related tasks"
              ((agenda "")
               (tags-todo "home")
               (tags "garden"))
              nil
              ("~/views/home.html"))
             ("o" "Agenda and Office-related tasks"
              ((agenda)
               (tags-todo "work")
               (tags "office"))
              nil
              ("~/views/office.ps" "~/calendars/office.ics"))))

ファイル名の拡張子がエクスポートのタイプを決定します。もしも拡張子が`.html'
ならば、Org-modeは`htmlize.el'パッケージを使用し、バッファをHTMLに変換し、そ
のファイル名で保存します。もしも拡張子が`.ps'ならば、
`ps-print-buffer-with-faces'がPostscriptの出力をするために使用されます。もし
も拡張子が`.ics'ならば、iCalendarのエクスポートは、アジェンダを構成している
すべてのファイルにわたってエクスポートを実行し、現在アジェンダの中ではリスト
化されたエントリーのエクスポートに限定されます。ほかの拡張子がついた場合は、
プレーンなASCIIテキストファイルが作成されます。

エクスポートファイルは、非常に負荷が高いので、これらのコマンドの一つを相互に
影響するように使用している時は、出力されません。そのかわり、1ステップで_すべ
て_の指定されたファイルを出力する特別なコマンドが用意されています。

`C-c a e     (`org-store-agenda-views')'
     　アジェンダに関連するエクスポートファ
     イル名を持つすべてのアジェンダビューをエクスポートします。

あなたは、エクスポートコマンドのためのオプションの設定をするために。カスタム
アジェンダコマンドのオプションのセクションを使用することができます。例えば、

     (setq org-agenda-custom-commands
           '(("X" agenda ""
              ((ps-number-of-columns 2)
               (ps-landscape-mode t)
               (org-agenda-prefix-format " [ ] ")
               (org-agenda-with-colors nil)
               (org-agenda-remove-tags t))
              ("theagenda.ps"))))

このコマンドは、Postscriptのエクスポートのために、２つのオプションを設定しま
す。横長のフォーマットで２段のプリントを作成するためです。出力されたページは
、２つにカットして、紙のアジェンダとして使えるようになります。もうひとつの設
定は、行頭のカテゴリーとスケジューリング情報を省き、その代わりにチェックのつ
いてないチェックボックスの項目となるようにアジェンダを修正します。私たちは各
行をコンパクトに表示するためにタグを省略したり、白黒プリンタのためにカラーを
使わない用にすることもできます。`org-agenda-exporter-settings'の中で指定する
設定もできますが、`org-agenda-custom-commands'での設定が優先します。

コマンドラインで次のような設定を使用することができます。
     emacs -f org-batch-store-agenda-views -kill
   また、いくつかのパラメーター(4)を修正する必要があります。
     emacs -eval '(org-batch-store-agenda-views                      \
                   org-agenda-span month                             \
                   org-agenda-start-day "2007-11-01"                 \
                   org-agenda-include-diary nil                      \
                   org-agenda-files (quote ("~/org/project.org")))'  \
           -kill
どちらも`~/org/project.org'のファイルを対象として、日記のエントリーは除かれ
、30日以内に限定したアジェンダビューを作成します。

あなたは、他のプログラムで将来の進行過程を認める方法で、アジェンダの情報を絞
り込むことができます。詳細は*note Extracting agenda
information::,のノートの情報を 参照してください。

   ---------- Footnotes ----------

   (1) あなたはHrvoje Niksic氏の`htmlize.el'を
インストールする必要があります。

   (2) PDFの出力を作成するために
は、Ghostscriptの`ps2pdf'ユーティリティがシステムにインストールされている必
要があります。pdfファイルを選択するとポストスクリプトファイルも作成されます
。

   (3) もしもあなたが週間アジェンダやグローバルな
TODOリストなどのような標準的なビューを保存したいならば、ファイル名を指定する
ことができるようにするために、それらのビューのためにカスタムなコマンドを定義
する必要があります。

   (4) 引用の方法はあなたの使用しているシステムに依存
します。事例用のFAQを確認してください。


File: org-ja,  Node: Agenda column view,  Prev: Exporting Agenda Views,  Up: Agenda Views

10.8 Using column view in the agenda
====================================

カラムビュー(*note Column
view::)は、Org-modeファイルの階層構造の中に組み込まれて
いる属性を見たり編集したりするために通常は使われます。エントリーがある評価基
準で収集されているアジェンダから、カラムビューを使用することは大変便利です。

`C-c C-x C-c     (`org-agenda-columns')'
     　アジェンダの中でカラムビューに切り替 えます。

この属性がどのようなものか理解するために、アジェンダのエントリーはもはや適切
なアウトラインの環境ではなくなることを理解することが重要です。これによって以
下のようなことが生じます。

  1. Org-modeでは、どの`COLUMNS'のフォーマットを使用するか、決定する必要が
     あります。アジェンダの中のエントリーは、異なるファイルから集められると
     いうことと、ファイルが異なると`COLUMNS'のフォーマットも異なるというこ
     とから、このことは些細な問題であるとはいえないのです。Org-modeは最初に
     、`org-overriding-columns-format'変数がカレントで設定されているかどう
     か、またそこからフォーマットを取り出すことができるかどうかチェックしま
     す。一方、アジェンダの最初のアイテムに関連したフォーマットを使用するか
     、もしもそのアイテムが特別なフォーマット（属性もしくはファイルの中で定
     義された）を持たないならば、`org-columns-default-format'を使用します。

  2. もしも、どれかカラムに要約形式(*note Column
     attributes::)が定義されているな
     らば、アジェンダでカラムビューに切り替えるときに、すべての関連するアジ
     ェンダファイルを確認して、この属性の計算の更新を確実に行います。このこ
     とは、特別な`CLOCKSUM'の属性が真であると設定されているということです。
     Org-modeはアジェンダの中で表示された値を合計するでしょう。一日／週間ア
     ジェンダの中で、合計は1日をカバーしています。他のビューでは、ブロック
     全体をカバーするのです。アジェンダでは同じエントリーを_２度_表示したり
     （例えばスケジュールと期限というように）、同じ階層（例えば_親_と_子_）
     から_２つ_のエントリーを表示したりするかもしれない、ということを理解す
     ることは重要なことです。これらの場合、アジェンダの中での要約は、いくつ
     かの値が二重にカウントされるという間違った結果を導く可能性があります。

  3. アジェンダの中のカラムビューが、`CLOCKSUM'を表示するときは、このアイテ
     ムのためにいつでも時間計測全体に対応します。そのため1日/週間アジェンダ
     において、カラムビューでリスト化された時間合計は、カレントのビューの外
     側の時間から発生することになるかもしれません。この機能によって、あるタ
     スクについて、計画された総工数を1つのカラムにリストにして、その値を比
     較することができるので、優位性を持ちます。この機能はアジェンダのカラム
     ビューにおける重要なアプリケーションのひとつです。もしもあなたが表示さ
     れている期間の中の作業時間についての情報を得たいならば、clock table
     mode（`R'をアジェンダの中で入力する）を使用してください。


File: org-ja,  Node: Markup,  Next: Exporting,  Prev: Agenda Views,  Up: Top

11 Markup for rich export
*************************

Org-modeの文書をエクスポートする時、エクスポート機能は文書の構造をできるだけ
正確に反映しようとします。HTMLやLaTeX、DocBook、その他のリッチフォーマット等
のエクスポートの対象について、Org-modeは文書をリッチエクスポートに変換するル
ールを持ちます。このセクションはOrg-modeんバッファで使われるマークアップのル
ールについて説明します。

* Menu:

* Structural markup elements::  エクスポートでわかる基本的な構造
* Images and tables::        テーブルと画像は含まれているだろう
* Literal examples::         特別なフォーマットのためのソースコードの例
* Include files::            文書に別のファイルを添付する
* Index entries::            indexを作る
* Macro replacement::        複雑なアウトプットを作成するためにマクロを使用
する
* Embedded LaTeX::           LaTexはorg-modeの文書では自在に使用することがで
きる


File: org-ja,  Node: Structural markup elements,  Next: Images and tables,  Prev: Markup,  Up: Markup

11.1 Structural markup elements
===============================

* Menu:

* Document title::           どこからタイトルが取り出されるか
* Headings and sections::    文書の構造はエクスポートの設定で確認できる
* Table of contents::        コンテンツのテーブルの条件と場所
* Initial text::             最初の見出しより前に書かれた文
* Lists::                    Lists
* Paragraphs::               Paragraphs
* Footnote markup::          Footnotes
* Emphasis and monospace::   Bold, italic, etc.
* Horizontal rules::         線を作る
* コメント行::          何がエクスポートされないか


File: org-ja,  Node: Document title,  Next: Headings and sections,  Prev: Structural markup elements,  Up: Structural markup elements

Document title
--------------

エクスポートされた文書のタイトルは専用の行で設定されます。

     #+TITLE: これは文書のタイトルです。

もしこの行が存在しなければ、タイトルはバッファ中の最初の空でない、コメントで
ない行を用います。もしまだ何も存在していない、またはあなたが最初の見出しより
前のテキストをエクスポートをしないよう設定していたら、タイトルは拡張子無しの
ファイル名となります。

もしあなたがリージョンでマークしたサブツリーのみをエクスポートしているなら、
サブツリーの見出しは文書のタイトルとなるでしょう。もしサブツリーが
`EXPORT_TITLE'プロパティを持っているなら、そのプロパティの値が優先して用いら
れるでしょう。


File: org-ja,  Node: Headings and sections,  Next: Table of contents,  Prev: Document title,  Up: Structural markup elements

Headings and sections
---------------------

*note Document Structure::で説明されているような文書のアウトライン構造は
エクスポートされた文書のセクションの定義の基準を形成しています。しかしながら
、アウトライン構造はまた(例えば)タスクのリストとしても使われているので、最初
の3アウトラインレベルのみ見出しとして使われます。

     #+OPTIONS: H:4


File: org-ja,  Node: Table of contents,  Next: Initial text,  Prev: Headings and sections,  Up: Structural markup elements

Table of contents
-----------------

目次は通常ファイルの最初の見出しの前に直接挿入されます。もしあなたが異なる場
所に目次を挿入したいのなら、その場所に`[TABLE-OF-CONTENTS]'文字列を書いてく
ださい。目次の深さはデフォルトでは見出しのレベルの数と同じですが、
`org-export-with-toc'変数を設定するか、ファイルに以下のように書くことによっ
て、あなたはこれより小さな値に変更することも、目次を完全に表示させないように
することも可能です。

     #+OPTIONS: toc:2          (目次に表示するレベルを2までとする)
     #+OPTIONS: toc:nil        (目次を表示しない)


File: org-ja,  Node: Initial text,  Next: Lists,  Prev: Table of contents,  Up: Structural markup elements

最初の見出しより前のテキスト
------------------------------------------

Org-modeは通常最初の見出しの前にテキストをエクスポートし、最初の行を文書のタ
イトルにします。テキストは完全にマークアップされているでしょう。もしあなたが
HTMLやLaTeX、DocBookのような<リテラルを含めたい場合、独立したエクスポート機
構のセクションで説明されている特別な構造を使います。

多くの人々は内部リンクの設定のためとそのために異なる方法でエクスポートされた
最初の見出しの前のテキストを制御する最初の見出しの前に空白を使うことを好みま
す。あなたは`orgexport-skip-text-before-1st-heading'変数を`t'にすることで設
定することができます。ファイル中に設定する場合、あなたは`#+OPTIONS: skip:t'
とすることで同等の設定を行うことができます。

もし、あなたがまだ最初の見出しの前にテキストを置きたいのであれば、`#+TEXT'構
造を使います:

     #+OPTIONS: skip:t
     #+TEXT: このテキストは*最初の*見出しの前に置かれます
     #+TEXT: [TABLE-OF-CONTENTS]
     #+TEXT: このテキストは目次と最初の見出しの間に置かれます


File: org-ja,  Node: Lists,  Next: Paragraphs,  Prev: Initial text,  Up: Structural markup elements

Lists
-----

*note Plain
lists::で説明されているプレーンリストは、バックエンドのリストに変換さ
れます。多くのバックケンドがサポートしているのは記号付きリスト、番号付きリス
ト、見出し付きリストです。


File: org-ja,  Node: Paragraphs,  Next: Footnote markup,  Prev: Lists,  Up: Structural markup elements

段落、改行、引用
------------------------

段落は最低1つの空白行で区切られます。もしあなたが強制的に段落の中で改行しな
いなら、`\\'を行の末尾に書いてください。

リージョンで改行を保つためには、しかしそうでなければ通常のフォーマットが使わ
れるなら、あなたはフォーマット技法として使われるこの構文を使うことができます
。

     #+BEGIN_VERSE
      Great clouds overhead
      Tiny black birds rise and fall
      Snow covers Emacs

          -- AlexSchroeder
     #+END_VERSE

別の文書から一節を引用する時、段落の左右の余白を空けることが慣習となっていま
す。あなたは以下を用いることで引用をOrg-modeの文書に含めることができます:

     #+BEGIN_QUOTE
     Everything should be made as simple as possible,
     but not any simpler -- Albert Einstein
     #+END_QUOTE

   もしあなたがテキストを中央寄せにしたいなら、以下を使うことができます: 
     #+BEGIN_CENTER
     Everything should be made as simple as possible, \\
     but not any simpler
     #+END_CENTER


File: org-ja,  Node: Footnote markup,  Next: Emphasis and monospace,  Prev: Paragraphs,  Up: Structural markup elements

Footnote markup
---------------

脚注は*note
Footnotes::で説明されたように定義されていて、全てのバックエンドにエク
スポートされます。Org-modeは同じノートに対しての複数の参照と異なるバックエン
ドをサポートします。


File: org-ja,  Node: Emphasis and monospace,  Next: Horizontal rules,  Prev: Footnote markup,  Up: Structural markup elements

Emphasis and monospace
----------------------

あなたは*bold*と/italic/、_underlined_、`=code='、`~verbatim~'、そして必要な
ら`+strile-through+'を単語に適用することができます。codeとverbatim文字列の中
のテキストはOrg-modeの明確な構文ではありません;
それはverbatimにエクスポートされます。


File: org-ja,  Node: Horizontal rules,  Next: コメント行,  Prev: Emphasis and monospace,  Up: Structural markup elements

Horizontal rules
----------------

少なくとも5文字のダッシュ文字のみで行成される線は水平線(HTMLでは`<hr/>'、
LaTeXでは`\hrule')にエクスポートされます。


File: org-ja,  Node: コメント行,  Prev: Horizontal rules,  Up: Structural markup elements

コメント行
---------------

行頭の文字が`#'から始まる行はコメントとして扱われ、エクスポートされません。
もしあなたがコメント行をインデントしたいのであれば、`#+'から行を開始してくだ
さい。`COMMENT'ワードを持つサブツリーは、サブツリー全体がエクスポートされま
せん。最後に、`#+BEGIN_COMMENT'から`END_COMMENT'で囲まれた範囲はエクスポート
されません。

`C-c ;'
     エントリー先頭のCOMMENTキーワードをトグルします。


File: org-ja,  Node: Images and tables,  Next: Literal examples,  Prev: Structural markup elements,  Up: Markup

11.2 画像と表
=================

Org-modeネイティブなテーブル(*note
Tables::)と`table.el'パッケージを用いたテーブル
の両方が適切にエクスポートされます。Org-modeの表では、最初の水平線の前の行が
表のヘッダ行となります。あなたはキャプションと相互参照の指定を表の直前に、参
照のための`\ref{tab:basic-data}'オブジェクトをテキストのどこかに書くことが
できます。

     #+CAPTION: これは次の表(またはリンク)のキャプションです
     #+LABEL:   tbl:basic-data
        | ... | ...|
        |-----|----|

多くのバックエンド(HTML、LaTeX、DocBook)はエクスポートされた文書の中に直接画
像を挿入することができまる。もし、例えば、`[[./img/a.jpg]]'のような説明部分
を持たない画像ファイルへのリンクがあるなら、Org-modeは画像の挿入を行います。
もしあなたが画像のキャプションや内部相互参照のラベルを定義したいなら、以下の
ように`#+CAPTION'と`#+LABEL'をリンクの前に書きます:

     #+CAPTION: これは次の画像(または表)のリンクのキャプションです。
     #+LABEL:   fig:SED-HR4049
     [[./img/a.jpg]]

あなたは画像に対する追加要素を定義するかもしれません。これはバックエンドの仕
様なので、さらに情報が必要なら独立したバックエンドについてのセクションを見て
ください。

   *Note the discussion of image links: Handling links.


File: org-ja,  Node: Literal examples,  Next: Include files,  Prev: Images and tables,  Up: Markup

11.3 Literal examples
=====================

あなたはマークアップに依存しないリテラルの例を含めることができます。そのよう
な例に等幅のタイプセットがあり、それはソースコードやそれに似た例向きです。 

     #+BEGIN_EXAMPLE
     テキストファイルからの例。
     #+END_EXAMPLE

そのようなブロックはインデントされたテキストをうまく整列させるためと、特にプ
レーンリスト構造(*Note Plain
lists::.)のためにインデントされるでしょう。小さな例を
使う時、それを簡単にするために、あなたはコロンとそれに続く空白からなる例の行
を使うことができる。それらはコロンの前に空白を追加することもできます。

     ここに例を書きます
        : テキストファイルからの例

もし例がソースコードなら、もしくはEmacsでフォントロックによりマークアップさ
れたテキストなら、あなたはEmacsバッファ(1)を要塞化する
ように要請することができます。あなたが例に色付けするために使うメジャーモード
の名前を指定することが必要な時、`src'ブロックを使います: 

     #+BEGIN_SRC emacs-lisp
       (defun org-xor (a b)
          "Exclusive or."
          (if a (not b) b))
     #+END_SRC

`example'と`src'スニペットでは、あなたは`BEGIN'の行の最後に`-n'を追加するこ
とで、例の行番号を表示することができます。もしあなたが`+n'とすると、前のスニ
ペットから現在のものに番号が引き継がれます。リテラルの例で、Org-modeは
`(ref:name)'をラベルとして解釈し、`[[(name)]]'のような特別なリンクによりそこ
を参照することができます(i.e.
参照名は1つの括弧に囲まれています)。HTMLでは、対応するコード行をマウスオーバ
ーすると自動的にハイライト表示になり、少しクールです。

   また、ソースコード(2)からラベルを
消去するかどうかの切り替えのために`-r'を追加することもできます。`-n'で切り替
えると、リンクされるそれらのリファレンスはコードリスティングの行番号によって
ラベルを付けられ、そうでなければ括弧無しのラベルにリンクされます。

     #+BEGIN_SRC emacs-lisp -n -r
     (save-excursion                  (ref:sc)
        (goto-char (point-min))       (ref:jump)
     #+END_SRC
     In line [[(sc)]] we remember the current position.  [[(jump)][Line (jump)]]
     jumps to point-min.

   もし、ラベルの構文が言語の構文と衝突した場合、`-l'を使うことで
`#+BEGIN_SRC pascal -n -r -l "((%s))"'のようにフォーマットを変更できます。
`org-coderef-label-format'変数を見てください。

   HTMLはエクスポート時にテキストエリア,*Note Text areas in HTML
export::.とすること ができます

`C-c ''
     カーソル位置のソースコード例をそのネイティブモードで編集します。これは
     ソースコードを一時バッファに表示し、切り替えることで働きます。あなたは
     `C-c ''をもう一度押すことで編集を終了します(3)。
     編集されたバージョンはOrg-modeバッファ上の古いバージョンを置き換えます
     。固定幅のリージョンは簡単にASCIIでイラストを書くための
     `artist-mode'(4)を使うことで編集されます。空行でこのコマ
     ンドを使うことで、新しい固定幅のリージョンを作成します。 

`C-c l'
     `C-c ''によって作成した一時バッファでのソースコード例の編集中に
     `org-store-link'の呼び出しはラベルを指示します。現在のバッファがユニー
     クであることを確認し、現在の行の最後に`(ref:label)'のように適切にフォ
     ーマットされたものが挿入されます。ラベルは`(label)'のようなリンクを記
     憶し、`C-c C-l'検索する。

   ---------- Footnotes ----------

   (1) HTMLバックエンドに対しては、この作業
は自動的に行われます(Org-modeと一緒に配布されている`htmlize.el'のバージョン
1.34が必要です)。LaTeXの要塞化されたコードの塊はリスティングか、 minted
(http://coe.google.com/p/minted)パッケージによってアーカイブされま
す。リスティングを使うには、`org-export-latex-listings'変数をオンにし、LaTeX
のヘッダにリスティングパッケージが含まれているようにします(例 :
`org-export-latex-packages-alist'の設定とを使います)。色付きの出力を含む
設定のオプションについて、リスティングのドキュメントを見てください。mintedを
使うには、pygemnts (http://pygemnts.org)プログタムをインストールする必要が
あり、`org-export-latex-minted'を追加で設定し、LaTeXのヘッダにmitedパッケー
ジが含まれていることと`-shell-escape'オプションが`pdflatex'に引き継がれてい
る(`org-latex-to-pdf-process'を見てください)ことを確認します。

   (2) Org-modeの例で説明するのに便利なリンクに行番号を使う間、 `-k'を`-n
-r'に追加することでソースコードのラベルを維持します。

   (3) 終了時、Org-modeによってア
ウトラインの見出しや特別なコメントと間違えられないようにするために、
`*'か`#'から始まる行はカンマが銭湯に追加されます。

   (4) `org-edit-fixed-width-region-mode'変数により、異なるモー
ドを選択することもできます。


File: org-ja,  Node: Include files,  Next: Index entries,  Prev: Literal examples,  Up: Markup

11.4 Include files
==================

エクスポート中、あなたは別のファイルの内容をインクルードすることができます。
例えば、`.emacs'をインクルードするなら、あなたは次のようにします: 

     #+INCLUDE: "~/.emacs" src emacs-lisp
   2つ目のオプションは(e.g.
`quote'や`example'、`src')のようなマークアップで、3つ目はマークアップが`src'
ならコンテンツの言語を表します。マークアップはオプションです;
もし与えられなければ、Org-modeフォーマットのテキストと仮定される。インクルー
ドの行は最初の行とそれに続く行のプレフィクスの指定のための追加キーワードパラ
メータの`:prefix1'と`:prefix'を、Org-modeのコンテンツを指定したレベル下げる
ための`:minilevel'を、同様に選択したマークアップ固有のオプションを持ちます。
例えば、ファイルをインクルードするには:

     #+INCLUDE: "~/snippets/xx" :prefix1 "   + " :prefix "     "

`:line'パラメータを使うことで、ファイルの指定した範囲の行のみをインクルード
することができます。範囲外の行はインクルードされません。範囲の開始と、または
終了は明らかにデフォルトを使いません。

     #+INCLUDE: "~/.emacs" :lines "5-10"   Include lines 5 to 10, 10 excluded
     #+INCLUDE: "~/.emacs" :lines "-10"    Include lines 1 to 10, 10 excluded
     #+INCLUDE: "~/.emacs" :lines "10-"    Include lines from 10 to EOF

`C-c ''
     ポイント位置のインクルードされたファイルに移動します。


File: org-ja,  Node: Index entries,  Next: Macro replacement,  Prev: Include files,  Up: Markup

11.5 Index entries
==================

あなたは公開した文書のインデックスに用いるエントリーを規定することができます
。これは`#+INDEX'から始まる行により設定します。感嘆符を含むエントリーはサブ
アイテムを作るでしょう。さらなる情報を見るには*note Generating an
index::を参照し てください。

     * Curriculum Vitae
     #+INDEX: CV
     #+INDEX: Application!CV


File: org-ja,  Node: Macro replacement,  Next: Embedded LaTeX,  Prev: Index entries,  Up: Markup

11.6 Macro replacement
======================

あなたは次のようにしてテキストスニペットを定義することができます。

     #+MACRO: name   replacement text $1, $2 are arguments

これは
`{{{name(arg1,arg2)}}}'と書くことでドキュメントのどこからも(コードの例
からも)参照されます。マクロの定義に加えて、`{{{title}}}'、
`{{{author}}}'などは`#+TITLE:'や`#+AUTHOR:'や他の似たような行によりセ
ットされる情報を参照します。また、`{{{date(FORMAT)}}}'と
`{{{modification-time(FORMAT)}}}'は現在の日付とファイルがエクスポー
トされて変更された時刻をそれぞれ参照します。FORMATは`format-time-string'で
認識した文字列をフォーマットします。

マクロ展開はエクスポート中に行われ、一部の人々は複雑なHTMLコードの構築に用い
る。


File: org-ja,  Node: Embedded LaTeX,  Prev: Macro replacement,  Up: Markup

11.7 Embedded LaTeX
===================

プレーンなASCIIはほとんどの場合ノートをとるのに十分です。例外は数学の記号や
時々出てくる数式を必要とする科学に関するノートのようなものです。
LaTeX(1)は科学に関する文書の組版に広く使われています。多くのacademicsはLaTeXのソ
ースコードの読み書きに使われていて、すぐに多くのエクスポートバックエンドに対
応できるため、Org-modeはLaTeXコードのファイルへの組込みをサポートしています
。

* Menu:

* Special symbols::          ギリシャ文字や他の記号
* Subscripts and superscripts::  テキストを上付き／下付きにする簡単な構文
* LaTeX fragments::          複雑な数式を簡単に作成する
* Previewing LaTeX fragments::  このsnippetは何と似ているか
* CDLaTeX mode::             数式の入力をスピードアップする

   ---------- Footnotes ----------

   (1) LaTeXはドナルド・クヌースのTeXシステムを基としたマクロシステムです。
"LaTeX"で説明される多くの機能はTeXからのものですが、違いはそれほどありませ
ん


File: org-ja,  Node: Special symbols,  Next: Subscripts and superscripts,  Prev: Embedded LaTeX,  Up: Embedded LaTeX

11.7.1 Special symbols
----------------------

あなたはLaTeXマクロをギリシャ文字を表す`\alpha'や矢印を表す`\to'のような特殊
記号の挿入に使うことができます。これらのマクロは補完が可能で、`\'まで入力し
、その後に何文字か入力して`M-<TAB>'を押すことで補完が可能です。LaTeXのコード
とは違い、Org-modeは数学の区切り文字を囲まないようなマクロも使うことができま
す。以下に例を挙げます:

     Angles are written as Geek letters \alpha, \beta and \gamma.

エクスポート時、これらのシンボルはエクスポート先のネイティブフォーマットに変
換されます。HTMLでは`\alpha'のような文字列は`&alpha;'にエクスポートされ、
LaTeXでは`$\alpha$'となります。同様に、`\nbsp'はHTMLでは`&nbsp;'に、LaTeXで
は`~'となります。もしあなたが記号を単語の中に含めたいのであれば、次のように
します: `\Aacute{}stor'。

非常に多くのエンティティが提供されていて、HTMLとLaTeXからその名前を引き継い
でいます;完全なリストは`org-entities'変数を見てください。`\-'はシャイなハイ
フンとして扱われていて、`--'や`---'、`...'は異なる長さのハイフンかドットの集
合を作成するための全て特殊コマンドに変換されます。

   もしあなたがUTF-8文字でエンティティを表示したいのなら、以下のコマンド
(1):

`C-c C-x \'
     エンティティのUTF-8での表示をトグルします。これはバッファの内容を変更
     せず、UTF-8の文字を表示するためにオーバレイを用いています。

   ---------- Footnotes ----------

   (1) あなたは `org-pretty-entities'変数または`#+STARTUP'オプション
`entitiespretty'にデフォルトを設定することができます


File: org-ja,  Node: Subscripts and superscripts,  Next: LaTeX fragments,  Prev: Special symbols,  Up: Embedded LaTeX

11.7.2 Subscripts and superscripts
----------------------------------

LaTeXと同じように、`^'と`_'が下付き文字と上付き文字を示しています。さらに、
それらはmath-modeにの区切り文字に組込まずに使うことができます。ASCIIテキスト
の可読性の向上のため、複数文字の下付き文字と上付き文字を波括弧で囲む必要はあ
りません(囲んでもかまいませんが)。例

     The mass of the sun is M_sun = 1.989 x 10^30 kg.  The radius of
     the sun is R_{sun} = 6.96 x 10^8 m.

上付きテキスト、下付きテキストの説明を避けるため、あなたはバックスラッシュを
つけた`^'と`_'を引用できます:
`\^'と`\_'です。異なる文脈でしばしば使われるアンダーラインのテキストを書くな
ら、常にこれらの下付き文字として解釈するOrg-modeの慣習はあなたのやり方で得る
ことができます。この慣習を変更するには`org-export-with-sb-superscripts'変数
を設定するか、ファイルに次のように書いてください。

     #+OPTIONS: ^:{}

この設定を有効にした場合、`a_b'は下付き文字として解釈されず、`a_{b'とする
ことで解釈されます。
     ため、このコマンドは下付き文字と上付き文字をWYSISYMで形成する。
   MathJax library (*note Math formatting in HTML
export::)を呼び出します。最後に、数式表現はブラウザかDocBook文書で描画可能な
画像(1)へと処理されます。  LaTeXのコード片は、特別なマークは
全く必要ありません。以下のコード片はLaTeXのソースコードとして知られています
:
     いる環境が処理されます。`dvipng'を画像の生成に用いる時、LaTeX環境が扱われま
     す。。唯一必要なことは`\begin'文は空白のみがある行に表示されることです。

   *
     通常のLaTeXの数学の区切り文字内部のテキスト。流通仕様との衝突を避けるために
     、囲まれたテキストに最大2つの改行が含まれている場合、`$'文字は数学区切り文字
     のみとして認識され、`$'文字がの間に空白がない、そして

     org-cdlatex-modeをカレントバッファで実行して有効にするか、全てのOrg-modeフ
     ァイルで有効するために次の設定を行います
     :
          ある時、以下の機能が提供されます(詳細はCDLaTeXモードのドキュメントを参照して
          ください)::
               LaTeXのコード片(2)の中にある場合、<TAB>キーはテンプレートの展開を行います
               。例えば、<TAB>は`fr'を`\frac{}{}'に展開しカーソルを最初の括弧に移動しま
               す。もう一度<TAB>を押すと2つ目の括弧にカーソルが移動します。コード片の外だと
               、<TAB>は行の先頭にある環境の略語を展開します。例えば、もしあなたが行頭に
               `equ'と書いていて<TAB>を押すと、この略語は`equation'環境に展開されます。全て
               の略語を見るには、M-x
               cdlatex-command-helpをタイプしてください。

             *  と、それらの文字が括弧のペアと一緒に挿入されます。もしあなたが<TAB>を括弧か
               ら抜け出すために使うなら、また括弧が1文字の文字かマクロのみを囲っているなら
               、それらは再び消去されます(`cdlatex-simplify-sub-super-script'変数に依存しま
               す)。

             *  されます。もしあなたがバッククォートを押して1.5秒以上待つと、ヘルプウィンド
               ウがポップアップします。

             *  調やフォントでポイント前のシンボルが変更されます。もしシングルクォートを入力
               した後1.5秒以上待つと、ヘルプウィンドウがポップアップします。文字の変更は
               LaTeXコード片の中でのみ働きます;
               それ以外ではクォートは通常通りの働きをしま す。
            org-modeのドキュメントは様々なフォーマットにエクスポートすることができます
          。ノートを共有し印刷するには ASCII形式でエクスポートすることでOrgファイルの
          読みやすく、シンプルなものが得られます。 HTMLのエクスポートではノートをウェ
          ブに公開できるようになりますし, XOXOフォーマットは他の様々なアプリケーション
          でやりとりするうえで確かな基礎となります。 LaTeX のエクスポートでは、
          org-modeとその構造化された編集機能を使って、容易に LaTeX のファイルを出力す
          ることができます。DocBookのエクスポートでは、OrgファイルをDocBookのツールを
          使った様々なフォーマットに変換することが可能です。プロジェクトの管理では、
          TaskJuggler形式のエクスポートを使って、ガントリソースチャートを作成すること
          ができます。デッドラインや予約のような時間と関連のあるエントリーをiCalのよう
          なデスクトップカレンダーに取り込むために org-modeはiCalendar形式で抽出するこ
          ともできます。現在、Org-modeはエクスポートのみをサポートしており、他の異なる
          フォーマットからインポートすることはできません。  org-modeは、
           `transient-mark-mode' がオンの時(Emacs 23ではデフォルト)、は選択したリージ
          ョンをエクスポートをすることができます。

          * Menu:

          を使ってツリーを選択したり排除したりする * Export options::           ファイ
          ル毎のエクスポート設定 * The export dispatcher::    どのようにエクスポートの
          コマンドにアクセスするか * ASCII/Latin-1/UTF-8 export::  文字コードの変換を
          伴う通常のファイルへのエクスポート * HTML export::              HTMLへのエク
          スポート * LaTeX and PDF export::     LaTeXへのエクスポート、そしてPDFへ変換
          のプロセス * DocBook export::           DocBookへのエクスポート
           * TaskJuggler export::       TaskJugglerへのエクスポート
           * Freemind export::          Freemindのマインドマップへのへエクスポート
           * XOXO export::              XOXOへのエクスポート * iCalendarエクスポート
          ::  iCalendar形式へのエクスポート
          settings を参照してください。特に、 `#+SETUPFILE' を使うことによって含める
          ことができる別のファイルの中でよく使われる(エクスポートの)オプションを指定で
          きることに注意してください
               テンプレートを挿入します。下の例を見てください。
          それぞれオプション行を作りことができます。    TeX のようなシンタックス  報、エクスポートの中で
                num:       セクション番号の有無 toc:       目次の有無, または階層数の上限 (
               整数) \n:        改行を維持するかどうか (うまく動作しない) @:         HTMLの
               引用タグの有無 ::         固定幅の段落の有無 |:         表の有無
                ^:         上付き、下付き文字を示す TeX のようなシンタックスの有無
                            "^:{}" は `a_{b}' 解釈されるが、            簡潔な `a_b' は
               そのままとなるでしょう。 -:         特別な文字列を変換するかどうか
                f:         this[1] のような脚注を用いるかどうか todo:      TODOキーワードを
               出力した文字列に含めるかどうか pri:       クッキーを優先するかどうか
                tags:      タグの有無, `not-in-toc' となるかもしれません。
                <:         DEADLINESのような時間/日付の有無 *:         強調テキストの有無(
               太字, イタリック, アンダーライン) TeX:       テキスト中のシンプルな TeX マク
               ロの有無  LaTeX:      LaTeX 出力の設定  デフォルトは `auto' skip:      最初
               見出しの前にある文章をスキップするかどうか author:    著者の名前/e-mailを出
               力するかどうか email:     著者のe-mailを出力するかどうか creator:   作者を出
               力するかどうか timestamp: 作成した日付を出力するかどうか d:         drawerを
               出力するかどうか
          ポートに影響します。 `TeX' と `LaTeX' のオプションを除き LaTeX のエクスポー
          トをするのに、それぞれ `t' 、または `nil' となります。
             `org-export-html-pre/postamble' を `t' とするとHTMLにエクスポートする時に
           `author' 、 `email' 及び `creator' の値は上書きされるでしょう。 代わりに
           `org-export-html-pre/postamble-format' が用いられます。  このようなオプショ
          ンの初期値は変数のセットで与えられます。 そのような変数は、OPTIONSのキーと公
          開するキーにも対応しています。 (*note Project alist::), `org-export-plist-vars' の
          定数を見てください。  エクスポートのコマンドを呼びだす前に、 C-c @ で選択
          した単一のサブツリーをエクスポートする時、そのサブツリーは、
           `EXPORT_FILE_NAME' 、 `EXPORT_TITLE' 、 `EXPORT_TEXT' 、 `EXPORT_AUTHOR' 、
           `EXPORT_DATE' 、 そして `EXPORT_OPTIONS' プロパティでエクスポートの設定を無
          視することができます。

             ---------- Footnotes ----------

             (1)
          これを行うには、あなたのシステムにLaTeXをインストールする必要があります
          。そしてまた、`http://sourceforge.net/projects/dvipng/'で入手できる`dvipng'
          プログラムも必要です。

             (2)
          カーソルがコード片の中にあるときにOrg-modeはテストを行うため
          のメソッドを持ちます。詳細は`org-inside-LaTeX-fragment-p'関数のドキュメント
          を参照してください。


File: org-ja,  Node: The export dispatcher,  Next: ASCII/Latin-1/UTF-8 export,  Prev: Export options,  Up: Exporting

11.8 The export dispatcher 

まず、見出しがドキュメントのタイトルとして扱われ、サブツリーがエクスポートされます。
         `
               `org-export-run-in-background'変数を設定してください.'.  v 

         `
               v'     (`org-export-visible')  `C-c C-e'
               のように動作しますが、 今見えている文章だけ
               がエクスポートされます。 (i.e.
               アウトライン表示により、隠されていない文章 ).  

         `
               機能が呼ばれますが、 `org-export-run-in-background'
               の設定と逆の挙動となりま す。 i.e.
               動いていないバックグラウンドプロセスを呼びだしたり,
               現在のEmacsの プロセスで強制的に実行したりします。
             N,org-export-as-latin1-to-buffer'
上に示したコマンドのような動作をしますが ,
Latin-1でエンコーディングされたものが出力されます。     上
に示したコマンドのような動作をしますが, UTF-8でエンコーディングされたものが
出力されます。  C-c C-e v a/n/u 文書の中で、バッファで表示されている部分だけ
を出力する。 れたものでは、
最初の3つのアウトラインの階層が一般的な文書の構造と見なされて
、見出しとなります。 それ以外の階層はアイテムのリストとしてエクスポートされ
ます。 この違いを異なる階層に変えたい場合は、 前置引数で、その階層を指定しま
す。  例えば、
               それ以外はアイテムとなります。見出しがアイテムに変更された時、 見出し後の文
               章のインデントは、アイテムの下にうまく調和するように変更されます。 この変更
               は、最初の本文が全体のインデントを示しているという仮定のもとで実行されます。
               これよりも大きなインデントは、最初の文章との相対的なレイアウトを維持するよう
               に調整されます。最初の行より少ないインデントであれば, 左寄せします。
                 形でエクスポートされます。その脚注は、次の見出しの前に項目名とリンクがエクス
               ポートされます。詳しい内容と他のオプションについては、変数
                `org-export-ascii-links-to-notes' を見てください。


File: org-ja,  Node: HTML export,  Next: LaTeX and PDF export,  Prev: ASCII/Latin-1/UTF-8 export,  Up: Exporting

11.9 HTML export 

               Quoting HTML tags, HTML export, HTML export

11.9.1 HTMLエクスポートのコマンド  

               が有効である必要があります。 があった場合,
そのリージョンのみがエクスポート されます。
選択したリージョンが一つのツリー
(1)を含んでいた場合、そのツリーの見出しがドキュメントのタ
イトルとなるでしょう. 見出しがあるか、または `EXPORT_FILE_NAME' プロパティを
継承していた場合、 エクスポートする際にはその名前が使われるでしょう。C-e b C-e
b     (`org-export-as-html-and-open')
HTMLファイルをエクスポートし、そのファイ ルをブラウザで開きます。  一時的なバ
ッファに出力し、ファイルを作成しません。   アクティブなリージョンを一時的なバッ
ファに出力します。前置引数があるとヘッダーとフッターを出力せずに、リージョン
のHTMLのみを出力します。これはカットアンドペーストで編集する際に便利です
C-c C-e v h/b/H/R 文書の中で、バッファで表示されている部分だけを出力する。
M-x org-export-region-as-html org-modeの記法が使われているという前提でリー
ジョンをHTMLに変換します。これはどのバッファでも起動するグローバルなコマンド
です。  M-x org-replace-region-by-HTML
org-modeの記法が使われているという前提
でアクティブなリージョンをHTMLに変換します。 ッドラインレベル
エクスポートされたものでは、 最初の3つのアウトラインの階層
が一般的な文書の構造と見なされて、見出しとなります。 それ以外の階層はアイテ
ムのリストとしてエクスポートされます。 この違いを異なる階層に変えたい場合は
、 前置引数で、その階層を指定します。  例えば、
                    い、それ以外は項目として取り扱います。

                       ---------- Footnotes ----------

                       (1) 現在のサブツリーの選択するには 、 `C-c @'
                    と入力してください。


File: org-ja,  Node: Quoting HTML tags,  Next: Links in HTML export,  Prev: HTML Export commands,  Up: HTML export

11.9.2 Quoting HTML tags HTMLにエクスポートする際、プレインな`<' and `>'は常に `&lt;'と`&gt;'に変換されます。もし単純なHTMLタグをそのまま含めたい時は
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                    `@<b>bold
text@</b>'のようにma`@'でマークします。これは単純なHTMLタグでしか動作しま
せんので注意してください。 エクスポートするファイルにさらに広範囲なHTMLをそ
のままコピーするには次のようなブロックが使えます。    。
targets)により生成された自動リンクも含まれます。もしターゲットとなるファイ
ルが公開されるOrgファイルを示す同じ相対パス上にあっても、リンクは外部リンク
として動作するでしょう。他の`.org'ファイルへのリンクは、HTMLにエクスポートさ
れたものにも同じ相対パスでリンクされたファイルがある、という前提で、リンクに
変換されます。 `id:'リンクはファイル間で特定のエントリーにジャンプするのに使
われます。リンクするファイル、公開ディレクトリでの公開に関する情報については
、*note Publishing links::参照してください。
リンクの属性を記述したい時は、特別な`#+ATTR_HTML'
行を用いることができます。 この行は、`<a>'タグや`<img>'タグを追加する属性を
定義するために使われます。以下の例では、リンクに`title'と`style'の属性を設定
しています。   image]]はが画像にリンクされる`the
image'というテキストリンクが作られます。
descriptionの部分が`file:'リンクか画像を示す`http:'のURLの場合, 画像はイン
ラインに表示され、画像がクリックされると活性化されます。例えば、リンク先に高
解像度の画像があるサムネイルを追加したい場合、次のように書くと良いでしょう。
                         したい場合は、`#+ATTR_HTML'を使います。 次の例では、テキストでの見やすさとア
                         クセスのしやすさを考慮して`alt'属性と`title'属性を指定して、alignを右にして
                         います。
                           fragments)は二つの異なる方法でHTMLに表示される。デフォルトではorg-modeをイ
                         ンストールすると、すぐにMathJax system (http://www.mathjax.org)が使えるようになっています。 `http://orgmode.org'は`MathJax'
                         がOrg-modeユーザ、小さなアプリケーション、そしてテストにとって便利だと考えて
                         いるからです。 もし特定のページで、あるいは常に`MathJax'を使うのであれば、私
                         達のサーバでの読みこみを減らすためにMathJaxをあなたのサーバにインストール
                         (1)
                         してください。 `MathJax'について設定するには、
                         `org-export-html-mathjax-options'を使うか、バッファに次のような行を挿入して
                         ください。
                              この初期設定を無効にするには`org-export-html-style-include-default'を修正し
                              てください。が含まれています。この設定は上書きされるかもしれませんし、
                               `org-export-html-style' (Org-wideの設定に使われます)や
                              `org-export-html-style-extra' (ファイルごとの設定のような詳細な設定に使われ
                              ます。)を使って追加されるかもしれません。後者の変数をファイルごとに設定する
                              には、次のように行ないます。
                                customize-variable <RET> org-modules
                              <RET>と入力して、確かにロードされている確認してください。このプログラムを使
                              えるようにするには、次のような行をOrgファイルに追加するだけです。
                                行が見つかると、HTMLのヘッダーは自動的にこのスクリプトを起動させるのに必要な
                              コードを自動的に追加します。以上のような行を使うと、次のようなオプションを設
                              定できます。
                                   `http://orgmode.org/org-info.js'           を使うようになっていますが、ロー
                                   カルにコピーしたものを使いたい場合は          `../scripts/org-info.js'のよう
                                   なパスを使ってください。 view:    ウェブサイトを最初に開いた時の表示。可能な
                                   値は次のとおり:          info      一つのページに一つのセクションが表示され
                                   るInfoのようなインターフェイス          overview  最初はトップレベルのみが表
                                   示される折りたたみインターフェイス          content   全ての見出しが見える状
                                   態の折りたたみインターフェイス          showall   全ての見出しと文章が見える
                                   状態の折りたたみインターフェイス sdepth:  infoや折りたたみモードで独立して表
                                   示されるセクションの          最大の見出しレベル。デフォルトでは
                                   `org-export-headline-levels'          (= `#+OPTIONS'の中の`H'スイッチ)の値が
                                   使われる。          もし、`org-export-headline-levels'の値より小さかった場合
                                   、          info/折りたたみ のセクションは小見出しまで含まれます。
                                    toc:     目次表示の有無          `nil'としても、`i'を入力することで目次は表
                                   示されます。 tdepth:  目次の深さ。デフォルトでは、
                                   `org-export-headline-levels'          `org-export-with-toc'の値が用いられま
                                   す。 ftoc:    CSSによって、目次の場所を指定するかどうか。          「yes」の
                                   場合は、セクションとして表示されなくなります。 ltoc:    それぞれのセクション
                                   にショートコンテンツを設置するかどうか。          セクションの冒頭にショート
                                   コンテンツを設置する場合は値を`above'とします。 mouse:   マウスを見出しの上
                                   に移動させた時にハイライトさせます。          `underline' (default)か、
                                   `#cccccc'のように背景色が指定できます。 buttons: ビューの変更をトグルさせる
                                   ボタンを様々なところに設置するかどうか。          `nil'の場合は、(デフォルト
                                   )、ボタンが一つだけ表示されます。
                              C-e L,org-export-as-latex-to-buffer 一時バッファに出力します。ファイルを作
                              りません。 する。 でリージョンをLaTeXに変換します。これはどのバッファでも起動するグローバルな
                              コマンドです。 (Org-modeの記法が使われている前提で)LaTeXコードに置き変えます。p
                              p     (`org-export-as-pdf')
                               LaTeXに出力し、PDFにも変換します。d
                              d     (`org-export-as-pdf-and-open')
                               LaTeXに出力し、PDFにも変換します。その際出力さ
                              れたPDFファイルを開きます。
                          の階層が一般的な文書の構造と見なされて、見出しとなります。 それ以外の階層は
                         概要のリストとしてエクスポートされます。エクスポート機能では、
                         `org-latex-low-levels'を変更することで、この設定を無視、または変更することが
                         できます。  この違いを異なる階層で変えたい場合は、 前置引数で、その階層を指
                         定します。 例えば、
                              を見出しとして取り扱い、それ以外は項目として取り扱います。

                                 ---------- Footnotes ----------

                                 (1)
                              インストール方法については、MathJaxのウェブサイトにあります。
                              `http://www.mathjax.org/resources/docs/?installation.html'を参照してください
                              。


File: org-ja,  Node: Header and sectioning,  Next: Quoting LaTeX code,  Prev: LaTeX/PDF export commands,  Up: LaTeX and PDF export

11.9.3 見出しと構造の分割 

                              LATEX_CLASS \usepackage{xyz}を追加して同様のことをすることもできます。詳しい情報につ
いては、`org-export-latex-classes'のドキュメント文字列を参照してください。


File: org-ja,  Node: Quoting LaTeX code,  Next: Tables in LaTeX export,  Prev: Header and sectioning,  Up: LaTeX and PDF export

11.9.4 LaTeXコードの引用 *note Embedded::----------------------------------------------

LaTeXで記述された埋め込まれたLaTeXは、LaTeXに正しく挿入されます。図の相互参
照を生成するために、`\ref{LABEL}'のようなシンプルなマクロが含まれます。さ
らに、次のような行を追加することで、LaTeXエクスポートの際に表示だけしてほし
い特別なコードを追加することができます。  エクスポートする際に文字のまま、出力される
LaTeX code の行は文字がそのまま出力されます。  #+END_LaTeX
tables)、`ATTR_LaTeX'行を使うことで、表に関する`longtable'環境を呼び出すこ
ともできます。複数のページにまたがる表や、デフォルトの表の環境を`table'から
`table*'にするため、またはデフォルトの内部tabular環境を`tabularx'や
`tabulary'にしたい時にも`ATTR_LaTeX'行は使われます。つまり、文字の配置や
(`tabularx'や`tabulary'を使って)幅を次のようにして設定できます。 :  org-insert-beamer-options-template
はそのようなフォーマットを定義します。
次の例は、beamerへのエクスポートを意図した簡単なOrg-modeの文書の例です。
                                    #+AUTHOR: Carsten Dominik #+LaTeX_CLASS_OPTIONS: [presentation] #+BEAMER_FRAME_LEVEL: 2 #+BEAMER_HEADER_EXTRA: \usetheme{Madrid}\usecolortheme{default} #+COLUMNS: %35ITEM %10BEAMER_env(Env) %10BEAMER_envargs(Args) %4BEAMER_col(Col) %8BEAMER_extra(Ex)  * これは最初の構造的な章です。  ** フレーム 1 \\ サブタイトル ***  Eric Fraga へありがとう                                  :BMCOL:B_block:     :PROPERTIES:     :BEAMER_env: block     :BEAMER_envargs: C[t]     :BEAMER_col: 0.5     :END:     Org-modeでの最初のbeamerの設定 *** みんなへありがとう                                        :BMCOL:B_block:     :PROPERTIES:     :BEAMER_col: 0.5     :BEAMER_env: block     :BEAMER_envargs: <2->     :END:     議論への寄与してくれたみんなへ **** これは、beamerのnoteとして処理される。                   :B_note: ** Frame 2 \\ 使わないカラム *** リクエスト                                                   :B_block:     この部分を試してみてください!     :PROPERTIES:     :BEAMER_env: block     :END:
                                 を使ってください。 だった場合は,
そのツリーの見出しが文書のタイトルになりま
す。そのツリーの見出しがある、または継承されている場合や、
`EXPORT_FILE_NAME' 属性がある場合は、その名前がエクスポートに使われます。  V V
    (`org-export-as-docbook-pdf-and-open')
DocBookファイルが出力され、PDF処理を経 て出力されたPDFファイルが開きます。
tablesで説明されているように図の表題を特定するならば、 `caption' 要素を
`mediaobject' の中に追加します。番号も特定する場合は、 `mediaobject' 要素
の中に  `xml:id' 属性が出力されます。`figure' 環境のオプションの配置を変更す
るには、 `placement=[h!]' のように属性に追加します。   素がサポートされ、
`align' や `width' のような属性が二つの方法で特定されます 。一つ目は変数
`org-export-docbook-default-image-attributes' を設定する方法 です。二つ目は
`#+ATTR_DOCBOOK:' 行を使う方法です。変数
`org-export-docbook-default-image-attributes' で特定される属性は出力元の
Org-modeファイルに含まれる全ての画像に適用されます(ただし、
`#+ATTR_DOCBOOK:' 行で画像の属性が上書きされている場合は除きます。)。
`#+ATTR_DOCBOOK:' 行は、追加的な画像の属性の指定や個々の画像にデフォルトの
画像の属性を上書きするのに使います。もし、 `#+ATTR_DOCBOOK:' と 変数
`org-export-docbook-default-image-attributes' に同じ属性が現れた場合、前者
の値が優先的に使われます。次の例は画像の属性に関する設定例です。    #+LABEL:
    unicorn-svg #+ATTR_DOCBOOK: scalefit="1" width="100%" depth="100%"
[[./img/org-mode-unicorn.svg]] C-e
Jで出力する準備ができました。出力されれば、TaskJugglerUIでガントチャー
トが開くはずです。

11.9.5 リソース  

のタスクにリソースを割り当てることができます。階層的にリソースをまとめること
もできます。トップノードのタグは`:taskjuggler_resource:'になります (または
`org-export-taskjuggler-resource-tag'をカスタマイズします。)。識別子
(`resource_id')をリソースに割り当てることもできます(標準的なOrg-modeのプロパ
ティについては, *note Property
syntax::)。また、エクスポート機能は自動で識別子を生成することができます。(識
別子はユニークであればよいので、エクスポート機能は見出しの最初の単語を抽出し
ます。詳しくは`org-taskjuggler-get-unique-id'のドキュメントを読んでください)
。識別子を使ってリソースをタスクに再配置することができます。`allocate'属性が
タスクで再び実行されます。カラムビューか、タスク上でC-c C-x p allocate
<RET> <resource_id> <RET>と入力することで実行されます。  再
配置が実行されると、再びTaskJugglerに出力してリソースの再配置グラフを確認す
ることができます。そのグラフでは、各人がいつ何のタスクをこなしているかがわか
ります。

11.9.6 属性の出力  エクスポート機能はTODOの状態に関する情報も考慮されて
----------------------------------------------------------------------------------------------------

います。例えば、タスクが「DONE」とマークされると、それに対応して、
TaskJugglerの属性も(`complete
100')となります。タスクリソースやタスクノード上のうTaskJugglerで使われる
`limits', `vacation', `shift', `booking', `efficiency', `journalentry',
`rate'のようなリソースの属性や`account', `start', `note', `duration',
`end', `journalentry', `milestone', `reference', `responsible',
`scheduling'などのタスクの属性も、出力されます。

11.9.7 依存状態  エクスポート機能はタスクで`ORDERED' 属性 (*note TODO dependencies::)、`BLOCKER' 属性 (see `org-depend.el')、そして選択的に`depends'属性で表される依存状態を操作することができます。`BLOCKER' 属性も`depends'属性も`previous-sibling'のように扱えますし、プロジェクトの他のタスクで定義された識別子への参照 (`task_id')として扱うこともできます。`BLOCKER'属性と`depends'属性は、カンマやスペースで分けることで複数の依存状態として定義できます。依存状態の属性は、単純に追加することで任意の属性を追加することができます。これまでの例は次のように記述できます。

                                   customize-group <RET>
org-export-taskjuggler <RET>と入力した確認してくださ い。
さらに詳しい情報や例を見たい時は、
`http://orgmode.org/worg/org-tutorials/org-taskjuggler.html'で
Org-taskjugglerチュートリアルを見てください。


File: org-ja,  Node: Freemind export,  Next: XOXO export,  Prev: TaskJuggler export,  Up: Exporting

11.10 Freemind export 

                                   C-c C-e v x
見えている部分だけを出力します。 iに似ていますが、`org-agenda-files'で指定された全てのファイルで実行されます
。それぞれのファイルでiCalendar形式のファイルが作成されます。   files)にアップロードするための拡張ツールを使うことができます。
 `:preparation-function' 公開プロセスの開始前に呼ばれる関数または関数のリス
トです(例えば、公開のためのファイルの更新に使う`make'を実行します)。
`project-plist'変数であるプロジェクトのプロパティリストはこの呼び出しにスコ
ープされます。  `:completion-function' 公開プロセスが完了した後に呼ばれる関
数または関数のリストです(例えば、出力したファイルの権限を変更します)。
`project-plist'変数であるプロジェクトのプロパティリストはこの呼び出しにスコ
ープされます。
export)を呼び出す`org-publish-org-to-html'によって行われます。しかしあなた
はまた、`org-publish-org-to-pdf'を用いたPDFファイルのようなコンテンツも公開
することができます。もしあなたがアーカイブされた、コメントされた、除外タグが
ついたツリーを消去したOrg-modeファイル自身を公開したいのであれば、
`org-publish-org-to-org'を使い、`:plain-source'パラメラと/または
`:htmlized-source'をセットします。これは公開ディレクトリ(1)に`file.org'と`file.org.html'を作り
ます。画像のようなその他のファイル公開ディレクトリにコピーされる必要がありま
す; このために、あなたは`org-publish-attachment'を使うことができます。
Org-modeでないファイルのために、あなたは常に公開用の関数を指定する必要があり
ます:
これは、順番に呼び出される関数のリストにすることもできます。                                     `:plain-source'nilでなければ、プレーンソースを公開します。
