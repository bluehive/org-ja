
\input texinfo
@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c %**start of header
@setfilename ../../info/org-ja
@settitle Org Mode マニュアル

@set VERSION 7.5
@set DATE March 2011

@c Use proper quote and backtick for code sections in PDF output
@c Cf. Texinfo manual 14.2
@set txicodequoteundirected
@set txicodequotebacktick

@c Version and Contact Info
@set MAINTAINERSITE @uref{http://orgmode.org,maintainers webpage}
@set AUTHOR Carsten Dominik
@set MAINTAINER Carsten Dominik
@set MAINTAINEREMAIL @email{carsten at orgmode dot org}
@set MAINTAINERCONTACT @uref{mailto:carsten at orgmode dot org,contact the maintainer}
@c %**end of header
@finalout


@c -----------------------------------------------------------------------------

@c Macro definitions for commands and keys
@c =======================================

@c The behavior of the key/command macros will depend on the flag cmdnames
@c When set, commands names are shown.  When clear, they are not shown.

@set cmdnames

@c Below we define the following macros for Org key tables:

@c orgkey{key}                        A key item                     
@c orgcmd{key,cmd}                    Key with command name
@c xorgcmd{key,cmmand}                Key with command name as @itemx
@c orgcmdnki{key,cmd}                 Like orgcmd, but do not index the key
@c orgcmdtkc{text,key,cmd}            Like orgcmd,special text instead of key
@c orgcmdkkc{key1,key2,cmd}           Two keys with one command name, use "or"
@c orgcmdkxkc{key1,key2,cmd}          Two keys with one command name, but
@c                                    different functions, so format as @itemx
@c orgcmdkskc{key1,key2,cmd}          Same as orgcmdkkc, but use "or short"
@c xorgcmdkskc{key1,key2,cmd}         Same as previous, but use @itemx
@c orgcmdkkcc{key1,key2,cmd1,cmd2}    Two keys and two commands

@c a key but no command
@c    Inserts:    @item key
@macro orgkey{key}
@kindex \key\
@item @kbd{\key\}
@end macro

@macro xorgkey{key}
@kindex \key\
@itemx @kbd{\key\}
@end macro

@c one key with a command
@c   Inserts:    @item KEY               COMMAND
@macro orgcmd{key,command}
@ifset cmdnames
@kindex \key\
@findex \command\
@iftex
@item @kbd{\key\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key\
@item @kbd{\key\}
@end ifclear
@end macro

@c One key with one command, formatted using @itemx
@c   Inserts:    @itemx KEY               COMMAND
@macro xorgcmd{key,command}
@ifset cmdnames
@kindex \key\
@findex \command\
@iftex
@itemx @kbd{\key\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@itemx @kbd{\key\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key\
@itemx @kbd{\key\}
@end ifclear
@end macro

@c one key with a command, bit do not index the key
@c   Inserts:    @item KEY               COMMAND
@macro orgcmdnki{key,command}
@ifset cmdnames
@findex \command\
@iftex
@item @kbd{\key\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@item @kbd{\key\}
@end ifclear
@end macro

@c one key with a command, and special text to replace key in item
@c   Inserts:    @item TEXT                    COMMAND
@macro orgcmdtkc{text,key,command}
@ifset cmdnames
@kindex \key\
@findex \command\
@iftex
@item @kbd{\text\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\text\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key\
@item @kbd{\text\}
@end ifclear
@end macro

@c two keys with one command
@c   Inserts:    @item KEY1 or KEY2            COMMAND
@macro orgcmdkkc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@item @kbd{\key1\} @ @r{or} @ @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key1\} @ @r{or} @ @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\} @ @r{or} @ @kbd{\key2\}
@end ifclear
@end macro

@c Two keys with one command name, but different functions, so format as
@c @itemx
@c   Inserts:    @item KEY1
@c               @itemx KEY2                COMMAND
@macro orgcmdkxkc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@item @kbd{\key1\}
@itemx @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key1\}
@itemx @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\}
@itemx @kbd{\key2\}
@end ifclear
@end macro

@c Same as previous, but use "or short"
@c   Inserts:    @item KEY1 or short KEY2            COMMAND
@macro orgcmdkskc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@item @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\} @ @r{or short} @ @kbd{\key2\}
@end ifclear
@end macro

@c Same as previous, but use @itemx
@c   Inserts:    @itemx KEY1 or short KEY2            COMMAND
@macro xorgcmdkskc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@itemx @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@itemx @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@itemx @kbd{\key1\} @ @r{or short} @ @kbd{\key2\}
@end ifclear
@end macro

@c two keys with two commands
@c   Inserts:    @item KEY1                        COMMAND1
@c               @itemx KEY2                       COMMAND2
@macro orgcmdkkcc{key1,key2,command1,command2}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command1\
@findex \command2\
@iftex
@item @kbd{\key1\} @hskip 0pt plus 1filll @code{\command1\}
@itemx @kbd{\key2\} @hskip 0pt plus 1filll @code{\command2\}
@end iftex
@ifnottex
@item @kbd{\key1\} @tie{}@tie{}@tie{}@tie{}(@code{\command1\})
@itemx @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command2\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\}
@itemx @kbd{\key2\}
@end ifclear
@end macro
@c -----------------------------------------------------------------------------

@iftex
@c @hyphenation{time-stamp time-stamps time-stamp-ing time-stamp-ed}
@end iftex

@c Subheadings inside a table.
@macro tsubheading{text}
@ifinfo
@subsubheading \text\
@end ifinfo
@ifnotinfo
@item @b{\text\}
@end ifnotinfo
@end macro

@copying
このマニュアルは，Org-mode @value{VERSION}に対応しています．

Copyright @copyright{} 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free
Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant
Sections, with the Front-Cover texts being ``A GNU Manual,'' and with the
Back-Cover Texts as in (a) below.  A copy of the license is included in the
section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and modify
this GNU manual.  Buying copies from the FSF supports it in developing GNU
and promoting software freedom.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document separately
from the collection, you can do so by adding a copy of the license to the
document, as described in section 6 of the license.
@end quotation
@end copying

@dircategory Emacs
@direntry
* Org Mode: (org-ja).        Outline-based notes management and organizer 
                               (Japanese translation)
@end direntry

@titlepage
@title Org Mode マニュアル

@subtitle リリース @value{VERSION}
@author by Carsten Dominik
with contributions by David O'Toole, Bastien Guerry, Philip Rooke, Dan
Davison, Eric Schulte, and Thomas Dye

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Org Mode マニュアル

@insertcopying
@end ifnottex

@menu
* Introduction::             さあ、はじめよう
* Document Structure::       ツリーはあなたの脳のように動作します．
* Tables::                   あっという間にフォーマットする魔法
* Hyperlinks::               コンテクストにおけるノート
* TODO Items::               全ツリーの枝をTODOアイテムになれます
* Tags::                     見出しのタグ付けとタグの組み合せによる検索
* Properties and Columns::   エントリーについての情報を保存する
* Date and Times::           計画のためにアイテムを扱いやすくする
* Capture - Refile - Archive::  プロジェクトへの入出力
* Agenda Views::             さまざまな情報をビューにまとめて表示する
* Markup::                   リッチなエクスポートのための下準備
* Exporting::                ノートの共有と公開
* Publishing::               相互にリンクしたOrg-modeのファイルでウェブサイト
を作る
* Working With Source Code::  コードブロックの出力，評価，そしてtangle
* Miscellaneous::            その他の機能
* Hacking::                  Org-modeをハックする方法
* MobileOrg::                モバイルデバイスでのタスクの閲覧とキャプチャ
* History and Acknowledgments::  Org-modeがどこからやってきたか
* Main Index::               Org-modeのコンセプトと特徴のインデックス
* Key Index::                キーバインドのインデックス
* Command and Function Index::  コマンドの名称と内部関数
* Variable Index::           マニュアルで言及した変数

@detailmenu
 --- ノードリストの細目 ---



Introduction



* Summary::                  Org-modeで何ができるか
* Installation::             Org-modeのインストール
* Activation::               Org-modeを特定のバッファで有効にする方法
* Feedback::                 バグ報告、アイデア、パッチなど
* Conventions::              マニュアルで使われる植字の慣例

ドキュメントの構造



* Outlines::                 Org-modeはoutline-modeをベースにしています
* Headlines::                org-modeの階層構造の見出しをどう組み込むか
* Visibility cycling::       簡単な操作で表示、非表示を切り替える
* Motion::                   他の見出しにジャンプする
* Structure editing::        見出しの順序と階層を変更する
* Sparse trees::             文脈の中に埋め込まれた一致
* Plain lists::              １つのエントリーの中に階層のある構造を追加する
* Drawers::                  いろいろなものを隠す
* Blocks::                   ブロック単位で折りたたむ
* Footnotes::                org-modeの構文の中で脚注はどのように規定されるの
か
* Orgstruct mode::           org-mode外のモードでの階層編集

Tables



* Built-in table editor::    単純なテーブル
* Column width and alignment::  自動設定を解除する
* Column groups::            縦の線を引き金にしてグループを作る
* Orgtbl mode::              マイナーモードとしてのテーブルエディタ
* The spreadsheet::          テーブルエディタはスプレッドシートの能力を持つ
* Org-Plot::                 org-modeのテーブルからプロットする

The spreadsheet



* References::               どうやって他のフィールドや範囲を参照するか
* Formula syntax for Calc::  Calcを使って計算する
* Formula syntax for Lisp::  Emacs Lispで数式を書く
* Field and range formulas::  特定の（範囲の）フィールドのための数式
* Column formulas::          カラム全体に有効な数式
* Editing and debugging formulas::  数式を修正する
* Updating the table::       依存関係にあるすべてのフィールドを再計算する
* Advanced features::        フィールド名、パラメータ、自動再計算

Hyperlinks



* Link format::              Org-modeでのリンクのフォーマット
* Internal links::           現在のファイルの別の場所へのリンク
* External links::           URL形式のリンク
* Handling links::           創造、挿入、追随
* Using links outside Org::  Cのソースコードからのリンク？
* Link abbreviations::       複雑なリンクを書くためのショートカット
* Search options::           特定の場所へのリンク
* Custom searches::          デフォルトの検索が充分ではないとき

Internal links



* Radio targets::            プレーンテキストのリンクをターゲットに起動させる

TODOアイテム



* TODO basics::              登録したTODOのマーキングと表示
* TODO extensions::          ワークフローと割り当て
* Progress logging::         進行管理のための日付とメモ
* Priorities::               他より重要なものもある
* Breaking down tasks::      タスクを管理可能な単位に分解する
* Checkboxes::               リストをチェックする

TODOキーワードの拡張的な使い方



* Workflow states::          TODOからDONEまでの流れ
* TODO types::               私はこの仕事をこなす。フレッドは休む。
* Multiple sets in one file::  ごちゃまぜにしてもやり方は見つけられる
* Fast access to TODO states::  状態を選択するための文字
* Per-file keywords::        ファイルが違えば、やりたい事も違う
* Faces for TODO keywords::  状態のハイライト
* TODO dependencies::        他のタスクの終了を待たないといけないタスクがある
時

Progress logging



* Closing items::            DONEとなったのはいつ？
* Tracking TODO state changes::  状態が変わったのはいつですか？
* 習慣の追跡::          どれだけ、続けられていますか？

Tags



* Tag inheritance::          アウトラインのツリー構造に沿ってタグ付けされる
* Setting tags::             見出しにタグをつける
* Tag searches::             タグの組み合わせで検索する

プロパティ（属性）とカラム（列）



* Property syntax::          プロパティの表記の仕方
* Special properties::       他のorg-modeの機能を使用する
* Property searches::        プロパティ値の一致作業
* Property inheritance::     ツリー上でのプロパティの伝達
* Column view::              表による表示と修正
* Property API::             Lispプログラマのためのプロパティ

Column view



* Defining columns::         カラムの書式のプロパティ
* Using column view::        カラム表示の作り方と使い方
* カラム表示の保存::  カラム表示用の動的ブロック

Defining columns



* Scope of column definitions::  カラム設定の定義範囲の指定方法は？
* Column attributes::        カラム内の表示と値

日付と時刻



* Timestamps::               ツリーに時間の割り当て
* Creating timestamps::      タイムスタンプを挿入するコマンド
* Deadlines and scheduling::  作業計画をたてる
* Clocking work time::       タスクに費す時間を追跡する
* Effort estimates::         事前に作業活動を計画する
* Relative timer::           実行中のタイマに関する注意
* カウントダウンタイマ::  タスクのカウントダウンタイマを起動する

Creating timestamps



* The date/time prompt::     日付と時刻入力のサポート
* Custom time format::       日付を異なる見た目にする

Deadlines and scheduling



* Inserting deadline/schedule::  計画項目
* Repeated tasks::           何度も現れる項目

Clocking work time



* Clocking commands::        時計の開始と終了
* The clock table::          詳細な報告
* Resolving idle time::      Resolving time when you've been idle

Capture - Refile - Archive



* Capture::                  新しいものをキャプチャする
* Attachments::              タスクにファイルを追加する
* RSS Feeds::                RSSフィードから取り込む
* Protocols::                外部（e.g. @: 
                               ブラウザ）からEmacsとOrg-modeにアクセスする
* Refiling notes::           別な場所にツリーを移動する
* Archiving::                完了したプロジェクトの扱い方

Capture



* Setting up capture::       キャプチャされたノートが保存される場所
* Using capture::            キャプチャの実行と中止コマンド
* Capture templates::        異なるタイプのテンプレートを定義する

Capture templates



* Template elements::        完全なテンプレート入力のために必要なこと
* テンプレートの拡張::  時刻と条件についての情報を書き込む

Archiving



* Moving subtrees::          アーカイブファイルにツリーを移動する
* ファイル内部でのアーカイブ::  アーカイブタグを付けてファイル内に残す

アジェンダビュー



* Agenda files::             アジェンダ生成のために探索されるファイル
* Agenda dispatcher::        アジェンダビューへのキーボードアクセス
* Built-in agenda views::    すぐに使える機能に何があるでしょう？
* Presentation and sorting::  表示のためにどのようにアジェンダ項目が準備され
るのか
* Agenda commands::          タスクツリーのリモート編集
* Custom agenda views::      特別な検索とビューを定義する
* Exporting Agenda Views::   ビューをファイルに書き出す
* Agenda column view::       収集したエントリーのためにコラムビューを使用する

agendaに組み込まれているビュー



* Weekly/daily agenda::      現在のタスクが表示されたカレンダーのページ
* Global TODO list::         全ての未完了アクション項目
* Matching tags and properties::  微調整された検索での構造化された情報
* Timeline::                 単一ファイルでの時間順のビュー
* Search view::              文章の中を検索してエントリーを見つける
* Stuck projects::           レビューが必要なプロジェクトを見つける

Presentation and sorting



* Categories::               全てのタスクが同じであるとは限らない
* Time-of-day specifications::  agendaはどうやって時間を知るか
* agendaの項目をソートする::  物事の順番

Custom agenda views



* Storing searches::         一度入力し、何度も使う
* Block agenda::             必要な事項をひとつのバッファに集める
* Setting Options::          ルールを変更する

Markup for rich export



* Structural markup elements::  エクスポートでわかる基本的な構造
* Images and tables::        テーブルと画像は含まれているだろう
* Literal examples::         特別なフォーマットのためのソースコードの例
* Include files::            文書に別のファイルを添付する
* Index entries::            indexを作る
* Macro replacement::        複雑なアウトプットを作成するためにマクロを使用す
る
* Embedded LaTeX::           LaTexはorg-modeの文書では自在に使用することがで
きる

Structural markup elements



* Document title::           どこからタイトルが取り出されるか
* Headings and sections::    文書の構造はエクスポートの設定で確認できる
* Table of contents::        コンテンツのテーブルの条件と場所
* Initial text::             最初の見出しより前に書かれた文
* Lists::                    Lists
* Paragraphs::               Paragraphs
* Footnote markup::          Footnotes
* Emphasis and monospace::   Bold, italic, etc.
* Horizontal rules::         線を作る
* コメント行::          何がエクスポートされないか

Embedded @LaTeX{}



* Special symbols::          ギリシャ文字や他の記号
* Subscripts and superscripts::  テキストを上付き／下付きにする簡単な構文
* LaTeX fragments::          複雑な数式を簡単に作成する
* Previewing LaTeX fragments::  このsnippetは何と似ているか
* CDLaTeX mode::             数式の入力をスピードアップする

Exporting



* Selective export::         タグを使ってツリーを選択したり排除したりする
* Export options::           ファイル毎のエクスポート設定
* The export dispatcher::    どのようにエクスポートのコマンドにアクセスするか
* ASCII/Latin-1/UTF-8 export::  文字コードの変換を伴う通常のファイルへのエク
スポート
* HTML export::              HTMLへのエクスポート
* LaTeX and PDF export::     @LaTeX{}へのエクスポート、そしてPDFへ変換のプロセス
* DocBook export::           DocBookへのエクスポート
* TaskJuggler export::       TaskJugglerへのエクスポート
* Freemind export::          Freemindのマインドマップへのへエクスポート
* XOXO export::              XOXOへのエクスポート
* iCalendarエクスポート::  iCalendar形式へのエクスポート

HTML export



* HTML Export commands::     HTMLへのエクスポートをどうやって起動するか
* Quoting HTML tags::        Org-modeにHTMLを直接書き込む
* Links in HTML export::     リンクはどのように解釈されフォーマットされるか
* Tables in HTML export::    テーブルのフォーマットをどのように修正するか
* Images in HTML export::    HTMLの出力にどのように図形を挿入するか
* Math formatting in HTML export::  web上でも美しい数式
* Text areas in HTML export::  例示を表現するための別の方法
* CSS support::              出力の見栄えを変更する
* JavaScript support::       webブラウザ上で説明や折りたたみを表示する

@LaTeX{}とPDFのエクスポート



* LaTeX/PDF export commands::  どのキーでどのコマンドが起動するのか
* Header and sectioning::    ファイル構造を出力するための準備
* Quoting LaTeX code::       @LaTeX{}コードの統合
* Tables in LaTeX export::   @LaTeX{}に表をエクスポートする際のオプション
* Images in LaTeX export::   @LaTeX{}の出力に図を挿入する方法
* Beamerクラスのエクスポート::  ファイルをプレゼンテーション資料に変える

DocBook export



* DocBook export commands::  DocBookエクスポートの起動方法
* Quoting DocBook code::     DocBookコードをOrgファイルに取りこむ
* Recursive sections::       DocBookで繰り返し使われるセクション
* Tables in DocBook export::  表はHTMLのテーブルとして出力される
* Images in DocBook export::  DocBookの出力に図を挿入する方法
* Special characters::       特殊文字の処理方法

Publishing



* Configuration::            プロジェクトの定義
* Uploading files::          ファイルをサーバにアップロードする方法
* Sample configuration::     プロジェクトのサンプル
* 公開の開始::          公開するのに使うコマンド

Configuration



* Project alist::            主な設定用の変数
* Sources and destinations::  ここからそこまで
* Selecting files::          どのファイルがプロジェクトの一部なのか
* Publishing action::        公開を行う関数の設定
* Publishing options::       HTMLエクスポート時の調整
* Publishing links::         どのリンクを公開した後も有効にしておくか
* Sitemap::                  全てのページリストの生成
* Generating an index::      ページを超えたインデックス

Sample configuration



* Simple example::           1コンポーネントでの公開
* Complex example::          複数コンポーネントでの公開

ソースコードとの連携



* Structure of code blocks::  Code block syntax described
* Editing source code::      言語のメジャーモードを用いた編集
* Exporting code blocks::    コード(と/または)結果のエクスポート
* Extracting source code::   ソースコードのみのファイルの作成
* Evaluating code blocks::   Place results of evaluation in the Org-mode 
                               buffer
* Library of Babel::         有用なコードブロックのライブラリを読む，そして貢
献する
* Languages::                コードブロックがサポートする言語一覧
* Header arguments::         Configure code block functionality
* Results of evaluation::    評価の結果を操作する方法
* Noweb reference syntax::   Org-modeでの文芸的プログラミング
* Key bindings and useful functions::  コードブロックを素早く操作する
* バッチ処理::          コマンドラインから関数を呼び出す

Header arguments



* Using header arguments::   ヘッダー引数を設定するための別の方法
* Specific header arguments::  ヘッダー引数のリスト

Using header arguments



* System-wide header arguments::  全体的な初期値を設定する
* Language-specific header arguments::  言語ごとに初期値を設定する
* Buffer-wide header arguments::  特定のバッファで初期値を設定する
* Header arguments in Org-mode properties::  ヘッダーまたはバッファーに初期値
を設定する
* Code block specific header arguments::  値を設定するうえで最も一般的な方法
* Header arguments in function calls::  最も細かいレベル

Specific header arguments



* var::                      引数をコードブロックに渡す
* results::                  結果のタイプ及び操作と収集方法を特定する
* file::                     ファイルを出力するパスを設定する
* dir::                      コードブロックの実行結果を出力する(可能ならばリ
モートの)ディレクトリを特定する
* exports::                  コードと(または)実行結果を出力する
* 抽出::                   抽出の有無をトグルしてファイル名を特定する
* mkdirp::                   抽出している間、ターゲットファイルの親ディレクト
リの生成をトグルする
* comments::                 tangleされたコードファイルでコメントの挿入をトグ
ルする
* no-expand::                tangle中に変数割り当てとnowebの展開をオフにする
* session::                  コード評価の状態を保存する
* noweb::                    noweb参照の展開をトグルする
* cache::                    未変更のコードブロックの再評価を回避する
* sep::                      Org-modeの外部に表を出力するための区切り文字
* hlines::                   テーブルの水平ラインを制御する
* colnames::                 テーブルの列名称を制御する
* rownames::                 テーブルの行名称を制御する
* shebang::                  tangleされたファイルを実行可能形式にする
* eval::                     特定のコードブロックの評価を制限する

Miscellaneous



* Completion::               M-TABはあなたが何を必要としているか知っています
* Easy Templates::           構造的な要素の素早い挿入
* Speed keys::               見出しの開始位置で使うの電撃的なコマンド
* Code evaluation security::  Org-modeのファイルはインラインのコードを評価す
る
* Customization::            Org-modeをユーザの好みに合わせる
* In-buffer settings::       「#+KEYWORDS」の概要
* The very busy C-c C-c key::  わからなかったら「C-c C-c」
* Clean view::               アウトラインの「*」の並びを取り除く
* TTY keys::                 Org-modeをtty端末で使う
* Interaction::              Emacsの他のパッケージ

他のパッケージとの関係



* Cooperation::              Orgと連携するパッケージ
* Conflicts::                衝突を起こすパッケージ

Hacking



* Hooks::                    Orgの内部にアクセスするのはどれ？
* Add-on packages::          利用できるエクステンション
* Adding hyperlink types::   新しいリンクタイプの作成
* Context-sensitive commands::  機能的なコマンドの追加方法
* Tables in arbitrary syntax::  @LaTeX{}のためのOrgtblと他のプログラム
* Dynamic blocks::           自動的にブロック内に挿入する
* Special agenda views::     カスタマイズされたビュー
* Extracting agenda information::  アジェンダ情報の後処理
* Using the property API::   項目のプロパティを使ったプログラミング
* マッピングAPIを使う::  選択した項目、または全てのマッピング

任意のシンタックスによる表やリスト



* Radio tables::             ラジオテーブルの送受信
* A LaTeX example::          少しずつ、チュートリアルのようなものを
* Translator functions::     コピーと修正
* ラジオリスト::       リストでも同じように

MobileOrg



* Setting up the staging area::  モバイルデバイスとはどこでデータをやりとりす
れば良いですか？
* Pushing to MobileOrg::     Orgファイルとアジェンダをアップロードする
* MobileOrgからpullする::  キャプチャした項目とフラグを立てた項目を統合する

@end detailmenu
@end menu

@node Introduction, Document Structure, Top, Top
@chapter Introduction
@cindex はじめに

@menu
* Summary::                  Org-modeで何ができるか
* Installation::             Org-modeのインストール
* Activation::               Org-modeを特定のバッファで有効にする方法
* Feedback::                 バグ報告、アイデア、パッチなど
* Conventions::              マニュアルで使われる植字の慣例
@end menu

@node Summary, Installation, Introduction, Introduction
@section Summary
@cindex 概要

Org-modeはノートを保存したり，TODOリストを管理したり，プロジェクトの計画を素
早く効率良く行うプレーンテキストのシステムのためのEmacsのモードです．

Org-modeは，複数のプロジェクトに関連するリストや情報を含んだ，プレーンなテキ
スト形式のノートをまとめることで，組織的に結びついたタスクを管理します．Org-modeは
，アウトラインモードを元に実装されています．そのため，大きなファイルの内容を
わかりやすく構造化された状態に保つことが可能です．文書の見出しや本文の表示と
非表示を切り替えて，全体を把握しながら文書を編集するときには，ツリー形式をと
ると便利です．表は，ビルトインされたテーブルエディタで簡単に作ることができま
す．Org-modeは，TODOアイテム，デッドライン，タイムスタンプ，そしてスケジュー
ル管理に対応しています．スケジュール管理は，タスクを動的にアジェンダへ蓄積し
ます．アジェンダは，Emacsのcalendarとdiaryの多くの機能を利用し，スムーズに統
合しています．プレーンテキストのURLに似たリンクは，ウェブサイト，メール，ネッ
トのメッセージ，BBDBのデータ，そして，プロジェクトに関連するどのようなファイ
ルに対しても結びついています．印刷したりノートを共有するために，Org-modeのフ
ァイルは，構造化されたアスキー形式のファイルやHTMLのファイル，または（TODOと
アジェンダアイテムに限り）iCalendar形式のファイルにエクスポートできます．リン
クの張られたウェブページ一式を公開するツールとしても役立ちます．

プロジェクトを計画する環境として，Org-modeは，見出しとなるノードにメタデータ
を追加することで動作します．そのメタデータに基づくことで，クエリの中から特定
のエントリーを抽出でき，動的な@i{agenda views}を生成します．

Org-modeは，Org-Babel環境を含んでいます．この環境はあなたに次のようなことを許
可します．すなわち，ファイルの中に組み込まれたソースコードのブロックを動作さ
せること，コードの評価，文書化，そして，文芸的プログラミングを容易にすること
です．

表計算ソフトと互換性のあるOrg-modeの自動的で文脈依存な表編集機能は，マイナー
モードのOrgtblを動かすことで，どのようなメジャーモードにも組み込むことができ
ます．表を変換することで，たとえば@LaTeX{}の表のように，任意のファイルタイプで表を
維持することができます．構造編集とリスト生成の機能は，マイナーモードのOrgstructに
よって，Org-modeの外部で利用することができます．

Org-modeは，単純なものは単純なまま保持します．初めて起動したOrg-modeは，わか
りやすく，簡単に使えるアウトライナーのように感じるはずです．Org-modeに複雑さ
はありませんが，数多くの機能が必要とする時に使えます．Org-modeはツールボック
スであり，様々な方法で，そして様々な目的で利用できます．例えば，

@example
@r{@bullet{} 視覚的に表示が循環し，構造を編集するように拡張されたアウトライナー}
@r{@bullet{} 構造化されたノートを取るためのアスキーシステムと表編集機能}
@r{@bullet{} TODOリストの編集機能}
@r{@bullet{} 締切日とスケジュールを含む完全なアジェンダと予定表}
@pindex GTD, Getting Things Done
@r{@bullet{} Devid Allen 氏のGTDシステムを実行するための環境}
@r{@bullet{} シンプルなハイパーテキストシステム（HTMLと@LaTeX{}エクスポートを含む）}
@r{@bullet{} 内部リンクで構成されたウェブページ群を生成するための公開ツール}
@r{@bullet{} 文芸的プログラミングのための環境}
@end example


@cindex FAQ
最新のOrg-modeへのリンクを提供するOrg-modeのためのウェブページがあります．追
加情報やFAQ，チュートリアルなどがあります．@uref{http://orgmode.org}で公開されてい
ます．

@cindex print edition
このマニュアルのバージョン7.3は@uref{http://www.network-theory.co.uk/org/manual/, paperback book from Network Theory Ltd.}で
手に入ります．

@page


@node Installation, Activation, Summary, Introduction
@section Installation
@cindex インストール
@cindex XEmacs

@b{Important:}
@i{もしあなたが，Emacsに含まれた古いバージョンのOrgを利用している，もしくは，
XEmacsのパッケージを利用している場合には，このセクションを飛ばして直接@ref{Activation}に
移動してください．あなたのEmacsに含まれているOrg（もし存在するならば）のバー
ジョンを見るためには，@kbd{M-x load-library RET org}を実行してから，@kbd{M-x org-version}を
実行してください．}

もしすでにインターネットからOrgをダウンロードしているならば，@file{.zip}か@file{.tar}も
しくはGitアーカイブかは問いませんが，以下の手順に沿ってインストールしてくださ
い．まず，配布されたOrgのディレクトリを解凍しそこに移動します．次に，@file{Makefile}の
最初のセクションを編集します．Emacsライブラリの名前を記入しなければなりません
．たとえば，@file{emacs}もしくは@file{xemacs}のような名前です．最後に，ローカルのLispと
Infoファイルが保存されているディレクトリへのパスを記入します．もしも，あなが
システムのディレクトリへのアクセス権を持っていないならば，Emacsのロードパスに
サブディレクトリとして@file{lisp}を加えることで，配布されたOrgのディレクトリから直
接Orgを動かすことが簡単にできます．そのようにするために，@file{.emacs}に次の行を加
えてください．

@example
(setq load-path (cons "~/path/to/orgdir/lisp" load-path))
@end example

@noindent
もし@file{contrib}サブディレクトリのコードを使うのならば，このディレクトリについて
も同様のステップを実行します．

@example
(setq load-path (cons "~/path/to/orgdir/contrib/lisp" load-path))
@end example

@noindent Now byte-compile the Lisp files with the shell command:

@example
make
@end example

@noindent If you are running Org from the distribution directory, this is
これですべてです．もしOrg-modeをシステムディレクトリにインストールしたい場合
には，管理者権限で次のコマンドを使います．

@example
make install
@end example

INFOファイルのインストールは，システムに依存します．これは，@file{install-info}プ
ログラムにおける違いに原因があります．Debianであれば，INFOファイルはカレント
ディレクトリにインストールされ，INFO
directory
ファイルを変更します．その他の多くのシステムでは，それぞれのファイルは，別々
に正しいディレクトリにコピーされる必要があります．そして，@file{install-info}がデ
ィレクトリファイルだけを修正します．次のコマンドのうち必要なものをシステムの
文書を参考に調べてください．

@example
make install-info
make install-info-debian
@end example

次に，以下の一行を@file{.emacs}に追加します．これはEmacsが，Org-modeが開始する時に
は即座に読み込まれないファイルに含まれる関数を自動的に読み込めるようにするた
めに必要です．
@lisp
(require 'org-install)
@end lisp

次節の解説ようにOrg-modeをアクティベーションすることを忘れないでください．
@page

@node Activation, Feedback, Installation, Introduction
@section Activation
@cindex activation
@cindex autoload
@cindex グローバルなキーバインド
@cindex キーバインド（グローバル）

拡張子が@file{.org}のファイルがOrg-modeを利用することを確実にするために，次の行を
@file{.emacs}に追加します．
@lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
@end lisp
@noindent Org mode buffers need font-lock to be turned on - this is the
これはEmacsで標準の設定です
@footnote{もしグローバルにfont-lockを使わない場合は，@code{(add-hook 'org-mode-hook 'turn-on-font-lock)}を使いOrg-modeのバッファについて有効化してください．}．

Org-modeの4つのコマンド（@command{org-store-link}, @command{org-capture},
@command{org-agenda},
@command{org-iswitchb}）は，グローバルキーを割り当てて使いやすくするべきでしょう．言い換えれば，Org-modeのバッファだけではなく，Emcasでいつでも使えるようにします．これらのキーバインドとして以下を割り当てることをお勧めします．自分の環境に応じて適当にキーを変更してください．
@lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
@end lisp

@cindex Org-mode（利用開始）
この設定をすると，拡張子が@samp{.org}のファイルは，Org-modeに設定されます．別の方
法として，ファイルの一行目に次のような一文を追加することでも，Org-modeに設定
できます．

@example
MY PROJECTS    -*- mode: org; -*-
@end example

@vindex org-insert-mode-line-in-empty-file
@noindent which will select Org-mode for this buffer no matter what
（nonintent問題箇所）変数@code{org-insert-mode-line-in-empty-file}も確認してくださ
い．

Org-modeの多くのコマンドは，リージョンが@i{active}な場合に動作します．アクティ
ブなリージョンをハイライトするためには，@code{transient-mark-mode}（XEmacsでは@code{zmacs-regions}）
を有効にする必要があります．Emacs23では標準で有効になていますが，Emacs22では
次のコマンドを使う必要があります．
@lisp
(transient-mark-mode 1)
@end lisp
@noindent If you do not like @code{transient-mark-mode}, you can create an
（nointent問題箇所）リージョンを選択するためにマウスを利用できます．もしくは
，カーソルを移動する前に@kbd{C-@key{SPC}}を二回押します．

@node Feedback, Conventions, Activation, Introduction
@section Feedback
@cindex フィードバック
@cindex バグレポート
@cindex メンテナー
@cindex 著者

Org-modeで問題を発見した場合，あるいは質問や意見，アイディアがある場合には，
Org-modeのメーリングリスト@email{emacs-orgmode@@gnu.org}へメールしてください．あなたがメーリングリストのメンバーでないと，メールは管理者が承認した後にメーリングリストへ転送されます
@footnote{メーリングリストの管理者の仕事量を最小化するために，ぜひメーリングリストの購読を検討してください．}．

バグをレポートする時は，まず始めに最新バージョンのOrg-modeを利用して該当のバ
グが再現されるか試してください．古いバージョンを利用している場合，すでにその
バグが修正されている可能性が高いです．バグの再現性が確認できたならば，レポー
トを準備して可能な限り多くの情報を提供してください．具体的には，Emacsのバージ
ョン情報（@kbd{M-x emacs-version @key{RET}}）とOrg-modeのバージョン情報（@kbd{M-x org-version @key{RET}}），また，Org-modeに関連する@file{.emacs}の
設定をバグレポートに記載してください．このようなバグレポートの形式を守るため
の最も簡単な方法は，次のコマンドを利用します．
@example
@kbd{M-x org-submit-bug-report}
@end example
@noindent which will put all this information into an Emacs mail buffer so
（nointent問題箇所）あなたがバグについての説明を書き加えればよいだけの状態．
Emacsを利用してメールを送信しない場合は，テンプレートの内容をメールクライアン
トにコピー＆ペーストしてください．

もしもエラーが発生したら，バックトレースが非常に便利です（どのように作るのか
は以下を参照してください）．しばしば次の明瞭な情報を含む小さな凡例ファイルが
手助けになります．

@enumerate
@item 正確に何を実行したのか
@item 何が起きることを期待していたのか
@item 期待と異なり何が起こったのか
@end enumerate
@noindent Thank you for helping to improve this program.

@subsubheading 便利なバックトレースを生成する方法

@cindex エラーのバックトレース
Org-modeを利用している時に，理解できないメッセージのエラーが発生したら，バグ
を発見した可能性があります．エラーを報告する最良の方法は，すでに説明したバグ
レポートの書式に加えて，@emph{backtrace}を提供することです．バックトレースは，ビル
トインされたデバッガーによるエラーの発生箇所とどのように発生したかについての
情報です．以下に，有用なバックトレースを生成する手順を示します．

@enumerate
@item
コンパイルされていないOrg-modeのLispファイル群を再読み込みする．バックトレー
スは，コンパイルされていないコードを利用して生成したバックトレースは，より多
くの情報を含みます．これを実行するためには，次のコマンドを実行します．
@example
C-u M-x org-reload RET
@end example
@noindent
もしくは，@code{Org -> Refresh/Reload -> Reload Org uncompiled}をメニューから選択
します．
@item
オプションメニュー@code{Options}から，@code{Enter Debugger on Error}（XEmacsでは，この
オプションは@code{Troubleshooting}サブメニューにあります）を選択する．
@item
エラーを再現するために必要な操作を行なってください．実行した操作を忘れずにメ
モしておいてください．
@item
エラーが再現されると，@file{*Backtrace*}バッファが画面上に表示されます．このバッフ
ァを別のファイルとして保存し（例えば@kbd{C-x C-w}を使って），バグレポートに添付し
ます．
@end enumerate

@node Conventions, , Feedback, Introduction
@section 本マニュアルで使われる植字の置き換え

Org-modeは，3種類のキーワードを使います．TODOキーワード，タグ，プロパティです
．このマニュアルでは次のように植字を使い分けます．

@table @code
@item TODO
@itemx WAITING
TODOキーワードは，すべて大文字で記述されます．ユーザが定義する場合も同様です
．
@item boss
@itemx ARCHIVE
ユーザ定義のタグは，小文字で記述されます．特別な意味を持つビルトインされたタ
グは，すべて大文字で記述されます．
@item Release
@itemx PRIORITY
ユーザ定義のプロパティは，大文字で始めて他を小文字で記述されます．特別な意味
を持つビルトインされたプロパティは，すべて大文字で記述されます．
@end table

このマニュアルでは，Org-modeの機能を利用するためのキーバインドと，対応するコ
マンドの両方を表記します．Org-modeは，しばしば異なる関数に対して同じキーバイ
ンドを使います（これはコンテクストに依存しています）．そのようなキーバインド
が割り振られたコマンドには，@code{org-metaright}のような一般的な名称があります．こ
のマニュアルでは，可能な限り一般的なコマンドを用いて内部的に呼び出される関数
の名称を提示します．例えば，ドキュメントの構造についての章では，@kbd{M-@key{right}}は@code{org-do-demote}を
呼び出すように表記します．一方で，テーブルについての章では，@code{org-table-move-column-right}を
呼び出すように表記します．

もし望むならば，@file{org.texi}にある@code{cmdnames}フラグの設定を外すことで，コマンド
の名称を表示しないようにマニュアルをコンパイルすることができます．

@node Document Structure, Tables, Introduction, Top
@chapter ドキュメントの構造
@cindex document structure
@cindex structure of document

Org is based on Outline mode and provides flexible commands to edit the
structure of the document.

@menu
* Outlines::                 Org-modeはoutline-modeをベースにしています
* Headlines::                org-modeの階層構造の見出しをどう組み込むか
* Visibility cycling::       簡単な操作で表示、非表示を切り替える
* Motion::                   他の見出しにジャンプする
* Structure editing::        見出しの順序と階層を変更する
* Sparse trees::             文脈の中に埋め込まれた一致
* Plain lists::              １つのエントリーの中に階層のある構造を追加する
* Drawers::                  いろいろなものを隠す
* Blocks::                   ブロック単位で折りたたむ
* Footnotes::                org-modeの構文の中で脚注はどのように規定されるの
か
* Orgstruct mode::           org-mode外のモードでの階層編集
@end menu

@node Outlines, Headlines, Document Structure, Document Structure
@section Outlines
@cindex outlines
@cindex Outline mode

Org is implemented on top of Outline mode.  Outlines allow a document to be
organized in a hierarchical structure, which (at least for me) is the best
representation of notes and thoughts.  An overview of this structure is
achieved by folding (hiding) large parts of the document to show only the
general document structure and the parts currently being worked on.  Org
greatly simplifies the use of outlines by compressing the entire show/hide
functionality into a single command, @command{org-cycle}, which is bound to
the @key{TAB} key.

@node Headlines, Visibility cycling, Outlines, Document Structure
@section Headlines
@cindex headlines
@cindex outline tree
@vindex org-special-ctrl-a/e
@vindex org-special-ctrl-k
@vindex org-ctrl-k-protect-subtree

Headlines define the structure of an outline tree.  The headlines in Org
start with one or more stars, on the left margin@footnote{See the variables @code{org-special-ctrl-a/e}, @code{org-special-ctrl-k}, and
@code{org-ctrl-k-protect-subtree} to configure special behavior of
@kbd{C-a}, @kbd{C-e}, and @kbd{C-k} in headlines.}.  For example:

@example
* Top level headline
** Second level
*** 3rd level
    some text
*** 3rd level
    more text

* Another top level headline
@end example

@noindent Some people find the many stars too noisy and would prefer an
outline that has whitespace followed by a single star as headline starters.
@ref{Clean view}, describes a setup to realize this.

@vindex org-cycle-separator-lines
An empty line after the end of a subtree is considered part of it and will
be hidden when the subtree is folded.  However, if you leave at least two
empty lines, one empty line will remain visible after folding the subtree,
in order to structure the collapsed view.  See the variable
@code{org-cycle-separator-lines} to modify this behavior.

@node Visibility cycling, Motion, Headlines, Document Structure
@section Visibility cycling
@cindex cycling, visibility
@cindex visibility cycling
@cindex trees, visibility
@cindex show hidden text
@cindex hide text

Outlines make it possible to hide parts of the text in the buffer.  Org uses
just two commands, bound to @key{TAB} and @kbd{S-@key{TAB}} to change the
visibility in the buffer.

@cindex subtree visibility states
@cindex subtree cycling
@cindex folded, subtree visibility state
@cindex children, subtree visibility state
@cindex subtree, subtree visibility state
@table @asis
@orgcmd{@key{TAB},org-cycle} @emph{Subtree cycling}: Rotate current subtree
among the states

@example
,-> FOLDED -> CHILDREN -> SUBTREE --.
'-----------------------------------'
@end example

@vindex org-cycle-emulate-tab
@vindex org-cycle-global-at-bob
The cursor must be on a headline for this to work@footnote{see, however, the option @code{org-cycle-emulate-tab}.}.  When the cursor is at the beginning
of the buffer and the first line is not a headline, then @key{TAB} actually
runs global cycling (see below)@footnote{see the option @code{org-cycle-global-at-bob}.}.  Also when called with a prefix argument
(@kbd{C-u @key{TAB}}), global cycling is invoked.

@cindex global visibility states
@cindex global cycling
@cindex overview, global visibility state
@cindex contents, global visibility state
@cindex show all, global visibility state
@orgcmd{S-@key{TAB},org-global-cycle}
@itemx C-u @key{TAB}
@emph{Global cycling}: Rotate the entire buffer among the states

@example
,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
'--------------------------------------'
@end example

When @kbd{S-@key{TAB}} is called with a numeric prefix argument N, the
CONTENTS view up to headlines of level N will be shown.  Note that inside
tables, @kbd{S-@key{TAB}} jumps to the previous field.

@cindex show all, command
@orgcmd{C-u C-u C-u @key{TAB},show-all} Show all, including drawers.
@orgcmd{C-c C-r,org-reveal} Reveal context around point, showing the current
entry, the following heading and the hierarchy above.  Useful for working
near a location that has been exposed by a sparse tree command
(@pxref{Sparse trees}) or an agenda command (@pxref{Agenda commands}).  With
a prefix argument show, on each level, all sibling headings.  With double
prefix arg, also show the entire subtree of the parent.  @orgcmd{C-c C-k,show-branches} Expose all the headings of the subtree, CONTENT view for
just one subtree.  @orgcmd{C-c C-x b,org-tree-to-indirect-buffer} Show the
current subtree in an indirect buffer@footnote{The indirect buffer @ifinfo (@pxref{Indirect Buffers,,,emacs,GNU Emacs Manual})
@end ifinfo
@ifnotinfo
(see the Emacs manual for more information about indirect buffers)
@end ifnotinfo
will contain the entire buffer, but will be narrowed to the
current tree.  Editing the indirect buffer will also change the original
buffer, but without affecting visibility in that buffer.}.  With a numeric
prefix argument N, go up to level N and then take that tree.  If N is
negative then go up that many levels.  With a @kbd{C-u} prefix, do not
remove the previously used indirect buffer.
@end table

@vindex org-startup-folded
@cindex @code{overview}, STARTUPキーワード
@cindex @code{content}, STARTUPキーワード
@cindex @code{showall}, STARTUPキーワード
@cindex @code{showeverything}, STARTUPキーワード

When Emacs first visits an Org file, the global state is set to OVERVIEW,
i.e.@: only the top level headlines are visible.  This can be configured
through the variable @code{org-startup-folded}, or on a per-file basis by
adding one of the following lines anywhere in the buffer:

@example
#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: showeverything
@end example

@cindex property, VISIBILITY
@noindent
Furthermore, any entries with a @samp{VISIBILITY} property
(@pxref{Properties and Columns}) will get their visibility adapted
accordingly.  Allowed values for this property are @code{folded},
@code{children}, @code{content}, and @code{all}.
@table @asis
@orgcmd{C-u C-u @key{TAB},org-set-startup-visibility} Switch back to the
startup visibility of the buffer, i.e.@: whatever is requested by startup
options and @samp{VISIBILITY} properties in individual entries.
@end table

@node Motion, Structure editing, Visibility cycling, Document Structure
@section Motion
@cindex motion, between headlines
@cindex jumping, to headlines
@cindex headline navigation
The following commands jump to other headlines in the buffer.

@table @asis
@orgcmd{C-c C-n,outline-next-visible-heading} Next heading.  @orgcmd{C-c C-p,outline-previous-visible-heading} Previous heading.  @orgcmd{C-c C-f,org-forward-same-level} Next heading same level.  @orgcmd{C-c C-b,org-backward-same-level} Previous heading same level.  @orgcmd{C-c C-u,outline-up-heading} Backward to higher level heading.  @orgcmd{C-c C-j,org-goto} Jump to a different place without changing the current outline
visibility.  Shows the document structure in a temporary buffer, where you
can use the following keys to find your destination:
@vindex org-goto-auto-isearch
@example
@key{TAB}         @r{Cycle visibility.}
@key{down} / @key{up}   @r{Next/previous visible headline.}
@key{RET}         @r{Select this location.}
@kbd{/}           @r{Do a Sparse-tree search}
@r{The following keys work if you turn off @code{org-goto-auto-isearch}}
n / p        @r{Next/previous visible headline.}
f / b        @r{Next/previous headline same level.}
u            @r{One level up.}
0-9          @r{Digit argument.}
q            @r{Quit}
@end example
@vindex org-goto-interface
@noindent
See also the variable @code{org-goto-interface}.
@end table

@node Structure editing, Sparse trees, Motion, Document Structure
@section Structure editing
@cindex structure editing
@cindex headline, promotion and demotion
@cindex promotion, of subtrees
@cindex demotion, of subtrees
@cindex subtree, cut and paste
@cindex pasting, of subtrees
@cindex cutting, of subtrees
@cindex copying, of subtrees
@cindex sorting, of subtrees
@cindex subtrees, cut and paste

@table @asis
@orgcmd{M-@key{RET},org-insert-heading}
@vindex org-M-RET-may-split-line
Insert new heading with same level as current.  If the cursor is in a plain
list item, a new item is created (@pxref{Plain lists}).  To force creation
of a new headline, use a prefix argument.  When this command is used in the
middle of a line, the line is split and the rest of the line becomes the new
headline@footnote{If you do not want the line to be split, customize the variable @code{org-M-RET-may-split-line}.}.  If the command is used at the
beginning of a headline, the new headline is created before the current
line.  If at the beginning of any other line, the content of that line is
made the new heading.  If the command is used at the end of a folded subtree
(i.e.@: behind the ellipses at the end of a headline), then a headline like
the current one will be inserted after the end of the subtree.
@orgcmd{C-@key{RET},org-insert-heading-respect-content} Just like
@kbd{M-@key{RET}}, except when adding a new heading below the current
heading, the new heading is placed after the body instead of before it.
This command works from anywhere in the entry.
@orgcmd{M-S-@key{RET},org-insert-todo-heading}
@vindex org-treat-insert-todo-heading-as-state-change
Insert new TODO entry with same level as current heading.  See also the
variable @code{org-treat-insert-todo-heading-as-state-change}.
@orgcmd{C-S-@key{RET},org-insert-todo-heading-respect-content} Insert new
TODO entry with same level as current heading.  Like @kbd{C-@key{RET}}, the
new headline will be inserted after the current subtree.
@orgcmd{@key{TAB},org-cycle} In a new entry with no text yet, the first
@key{TAB} demotes the entry to become a child of the previous one.  The next
@key{TAB} makes it a parent, and so on, all the way to top level.  Yet
another @key{TAB}, and you are back to the initial level.
@orgcmd{M-@key{left},org-do-promote} Promote current heading by one level.
@orgcmd{M-@key{right},org-do-demote} Demote current heading by one level.
@orgcmd{M-S-@key{left},org-promote-subtree} Promote the current subtree by
one level.  @orgcmd{M-S-@key{right},org-demote-subtree} Demote the current
subtree by one level.  @orgcmd{M-S-@key{up},org-move-subtree-up} Move
subtree up (swap with previous subtree of same level).
@orgcmd{M-S-@key{down},org-move-subtree-down} Move subtree down (swap with
next subtree of same level).  @orgcmd{C-c C-x C-w,org-cut-subtree} Kill
subtree, i.e.@: remove it from buffer but save in kill ring.  With a numeric
prefix argument N, kill N sequential subtrees.  @orgcmd{C-c C-x M-w,org-copy-subtree} Copy subtree to kill ring.  With a numeric prefix
argument N, copy the N sequential subtrees.  @orgcmd{C-c C-x C-y,org-paste-subtree} Yank subtree from kill ring.  This does modify the
level of the subtree to make sure the tree fits in nicely at the yank
position.  The yank level can also be specified with a numeric prefix
argument, or by yanking after a headline marker like @samp{****}.
@orgcmd{C-y,org-yank}
@vindex org-yank-adjusted-subtrees
@vindex org-yank-folded-subtrees
Depending on the variables @code{org-yank-adjusted-subtrees} and
@code{org-yank-folded-subtrees}, Org's internal @code{yank} command will
paste subtrees folded and in a clever way, using the same command as
@kbd{C-c C-x C-y}.  With the default settings, no level adjustment will take
place, but the yanked tree will be folded unless doing so would swallow text
previously visible.  Any prefix argument to this command will force a normal
@code{yank} to be executed, with the prefix passed along.  A good way to
force a normal yank is @kbd{C-u C-y}.  If you use @code{yank-pop} after a
yank, it will yank previous kill items plainly, without adjustment and
folding.  @orgcmd{C-c C-x c,org-clone-subtree-with-time-shift} Clone a
subtree by making a number of sibling copies of it.  You will be prompted
for the number of copies to make, and you can also specify if any timestamps
in the entry should be shifted.  This can be useful, for example, to create
a number of tasks related to a series of lectures to prepare.  For more
details, see the docstring of the command
@code{org-clone-subtree-with-time-shift}.  @orgcmd{C-c C-w,org-refile}
Refile entry or region to a different location.  @xref{Refiling notes}.
@orgcmd{C-c ^,org-sort-entries-or-items} Sort same-level entries.  When
there is an active region, all entries in the region will be sorted.
Otherwise the children of the current headline are sorted.  The command
prompts for the sorting method, which can be alphabetically, numerically, by
time (first timestamp with active preferred, creation time, scheduled time,
deadline time), by priority, by TODO keyword (in the sequence the keywords
have been defined in the setup) or by the value of a property.  Reverse
sorting is possible as well.  You can also supply your own function to
extract the sorting key.  With a @kbd{C-u} prefix, sorting will be
case-sensitive.  With two @kbd{C-u C-u} prefixes, duplicate entries will
also be removed.  @orgcmd{C-x n s,org-narrow-to-subtree} Narrow buffer to
current subtree.  @orgcmd{C-x n b,org-narrow-to-block} Narrow buffer to
current block.  @orgcmd{C-x n w,widen} Widen buffer to remove narrowing.
@orgcmd{C-c *,org-toggle-heading} Turn a normal line or plain list item into
a headline (so that it becomes a subheading at its location).  Also turn a
headline into a normal line by removing the stars.  If there is an active
region, turn all lines in the region into headlines.  If the first line in
the region was an item, turn only the item lines into headlines.  Finally,
if the first line is a headline, remove the stars from all headlines in the
region.
@end table

@cindex region, active
@cindex アクティブなリージョン
@cindex 暫定マークモード
When there is an active region (Transient Mark mode), promotion and demotion
work on all headlines in the region.  To select a region of headlines, it is
best to place both point and mark at the beginning of a line, mark at the
beginning of the first headline, and point at the line just after the last
headline to change.  Note that when the cursor is inside a table
(@pxref{Tables}), the Meta-Cursor keys have different functionality.


@node Sparse trees, Plain lists, Structure editing, Document Structure
@section Sparse trees
@cindex sparse trees
@cindex trees, sparse
@cindex folding, sparse trees
@cindex occur, command

@vindex org-show-hierarchy-above
@vindex org-show-following-heading
@vindex org-show-siblings
@vindex org-show-entry-below
An important feature of Org-mode is the ability to construct @emph{sparse trees} for selected information in an outline tree, so that the entire
document is folded as much as possible, but the selected information is made
visible along with the headline structure above it@footnote{See also the variables @code{org-show-hierarchy-above},
@code{org-show-following-heading}, @code{org-show-siblings}, and
@code{org-show-entry-below} for detailed control on how much context is
shown around each match.}.  Just try it out and you will see immediately how
it works.

Org-mode contains several commands creating such trees, all these commands
can be accessed through a dispatcher:

@table @asis
@orgcmd{C-c /,org-sparse-tree} This prompts for an extra key to select a
sparse-tree creating command.  @orgcmd{C-c / r,org-occur}
@vindex org-remove-highlights-with-change
Occur.  Prompts for a regexp and shows a sparse tree with all matches.  If
the match is in a headline, the headline is made visible.  If the match is
in the body of an entry, headline and body are made visible.  In order to
provide minimal context, also the full hierarchy of headlines above the
match is shown, as well as the headline following the match.  Each match is
also highlighted; the highlights disappear when the buffer is changed by an
editing command@footnote{This depends on the option @code{org-remove-highlights-with-change}}, or by pressing @kbd{C-c C-c}.
When called with a @kbd{C-u} prefix argument, previous highlights are kept,
so several calls to this command can be stacked.  @orgcmdkkc{M-g n,M-g M-n,next-error} Jump to the next sparse tree match in this buffer.
@orgcmdkkc{M-g p,M-g M-p,previous-error} Jump to the previous sparse tree
match in this buffer.
@end table


@noindent
@vindex org-agenda-custom-commands
For frequently used sparse trees of specific search strings, you can use the
variable @code{org-agenda-custom-commands} to define fast keyboard access to
specific sparse trees.  These commands will then be accessible through the
agenda dispatcher (@pxref{Agenda dispatcher}).  For example:

@lisp
(setq org-agenda-custom-commands
      '(("f" occur-tree "FIXME")))
@end lisp

@noindent will define the key @kbd{C-c a f} as a shortcut for creating
a sparse tree matching the string @samp{FIXME}.

The other sparse tree commands select headings based on TODO keywords, tags,
or properties and will be discussed later in this manual.

@kindex C-c C-e v
@cindex printing sparse trees
@cindex visible text, printing
To print a sparse tree, you can use the Emacs command
@code{ps-print-buffer-with-faces} which does not print invisible parts of
the document @footnote{This does not work under XEmacs, because XEmacs uses selective display for outlining, not text properties.}.  Or you can use the
command @kbd{C-c C-e v} to export only the visible part of the document and
print the resulting file.

@node Plain lists, Drawers, Sparse trees, Document Structure
@section Plain lists
@cindex plain lists
@cindex lists, plain
@cindex lists, ordered
@cindex ordered lists

Within an entry of the outline tree, hand-formatted lists can provide
additional structure.  They also provide a way to create lists of checkboxes
(@pxref{Checkboxes}).  Org supports editing such lists, and every exporter
(@pxref{Exporting}) can parse and format them.

Org knows ordered lists, unordered lists, and description lists.
@itemize @bullet
@item
@emph{Unordered} list items start with @samp{-}, @samp{+}, or
@samp{*}@footnote{When using @samp{*} as a bullet, lines must be indented or
they will be seen as top-level headlines.  Also, when you are hiding leading
stars to get a clean outline view, plain list items starting with a star may
be hard to distinguish from true headlines.  In short: even though @samp{*}
is supported, it may be better to not use it for plain list items.} as
bullets.
@item
@vindex org-plain-list-ordered-item-terminator
@vindex org-alphabetical-lists
@emph{Ordered} list items start with a numeral followed by either a period
or a right parenthesis@footnote{You can filter out any of them by configuring @code{org-plain-list-ordered-item-terminator}.}, such as
@samp{1.} or @samp{1)}@footnote{You can also get @samp{a.}, @samp{A.},
@samp{a)} and @samp{A)} by configuring @code{org-alphabetical-lists}.  To
minimize confusion with normal text, those are limited to one character
only.  Beyond that limit, bullets will automatically fallback to numbers.}.
If you want a list to start with a different value (e.g.@: 20), start the
text of the item with @code{[@@20]}@footnote{If there's a checkbox in the item, the cookie must be put @emph{before} the checkbox.  If you have
activated alphabetical lists, you can also use counters like
@code{[@@b]}.}.  Those constructs can be used in any item of the list in
order to enforce a particular numbering.
@item
@emph{Description} list items are unordered list items, and contain the
separator @samp{ :: } to distinguish the description @emph{term} from the
description.
@end itemize

Items belonging to the same list must have the same indentation on the first
line.  In particular, if an ordered list reaches number @samp{10.}, then the
2--digit numbers must be written left-aligned with the other numbers in the
list.  An item ends before the next line that is less or equally indented
than its bullet/number.

@vindex org-list-ending-method
@vindex org-list-end-regexp
@vindex org-empty-line-terminates-plain-lists
Two methods@footnote{To disable either of them, configure @code{org-list-ending-method}.} are provided to terminate lists.  A list
ends whenever every item has ended, which means before any line less or
equally indented than items at top level.  It also ends before two blank
lines@footnote{See also @code{org-empty-line-terminates-plain-lists}.}.  In
that case, all items are closed.  For finer control, you can end lists with
any pattern set in @code{org-list-end-regexp}.  Here is an example:

@example
@group
** Lord of the Rings
   My favorite scenes are (in this order)
   1. The attack of the Rohirrim
   2. Eowyn's fight with the witch king
      + this was already my favorite scene in the book
      + I really like Miranda Otto.
   3. Peter Jackson being shot by Legolas
      - on DVD only
      He makes a really funny face when it happens.
   But in the end, no individual scenes matter but the film as a whole.
   Important actors in this film are:
   - @b{Elijah Wood} :: He plays Frodo
   - @b{Sean Austin} :: He plays Sam, Frodo's friend.  I still remember
     him very well from his role as Mikey Walsh in @i{The Goonies}.
@end group
@end example

Org supports these lists by tuning filling and wrapping commands to deal
with them correctly@footnote{Org only changes the filling settings for Emacs.  For XEmacs, you should use Kyle E. Jones' @file{filladapt.el}.  To
turn this on, put into @file{.emacs}: @code{(require 'filladapt)}}, and by
exporting them properly (@pxref{Exporting}).  Since indentation is what
governs the structure of these lists, many structural constructs like
@code{#+BEGIN_...} blocks can be indented to signal that they belong to a
particular item.

@vindex org-list-demote-modify-bullet
If you find that using a different bullet for a sub-list (than that used for
the current list-level) improves readability, customize the variable
@code{org-list-demote-modify-bullet}.

@vindex org-list-automatic-rules
The following commands act on items when the cursor is in the first line of
an item (the line with the bullet or number).  Some of them imply the
application of automatic rules to keep list structure intact.  If some of
these actions get in your way, configure @code{org-list-automatic-rules} to
disable them individually.

@table @asis
@orgcmd{@key{TAB},org-cycle}
@vindex org-cycle-include-plain-lists
Items can be folded just like headline levels.  Normally this works only if
the cursor is on a plain list item.  For more details, see the variable
@code{org-cycle-include-plain-lists}.  If this variable is set to
@code{integrate}, plain list items will be treated like low-level
headlines.  The level of an item is then given by the indentation of the
bullet/number.  Items are always subordinate to real headlines, however; the
hierarchies remain completely separated.
@orgcmd{M-@key{RET},org-insert-heading}
@vindex org-M-RET-may-split-line
@vindex org-list-automatic-rules
Insert new item at current level.  With a prefix argument, force a new
heading (@pxref{Structure editing}).  If this command is used in the middle
of an item, that item is @emph{split} in two, and the second part becomes
the new item@footnote{If you do not want the item to be split, customize the variable @code{org-M-RET-may-split-line}.}.  If this command is executed
@emph{before item's body}, the new item is created @emph{before} the current
one.
@kindex M-S-@key{RET}
@item M-S-@key{RET}
Insert a new item with a checkbox (@pxref{Checkboxes}).
@orgcmd{@key{TAB},org-cycle} In a new item with no text yet, the first
@key{TAB} demotes the item to become a child of the previous one.
Subsequent @key{TAB}s move the item to meaningful levels in the list and
eventually get it back to its initial position.
@kindex S-@key{down}
@item S-@key{up}
@itemx S-@key{down}
@cindex shift-selection-mode
@vindex org-support-shift-select
Jump to the previous/next item in the current list, but only if
@code{org-support-shift-select} is off.  If not, you can still use paragraph
jumping commands like @kbd{C-@key{up}} and @kbd{C-@key{down}} to quite
similar effect.
@kindex M-S-@key{up}
@kindex M-S-@key{down}
@item M-S-@key{up}
@itemx M-S-@key{down}
Move the item including subitems up/down (swap with previous/next item of
same indentation).  If the list is ordered, renumbering is automatic.
@kindex M-@key{left}
@kindex M-@key{right}
@item M-@key{left}
@itemx M-@key{right}
Decrease/increase the indentation of an item, leaving children alone.
@kindex M-S-@key{left}
@kindex M-S-@key{right}
@item M-S-@key{left}
@itemx M-S-@key{right}
Decrease/increase the indentation of the item, including subitems.
Initially, the item tree is selected based on current indentation.  When
these commands are executed several times in direct succession, the
initially selected region is used, even if the new indentation would imply a
different hierarchy.  To use the new hierarchy, break the command chain with
a cursor motion or so.

As a special case, using this command on the very first item of a list will
move the whole list.  This behavior can be disabled by configuring
@code{org-list-automatic-rules}.  The global indentation of a list has no
influence on the text @emph{after} the list.
@kindex C-c C-c
@item C-c C-c
If there is a checkbox (@pxref{Checkboxes}) in the item line, toggle the
state of the checkbox.  In any case, verify bullets and indentation
consistency in the whole list.
@kindex C-c -
@vindex org-plain-list-ordered-item-terminator
@vindex org-list-automatic-rules
@item C-c -
Cycle the entire list level through the different itemize/enumerate bullets
(@samp{-}, @samp{+}, @samp{*}, @samp{1.}, @samp{1)}) or a subset of them,
depending on @code{org-plain-list-ordered-item-terminator}, the type of
list, and its position@footnote{See @code{bullet} rule in
@code{org-list-automatic-rules} for more information.}.  With a numeric
prefix argument N, select the Nth bullet from this list.  If there is an
active region when calling this, selected text will be changed into an
item.  With a prefix argument, all lines will be converted to list items.
If the first line already was a list item, any item marker will be removed
from the list.  Finally, even without an active region, a normal line will
be converted into a list item.
@kindex C-c *
@item C-c *
Turn a plain list item into a headline (so that it becomes a subheading at
its location). @xref{Structure editing}, for a detailed explanation.
@kindex C-c C-*
@item C-c C-*
Turn the whole plain list into a subtree of the current heading.  Checkboxes
(@pxref{Checkboxes}) will become TODO (resp. DONE) keywords when unchecked
(resp. checked).
@kindex S-@key{left}
@kindex S-@key{right}
@item S-@key{left}/@key{right}
@vindex org-support-shift-select
This command also cycles bullet styles when the cursor in on the bullet or
anywhere in an item line, details depending on
@code{org-support-shift-select}.
@kindex C-c ^
@item C-c ^
Sort the plain list.  You will be prompted for the sorting method:
numerically, alphabetically, by time, or by custom function.
@end table

@node Drawers, Blocks, Plain lists, Document Structure
@section Drawers
@cindex drawers
@cindex #+DRAWERS
@cindex visibility cycling, drawers

@vindex org-drawers
Sometimes you want to keep information associated with an entry, but you
normally don't want to see it.  For this, Org-mode has @emph{drawers}.
Drawers need to be configured with the variable
@code{org-drawers}@footnote{You can define drawers on a per-file basis with a line like @code{#+DRAWERS: HIDDEN PROPERTIES STATE}}.  Drawers look like
this:

@example
** This is a headline
   Still outside the drawer
   :DRAWERNAME:
   This is inside the drawer.
   :END:
   After the drawer.
@end example

Visibility cycling (@pxref{Visibility cycling}) on the headline will hide
and show the entry, but keep the drawer collapsed to a single line.  In
order to look inside the drawer, you need to move the cursor to the drawer
line and press @key{TAB} there.  Org-mode uses the @code{PROPERTIES} drawer
for storing properties (@pxref{Properties and Columns}), and you can also
arrange for state change notes (@pxref{Tracking TODO state changes}) and
clock times (@pxref{Clocking work time}) to be stored in a drawer
@code{LOGBOOK}.  If you want to store a quick note in the LOGBOOK drawer, in
a similar way to state changes, use

@table @kbd
@kindex C-c C-z
@item C-c C-z
Add a time-stamped note to the LOGBOOK drawer.
@end table

@node Blocks, Footnotes, Drawers, Document Structure
@section Blocks

@vindex org-hide-block-startup
@cindex blocks, folding
Org-mode uses begin...end blocks for various purposes from including source
code examples (@pxref{Literal examples}) to capturing time logging
information (@pxref{Clocking work time}).  These blocks can be folded and
unfolded by pressing TAB in the begin line.  You can also get all blocks
folded at startup by configuring the variable @code{org-hide-block-startup}
or on a per-file basis by using

@cindex @code{hideblocks}, STARTUP keyword
@cindex @code{nohideblocks}, STARTUP keyword
@example
#+STARTUP: hideblocks
#+STARTUP: nohideblocks
@end example

@node Footnotes, Orgstruct mode, Blocks, Document Structure
@section Footnotes
@cindex footnotes

Org-mode supports the creation of footnotes.  In contrast to the
@file{footnote.el} package, Org-mode's footnotes are designed for work on a
larger document, not only for one-off documents like emails.  The basic
syntax is similar to the one used by @file{footnote.el}, i.e.@: a footnote
is defined in a paragraph that is started by a footnote marker in square
brackets in column 0, no indentation allowed.  If you need a paragraph break
inside a footnote, use the @LaTeX{} idiom @samp{\par}.  The footnote
reference is simply the marker in square brackets, inside text.  For
example:

@example
The Org homepage[fn:1] now looks a lot better than it used to.
...
[fn:1] The link is: http://orgmode.org
@end example

Org-mode extends the number-based syntax to @emph{named} footnotes and
optional inline definition.  Using plain numbers as markers (as
@file{footnote.el} does) is supported for backward compatibility, but not
encouraged because of possible conflicts with @LaTeX{} snippets
(@pxref{Embedded LaTeX}).  Here are the valid references:

@table @code
@item [1]
A plain numeric footnote marker.  Compatible with @file{footnote.el}, but
not recommended because something like @samp{[1]} could easily be part of a
code snippet.
@item [fn:name]
A named footnote reference, where @code{name} is a unique label word, or,
for simplicity of automatic creation, a number.
@item [fn:: This is the inline definition of this footnote]
A @LaTeX{}-like anonymous footnote where the definition is given directly at
the reference point.
@item [fn:name: a definition]
An inline definition of a footnote, which also specifies a name for the
note.  Since Org allows multiple references to the same note, you can then
use @code{[fn:name]} to create additional references.
@end table

@vindex org-footnote-auto-label
Footnote labels can be created automatically, or you can create names
yourself.  This is handled by the variable @code{org-footnote-auto-label}
and its corresponding @code{#+STARTUP} keywords.  See the docstring of that
variable for details.

@noindent The following command handles footnotes:

@table @kbd
@kindex C-c C-x f
@item C-c C-x f
The footnote action command.

When the cursor is on a footnote reference, jump to the definition.  When it
is at a definition, jump to the (first) reference.

@vindex org-footnote-define-inline
@vindex org-footnote-section
@vindex org-footnote-auto-adjust
Otherwise, create a new footnote.  Depending on the variable
@code{org-footnote-define-inline}@footnote{The corresponding in-buffer setting is: @code{#+STARTUP: fninline} or @code{#+STARTUP: nofninline}}, the
definition will be placed right into the text as part of the reference, or
separately into the location determined by the variable
@code{org-footnote-section}.

When this command is called with a prefix argument, a menu of additional
options is offered:
@example
s   @r{Sort the footnote definitions by reference sequence.  During editing,}
    @r{Org makes no effort to sort footnote definitions into a particular}
    @r{sequence.  If you want them sorted, use this command, which will}
    @r{also move entries according to @code{org-footnote-section}.  Automatic}
    @r{sorting after each insertion/deletion can be configured using the}
    @r{variable @code{org-footnote-auto-adjust}.}
r   @r{Renumber the simple @code{fn:N} footnotes.  Automatic renumbering}
    @r{after each insertion/deletion can be configured using the variable}
    @r{@code{org-footnote-auto-adjust}.}
S   @r{Short for first @code{r}, then @code{s} action.}
n   @r{Normalize the footnotes by collecting all definitions (including}
    @r{inline definitions) into a special section, and then numbering them}
    @r{in sequence.  The references will then also be numbers.  This is}
    @r{meant to be the final step before finishing a document (e.g.@: sending}
    @r{off an email).  The exporters do this automatically, and so could}
    @r{something like @code{message-send-hook}.}
d   @r{Delete the footnote at point, and all definitions of and references}
    @r{to it.}
@end example
Depending on the variable @code{org-footnote-auto-adjust}@footnote{the corresponding in-buffer options are @code{fnadjust} and @code{nofnadjust}.},
renumbering and sorting footnotes can be automatic after each insertion or
deletion.

@kindex C-c C-c
@item C-c C-c
If the cursor is on a footnote reference, jump to the definition.  If it is
a the definition, jump back to the reference.  When called at a footnote
location with a prefix argument, offer the same menu as @kbd{C-c C-x f}.
@kindex C-c C-o
@kindex mouse-1
@kindex mouse-2
@item C-c C-o  @r{or} mouse-1/2
Footnote labels are also links to the corresponding definition/reference,
and you can use the usual commands to follow these links.
@end table

@node Orgstruct mode, , Footnotes, Document Structure
@section The Orgstruct minor mode
@cindex Orgstruct mode
@cindex minor mode for structure editing

If you like the intuitive way the Org-mode structure editing and list
formatting works, you might want to use these commands in other modes like
Text mode or Mail mode as well.  The minor mode @code{orgstruct-mode} makes
this possible.  Toggle the mode with @kbd{M-x orgstruct-mode}, or turn it on
by default, for example in Message mode, with one of:

@lisp
(add-hook 'message-mode-hook 'turn-on-orgstruct)
(add-hook 'message-mode-hook 'turn-on-orgstruct++)
@end lisp

When this mode is active and the cursor is on a line that looks to Org like
a headline or the first line of a list item, most structure editing commands
will work, even if the same keys normally have different functionality in
the major mode you are using.  If the cursor is not in one of those special
lines, Orgstruct mode lurks silently in the shadows.  When you use
@code{orgstruct++-mode}, Org will also export indentation and autofill
settings into that mode, and detect item context after the first line of an
item.

@node Tables, Hyperlinks, Document Structure, Top
@chapter Tables
@cindex tables
@cindex editing tables

Org comes with a fast and intuitive table editor.  Spreadsheet-like
calculations are supported using the Emacs @file{calc} package
@ifinfo
(@pxref{Top,Calc,,Calc,Gnu Emacs Calculator Manual}).
@end ifinfo
@ifnotinfo
(see the Emacs Calculator manual for more information about the Emacs
calculator).
@end ifnotinfo

@menu
* Built-in table editor::    単純なテーブル
* Column width and alignment::  自動設定を解除する
* Column groups::            縦の線を引き金にしてグループを作る
* Orgtbl mode::              マイナーモードとしてのテーブルエディタ
* The spreadsheet::          テーブルエディタはスプレッドシートの能力を持つ
* Org-Plot::                 org-modeのテーブルからプロットする
@end menu

@node Built-in table editor, Column width and alignment, Tables, Tables
@section The built-in table editor
@cindex table editor, built-in

Org makes it easy to format tables in plain ASCII.  Any line with @samp{|}
as the first non-whitespace character is considered part of a table.
@samp{|} is also the column separator.  A table might look like this:

@example
| Name  | Phone | Age |
|-------+-------+-----|
| Peter |  1234 |  17 |
| Anna  |  4321 |  25 |
@end example

A table is re-aligned automatically each time you press @key{TAB} or
@key{RET} or @kbd{C-c C-c} inside the table.  @key{TAB} also moves to the
next field (@key{RET} to the next row) and creates new table rows at the end
of the table or before horizontal lines.  The indentation of the table is
set by the first line.  Any line starting with @samp{|-} is considered as a
horizontal separator line and will be expanded on the next re-align to span
the whole table width.  So, to create the above table, you would only type

@example
|Name|Phone|Age|
|-
@end example

@noindent and then press @key{TAB} to align the table and start filling in
fields.  Even faster would be to type @code{|Name|Phone|Age} followed by
@kbd{C-c @key{RET}}.

@vindex org-enable-table-editor
@vindex org-table-auto-blank-field
When typing text into a field, Org treats @key{DEL}, @key{Backspace}, and
all character keys in a special way, so that inserting and deleting avoids
shifting other fields.  Also, when typing @emph{immediately after the cursor was moved into a new field with @kbd{@key{TAB}}, @kbd{S-@key{TAB}} or
@kbd{@key{RET}}}, the field is automatically made blank.  If this behavior
is too unpredictable for you, configure the variables
@code{org-enable-table-editor} and @code{org-table-auto-blank-field}.

@table @kbd
@tsubheading{Creation and conversion} @orgcmd{C-c |,org-table-create-or-convert-from-region} Convert the active region to
table. If every line contains at least one TAB character, the function
assumes that the material is tab separated.  If every line contains a comma,
comma-separated values (CSV) are assumed.  If not, lines are split at
whitespace into fields.  You can use a prefix argument to force a specific
separator: @kbd{C-u} forces CSV, @kbd{C-u C-u} forces TAB, and a numeric
argument N indicates that at least N consecutive spaces, or alternatively a
TAB will be the separator.  @* If there is no active region, this command
creates an empty Org table.  But it's easier just to start typing, like
@kbd{|Name|Phone|Age @key{RET} |- @key{TAB}}.

@c
@c
@c
@c
@tsubheading{Re-aligning and field motion} @orgcmd{C-c C-c,org-table-align}
Re-align the table without moving the cursor.
@orgcmd{<TAB>,org-table-next-field} Re-align the table, move to the next
field.  Creates a new row if necessary.
@orgcmd{S-@key{TAB},org-table-previous-field} Re-align, move to previous
field.  @orgcmd{@key{RET},org-table-next-row} Re-align the table and move
down to next row.  Creates a new row if necessary.  At the beginning or end
of a line, @key{RET} still does NEWLINE, so it can be used to split a
table.  @orgcmd{M-a,org-table-beginning-of-field} Move to beginning of the
current table field, or on to the previous field.
@orgcmd{M-e,org-table-end-of-field} Move to end of the current table field,
or on to the next field.

@c
@c
@c
@c
@c
@c
@c
@c
@tsubheading{Column and row editing}
@orgcmdkkcc{M-@key{left},M-@key{right},org-table-move-column-left,org-table-move-column-right}
Move the current column left/right.
@orgcmd{M-S-@key{left},org-table-delete-column} Kill the current column.
@orgcmd{M-S-@key{right},org-table-insert-column} Insert a new column to the
left of the cursor position.
@orgcmdkkcc{M-@key{up},M-@key{down},org-table-move-row-up,org-table-move-row-down}
Move the current row up/down.  @orgcmd{M-S-@key{up},org-table-kill-row} Kill
the current row or horizontal line.
@orgcmd{M-S-@key{down},org-table-insert-row} Insert a new row above the
current row.  With a prefix argument, the line is created below the current
one.  @orgcmd{C-c -,org-table-insert-hline} Insert a horizontal line below
current row.  With a prefix argument, the line is created above the current
line.  @orgcmd{C-c @key{RET},org-table-hline-and-move} Insert a horizontal
line below current row, and move the cursor into the row below that line.
@orgcmd{C-c ^,org-table-sort-lines} Sort the table lines in the region.  The
position of point indicates the column to be used for sorting, and the range
of lines is the range between the nearest horizontal separator lines, or the
entire table.  If point is before the first column, you will be prompted for
the sorting column.  If there is an active region, the mark specifies the
first line and the sorting column, while point should be in the last line to
be included into the sorting.  The command prompts for the sorting type
(alphabetically, numerically, or by time).  When called with a prefix
argument, alphabetic sorting will be case-sensitive.

@c
@c
@c
@tsubheading{Regions} @orgcmd{C-c C-x M-w,org-table-copy-region} Copy a
rectangular region from a table to a special clipboard.  Point and mark
determine edge fields of the rectangle.  If there is no active region, copy
just the current field.  The process ignores horizontal separator lines.
@orgcmd{C-c C-x C-w,org-table-cut-region} Copy a rectangular region from a
table to a special clipboard, and blank all fields in the rectangle.  So
this is the ``cut'' operation.  @orgcmd{C-c C-x C-y,org-table-paste-rectangle} Paste a rectangular region into a table.  The
upper left corner ends up in the current field.  All involved fields will be
overwritten.  If the rectangle does not fit into the present table, the
table is enlarged as needed.  The process ignores horizontal separator
lines.  @orgcmd{M-@key{RET},org-table-wrap-region} Split the current field
at the cursor position and move the rest to the line below.  If there is an
active region, and both point and mark are in the same column, the text in
the column is wrapped to minimum width for the given number of lines.  A
numeric prefix argument may be used to change the number of desired lines.
If there is no region, but you specify a prefix argument, the current field
is made blank, and the content is appended to the field above.

@tsubheading{Calculations}
@cindex formula, in tables
@cindex テーブルの中での計算
@cindex region, active
@cindex アクティブなリージョン
@cindex 暫定マークモード
@c
@orgcmd{C-c +,org-table-sum} Sum the numbers in the current column, or in
the rectangle defined by the active region.  The result is shown in the echo
area and can be inserted with @kbd{C-y}.
@orgcmd{S-@key{RET},org-table-copy-down}
@vindex org-table-copy-increment
When current field is empty, copy from first non-empty field above.  When
not empty, copy current field down to next row and move cursor along with
it.  Depending on the variable @code{org-table-copy-increment}, integer
field values will be incremented during copy.  Integers that are too large
will not be incremented.  Also, a @code{0} prefix argument temporarily
disables the increment.  This key is also used by shift-selection and
related modes (@pxref{Conflicts}).

@c
@tsubheading{Miscellaneous} @orgcmd{C-c `,org-table-edit-field} Edit the
current field in a separate window.  This is useful for fields that are not
fully visible (@pxref{Column width and alignment}).  When called with a
@kbd{C-u} prefix, just make the full field visible, so that it can be edited
in place.
@item M-x org-table-import
@c
Import a file as a table.  The table should be TAB or whitespace separated.
Use, for example, to import a spreadsheet table or data from a database,
because these programs generally can write TAB-separated text files.  This
command works by inserting the file into the buffer and then converting the
region to a table.  Any prefix argument is passed on to the converter, which
uses it to determine the separator.  @orgcmd{C-c |,org-table-create-or-convert-from-region} Tables can also be imported by
pasting tabular text into the Org buffer, selecting the pasted text with
@kbd{C-x C-x} and then using the @kbd{C-c |} command (see above under
@i{Creation and conversion}).
@item M-x org-table-export
@findex org-table-export
@vindex org-table-export-default-format
Export the table, by default as a TAB-separated file.  Use for data exchange
with, for example, spreadsheet or database programs.  The format used to
export the file can be configured in the variable
@code{org-table-export-default-format}.  You may also use properties
@code{TABLE_EXPORT_FILE} and @code{TABLE_EXPORT_FORMAT} to specify the file
name and the format for table export in a subtree.  Org supports quite
general formats for exported tables.  The exporter format is the same as the
format used by Orgtbl radio tables, see @ref{Translator functions}, for a
detailed description.
@end table

If you don't like the automatic table editor because it gets in your way on
lines which you would like to start with @samp{|}, you can turn it off with

@lisp
(setq org-enable-table-editor nil)
@end lisp

@noindent Then the only table command that still works is
@kbd{C-c C-c} to do a manual re-align.

@node Column width and alignment, Column groups, Built-in table editor, Tables
@section Column width and alignment
@cindex narrow columns in tables
@cindex alignment in tables

The width of columns is automatically determined by the table editor.  And
also the alignment of a column is determined automatically from the fraction
of number-like versus non-number fields in the column.

Sometimes a single field or a few fields need to carry more text, leading to
inconveniently wide columns.  Or maybe you want to make a table with several
columns having a fixed width, regardless of content.  To set@footnote{This feature does not work on XEmacs.} the width of a column, one field anywhere
in the column may contain just the string @samp{<N>} where @samp{N} is an
integer specifying the width of the column in characters.  The next re-align
will then set the width of this column to this value.

@example
@group
|---+------------------------------|               |---+--------|
|   |                              |               |   | <6>    |
| 1 | one                          |               | 1 | one    |
| 2 | two                          |     ----\     | 2 | two    |
| 3 | This is a long chunk of text |     ----/     | 3 | This=> |
| 4 | four                         |               | 4 | four   |
|---+------------------------------|               |---+--------|
@end group
@end example

@noindent
Fields that are wider become clipped and end in the string @samp{=>}.  Note
that the full text is still in the buffer but is hidden.  To see the full
text, hold the mouse over the field---a tool-tip window will show the full
content.  To edit such a field, use the command @kbd{C-c `} (that is
@kbd{C-c} followed by the backquote).  This will open a new window with the
full field.  Edit it and finish with @kbd{C-c C-c}.

@vindex org-startup-align-all-tables
When visiting a file containing a table with narrowed columns, the necessary
character hiding has not yet happened, and the table needs to be aligned
before it looks nice.  Setting the option
@code{org-startup-align-all-tables} will realign all tables in a file upon
visiting, but also slow down startup.  You can also set this option on a
per-file basis with:

@example
#+STARTUP: align
#+STARTUP: noalign
@end example

If you would like to overrule the automatic alignment of number-rich columns
to the right and of string-rich column to the left, you can use @samp{<r>},
@samp{c}@footnote{Centering does not work inside Emacs, but it does have an effect when exporting to HTML.} or @samp{<l>} in a similar fashion.  You may
also combine alignment and field width like this: @samp{<l10>}.

Lines which only contain these formatting cookies will be removed
automatically when exporting the document.

@node Column groups, Orgtbl mode, Column width and alignment, Tables
@section Column groups
@cindex grouping columns in tables

When Org exports tables, it does so by default without vertical lines
because that is visually more satisfying in general.  Occasionally however,
vertical lines can be useful to structure a table into groups of columns,
much like horizontal lines can do for groups of rows.  In order to specify
column groups, you can use a special row where the first field contains only
@samp{/}.  The further fields can either contain @samp{<} to indicate that
this column should start a group, @samp{>} to indicate the end of a column,
or @samp{<>} to make a column a group of its own.  Boundaries between column
groups will upon export be marked with vertical lines.  Here is an example:

@example
| N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
|---+-----+-----+-----+---------+------------|
| / |   < |     |   > |       < |          > |
| 1 |   1 |   1 |   1 |       1 |          1 |
| 2 |   4 |   8 |  16 |  1.4142 |     1.1892 |
| 3 |   9 |  27 |  81 |  1.7321 |     1.3161 |
|---+-----+-----+-----+---------+------------|
#+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))
@end example

It is also sufficient to just insert the column group starters after every
vertical line you would like to have:

@example
|  N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
|----+-----+-----+-----+---------+------------|
| /  | <   |     |     | <       |            |
@end example

@node Orgtbl mode, The spreadsheet, Column groups, Tables
@section The Orgtbl minor mode
@cindex Orgtbl mode
@cindex minor mode for tables

If you like the intuitive way the Org table editor works, you might also
want to use it in other modes like Text mode or Mail mode.  The minor mode
Orgtbl mode makes this possible.  You can always toggle the mode with
@kbd{M-x orgtbl-mode}.  To turn it on by default, for example in Message
mode, use

@lisp
(add-hook 'message-mode-hook 'turn-on-orgtbl)
@end lisp

Furthermore, with some special setup, it is possible to maintain tables in
arbitrary syntax with Orgtbl mode.  For example, it is possible to construct
@LaTeX{} tables with the underlying ease and power of Orgtbl mode, including
spreadsheet capabilities.  For details, see @ref{Tables in arbitrary syntax}.

@node The spreadsheet, Org-Plot, Orgtbl mode, Tables
@section The spreadsheet
@cindex テーブルの中での計算
@cindex spreadsheet capabilities
@cindex @file{calc} package

The table editor makes use of the Emacs @file{calc} package to implement
spreadsheet-like capabilities.  It can also evaluate Emacs Lisp forms to
derive fields from other fields.  While fully featured, Org's implementation
is not identical to other spreadsheets.  For example, Org knows the concept
of a @emph{column formula} that will be applied to all non-header fields in
a column without having to copy the formula to each relevant field.  There
is also a formula debugger, and a formula editor with features for
highlighting fields in the table corresponding to the references at the
point in the formula, moving these references by arrow keys

@menu
* References::               どうやって他のフィールドや範囲を参照するか
* Formula syntax for Calc::  Calcを使って計算する
* Formula syntax for Lisp::  Emacs Lispで数式を書く
* Field and range formulas::  特定の（範囲の）フィールドのための数式
* Column formulas::          カラム全体に有効な数式
* Editing and debugging formulas::  数式を修正する
* Updating the table::       依存関係にあるすべてのフィールドを再計算する
* Advanced features::        フィールド名、パラメータ、自動再計算
@end menu

@node References, Formula syntax for Calc, The spreadsheet, The spreadsheet
@subsection References
@cindex references

To compute fields in the table from other fields, formulas must reference
other fields or ranges.  In Org, fields can be referenced by name, by
absolute coordinates, and by relative coordinates.  To find out what the
coordinates of a field are, press @kbd{C-c ?} in that field, or press
@kbd{C-c @}} to toggle the display of a grid.

@subsubheading Field references
@cindex field references
@cindex references, to fields

Formulas can reference the value of another field in two ways.  Like in any
other spreadsheet, you may reference fields with a letter/number combination
like @code{B3}, meaning the 2nd field in the 3rd row.

@noindent
@vindex org-table-use-standard-references
Org prefers@footnote{Org will understand references typed by the user as @samp{B4}, but it will not use this syntax when offering a formula for
editing.  You can customize this behavior using the variable
@code{org-table-use-standard-references}.} to use another, more general
operator that looks like this:
@example
@@@var{row}$@var{column}
@end example

@noindent
and allows relative references, i.e. references relative to the row/column
of the field whose value is being computed.  These relative references make
it possible to store a formula only once and use it in many fields without
copying and modifying it.

Column references can be absolute like @samp{1}, @samp{2},...@samp{@var{N}},
or relative to the current column like @samp{+1} or @samp{-2}.  @code{$>}
references the last column in the table, and you can use offsets like
@code{$>-2}, meaning the third column from the right.

The row specification only counts data lines and ignores horizontal
separator lines (hlines).  Like with columns, you can use absolute row
numbers @samp{1}...@samp{@var{N}}, and row numbers relative to the current
row like @samp{+3} or @samp{-1}, and @code{@@>} references the last row in
the table@footnote{For backward compatibility you can also use special names like @samp{$LR5} and @samp{$LR12} to refer in a stable way to the 5th and
12th field in the last row of the table.  However, this syntax is
deprecated, it should not be used for new documents.}.  You may also specify
the row relative to one of the hlines: @samp{I} refers to the first
hline@footnote{Note that only hlines are counted that @emph{separate} table
lines.  If the table starts with a hline above the header, it does not
count.}, @samp{II} to the second, etc@.  @samp{-I} refers to the first such
line above the current line, @samp{+I} to the first such line below the
current line.  You can also write @samp{III+2} which is the second data line
after the third hline in the table.

@samp{0} refers to the current row and column.  Also, if you omit either the
column or the row part of the reference, the current row/column is implied.

Org's references with @emph{unsigned} numbers are fixed references in the
sense that if you use the same reference in the formula for two different
fields, the same field will be referenced each time.  Org's references with
@emph{signed} numbers are floating references because the same reference
operator can reference different fields depending on the field being
calculated by the formula.


Here are a few examples:

@example
@@2$3      @r{2nd row, 3rd column}
C2        @r{same as previous}
$5        @r{column 5 in the current row}
E&        @r{same as previous}
@@2        @r{current column, row 2}
@@-1$-3    @r{the field one row up, three columns to the left}
@@-I$2     @r{field just under hline above current row, column 2}
@end example

@subsubheading Range references
@cindex range references
@cindex references, to ranges

You may reference a rectangular range of fields by specifying two field
references connected by two dots @samp{..}.  If both fields are in the
current row, you may simply use @samp{$2..$7}, but if at least one field is
in a different row, you need to use the general @code{@@row$column} format
at least for the first field (i.e the reference must start with @samp{@@} in
order to be interpreted correctly).  Examples:

@example
$1..$3        @r{First three fields in the current row}
$P..$Q        @r{Range, using column names (see under Advanced)}
@@2$1..@@4$3    @r{6 fields between these two fields}
A2..C4        @r{Same as above}
@@-1$-2..@@-1   @r{3 numbers from the column to the left, 2 up to current row}
@@I..II        @r{Between first and second hline, short for @code{@@I..@@II}}
@end example

@noindent Range references return a vector of values that can be fed
into Calc vector functions.  Empty fields in ranges are normally suppressed,
so that the vector contains only the non-empty fields (but see the @samp{E}
mode switch below).  If there are no non-empty fields, @samp{[0]} is
returned to avoid syntax errors in formulas.

@subsubheading Field coordinates in formulas
@cindex field coordinates
@cindex coordinates, of field
@cindex row, of field coordinates
@cindex column, of field coordinates

For Calc formulas and Lisp formulas @code{@@#} and @code{$#} can be used to
get the row or column number of the field where the formula result goes.
The traditional Lisp formula equivalents are @code{org-table-current-dline}
and @code{org-table-current-column}.  Examples:

@example
if(@@# % 2, $#, string(""))   @r{column number on odd lines only}
$3 = remote(FOO, @@@@#$2)      @r{copy column 2 from table FOO into}
                             @r{column 3 of the current table}
@end example

@noindent For the second example, table FOO must have at least as many rows
as the current table.  Note that this is inefficient@footnote{The computation time scales as O(N^2) because table FOO is parsed for each field
to be copied.} for large number of rows.

@subsubheading Named references
@cindex named references
@cindex references, named
@cindex 名前（列やフィールド）
@cindex 計算中の定数
@cindex #+CONSTANTS

@vindex org-table-formula-constants
@samp{$name} is interpreted as the name of a column, parameter or constant.
Constants are defined globally through the variable
@code{org-table-formula-constants}, and locally (for the file) through a
line like

@example
#+CONSTANTS: c=299792458. pi=3.14 eps=2.4e-6
@end example

@noindent
@vindex constants-unit-system
@pindex constants.el
Also properties (@pxref{Properties and Columns}) can be used as constants in
table formulas: for a property @samp{:Xyz:} use the name @samp{$PROP_Xyz},
and the property will be searched in the current outline entry and in the
hierarchy above it.  If you have the @file{constants.el} package, it will
also be used to resolve constants, including natural constants like
@samp{$h} for Planck's constant, and units like @samp{$km} for
kilometers@footnote{@file{constants.el} can supply the values of constants
in two different unit systems, @code{SI} and @code{cgs}.  Which one is used
depends on the value of the variable @code{constants-unit-system}.  You can
use the @code{#+STARTUP} options @code{constSI} and @code{constcgs} to set
this value for the current buffer.}.  Column names and parameters can be
specified in special table lines.  These are described below, see
@ref{Advanced features}.  All names must start with a letter, and further
consist of letters and numbers.

@subsubheading Remote references
@cindex remote references
@cindex references, remote
@cindex references, to a different table
@cindex 名前（列やフィールド）
@cindex 計算中の定数
@cindex #+TBLNAME

You may also reference constants, fields and ranges from a different table,
either in the current file or even in a different file.  The syntax is

@example
remote(NAME-OR-ID,REF)
@end example

@noindent
where NAME can be the name of a table in the current file as set by a
@code{#+TBLNAME: NAME} line before the table.  It can also be the ID of an
entry, even in a different file, and the reference then refers to the first
table in that entry.  REF is an absolute field or range reference as
described above for example @code{@@3$3} or @code{$somename}, valid in the
referenced table.

@node Formula syntax for Calc, Formula syntax for Lisp, References, The spreadsheet
@subsection Formula syntax for Calc
@cindex formula syntax, Calc
@cindex syntax, of formulas

@c FIXME:  The link to the Calc manual in HTML does not work.
A formula can be any algebraic expression understood by the Emacs
@file{Calc} package.  @b{Note that @file{calc} has the non-standard
convention that @samp{/} has lower precedence than @samp{*}, so that
@samp{a/b*c} is interpreted as @samp{a/(b*c)}.} Before evaluation by
@code{calc-eval} (@pxref{Calling Calc from Your Programs,calc-eval,Calling Calc from Your Lisp Programs,Calc,GNU Emacs Calc Manual}), variable
substitution takes place according to the rules described above.
@cindex vectors, in table calculations
The range vectors can be directly fed into the Calc vector functions like
@samp{vmean} and @samp{vsum}.

@cindex format specifier
@cindex mode, for @file{calc}
@vindex org-calc-default-modes
A formula can contain an optional mode string after a semicolon.  This
string consists of flags to influence Calc and other modes during
execution.  By default, Org uses the standard Calc modes (precision 12,
angular units degrees, fraction and symbolic modes off).  The display
format, however, has been changed to @code{(float 8)} to keep tables
compact.  The default settings can be configured using the variable
@code{org-calc-default-modes}.

@example
p20           @r{set the internal Calc calculation precision to 20 digits}
n3 s3 e2 f4   @r{Normal, scientific, engineering, or fixed}
              @r{format of the result of Calc passed back to Org.}
              @r{Calc formatting is unlimited in precision as}
              @r{long as the Calc calculation precision is greater.}
D R           @r{angle modes: degrees, radians}
F S           @r{fraction and symbolic modes}
N             @r{interpret all fields as numbers, use 0 for non-numbers}
T             @r{force text interpretation}
E             @r{keep empty fields in ranges}
L             @r{literal}
@end example

@noindent
Unless you use large integer numbers or high-precision-calculation and
-display for floating point numbers you may alternatively provide a
@code{printf} format specifier to reformat the Calc result after it has been
passed back to Org instead of letting Calc already do the
formatting@footnote{The @code{printf} reformatting is limited in precision
because the value passed to it is converted into an @code{integer} or
@code{double}.  The @code{integer} is limited in size by truncating the
signed value to 32 bits.  The @code{double} is limited in precision to 64
bits overall which leaves approximately 16 significant decimal digits.}.  A
few examples:

@example
$1+$2                @r{Sum of first and second field}
$1+$2;%.2f           @r{Same, format result to two decimals}
exp($2)+exp($1)      @r{Math functions can be used}
$0;%.1f              @r{Reformat current cell to 1 decimal}
($3-32)*5/9          @r{Degrees F -> C conversion}
$c/$1/$cm            @r{Hz -> cm conversion, using @file{constants.el}}
tan($1);Dp3s1        @r{Compute in degrees, precision 3, display SCI 1}
sin($1);Dp3%.1e      @r{Same, but use printf specifier for display}
vmean($2..$7)        @r{Compute column range mean, using vector function}
vmean($2..$7);EN     @r{Same, but treat empty fields as 0}
taylor($3,x=7,2)     @r{Taylor series of $3, at x=7, second degree}
@end example

Calc also contains a complete set of logical operations.  For example

@example
if($1<20,teen,string(""))  @r{``teen'' if age $1 less than 20, else empty}
@end example

@node Formula syntax for Lisp, Field and range formulas, Formula syntax for Calc, The spreadsheet
@subsection Emacs Lisp forms as formulas
@cindex Lisp forms, as table formulas

It is also possible to write a formula in Emacs Lisp; this can be useful for
string manipulation and control structures, if Calc's functionality is not
enough.  If a formula starts with a single-quote followed by an opening
parenthesis, then it is evaluated as a Lisp form.  The evaluation should
return either a string or a number.  Just as with @file{calc} formulas, you
can specify modes and a printf format after a semicolon.  With Emacs Lisp
forms, you need to be conscious about the way field references are
interpolated into the form.  By default, a reference will be interpolated as
a Lisp string (in double-quotes) containing the field.  If you provide the
@samp{N} mode switch, all referenced elements will be numbers (non-number
fields will be zero) and interpolated as Lisp numbers, without quotes.  If
you provide the @samp{L} flag, all fields will be interpolated literally,
without quotes.  i.e., if you want a reference to be interpreted as a string
by the Lisp form, enclose the reference operator itself in double-quotes,
like @code{"$3"}.  Ranges are inserted as space-separated fields, so you can
embed them in list or vector syntax.  Here are a few examples---note how the
@samp{N} mode is used when we do computations in Lisp:

@example
@r{Swap the first two characters of the content of column 1}
  '(concat (substring $1 1 2) (substring $1 0 1) (substring $1 2))
@r{Add columns 1 and 2, equivalent to Calc's @code{$1+$2}}
  '(+ $1 $2);N
@r{Compute the sum of columns 1-4, like Calc's @code{vsum($1..$4)}}
  '(apply '+ '($1..$4));N
@end example

@node Field and range formulas, Column formulas, Formula syntax for Lisp, The spreadsheet
@subsection Field and range formulas
@cindex field formula
@cindex range formula
@cindex formula, for individual table field
@cindex formula, for range of fields

To assign a formula to a particular field, type it directly into the field,
preceded by @samp{:=}, for example @samp{:=vsum(@@II..III)}.  When you press
@key{TAB} or @key{RET} or @kbd{C-c C-c} with the cursor still in the field,
the formula will be stored as the formula for this field, evaluated, and the
current field will be replaced with the result.

@cindex #+TBLFM
Formulas are stored in a special line starting with @samp{#+TBLFM:} directly
below the table.  If you type the equation in the 4th field of the 3rd data
line in the table, the formula will look like @samp{@@3$4=$1+$2}.  When
inserting/deleting/swapping column and rows with the appropriate commands,
@i{absolute references} (but not relative ones) in stored formulas are
modified in order to still reference the same field.  Of course this is not
true if you edit the table structure with normal editing commands---then you
must fix the equations yourself.  Instead of typing an equation into the
field, you may also use the following command

@table @kbd
@orgcmd{C-u C-c =,org-table-eval-formula} Install a new formula for the
current field.  The command prompts for a formula with default taken from
the @samp{#+TBLFM:} line, applies it to the current field, and stores it.
@end table

The left-hand side of a formula can also be a special expression in order to
assign the formula to a number of different fields.  There is no keyboard
shortcut to enter such range formulas.  To add them, use the formula editor
(@pxref{Editing and debugging formulas}) or edit the @code{#+TBLFM:} line
directly.

@table @code
@item $2=
Column formula, valid for the entire column.  This is so common that Org
treats these formulas in a special way, see @ref{Column formulas}.
@item @@3=
Row formula, applies to all fields in the specified row.  @code{@@L=} means
the last row.
@item @@1$2..@@4$3=
Range formula, applies to all fields in the given rectangular range.  This
can also be used to assign a formula to some but not all fields in a row.
@item $name=
Named field, see @ref{Advanced features}.
@end table

@node Column formulas, Editing and debugging formulas, Field and range formulas, The spreadsheet
@subsection Column formulas
@cindex column formula
@cindex formula, for table column

When you assign a formula to a simple column reference like @code{$3=}, the
same formula will be used in all fields of that column, with the following
very convenient exceptions: (i) If the table contains horizontal separator
hlines, everything before the first such line is considered part of the
table @emph{header} and will not be modified by column formulas.  (ii)
Fields that already get a value from a field/range formula will be left
alone by column formulas.  These conditions make column formulas very easy
to use.

To assign a formula to a column, type it directly into any field in the
column, preceded by an equal sign, like @samp{=$1+$2}.  When you press
@key{TAB} or @key{RET} or @kbd{C-c C-c} with the cursor still in the field,
the formula will be stored as the formula for the current column, evaluated
and the current field replaced with the result.  If the field contains only
@samp{=}, the previously stored formula for this column is used.  For each
column, Org will only remember the most recently used formula.  In the
@samp{#+TBLFM:} line, column formulas will look like @samp{$4=$1+$2}.  The
left-hand side of a column formula can not be the name of column, it must be
the numeric column reference or @code{$>}.

Instead of typing an equation into the field, you may also use the following
command:

@table @kbd
@orgcmd{C-c =,org-table-eval-formula} Install a new formula for the current
column and replace current field with the result of the formula.  The
command prompts for a formula, with default taken from the @samp{#+TBLFM}
line, applies it to the current field and stores it.  With a numeric prefix
argument(e.g.@: @kbd{C-5 C-c =}) the command will apply it to that many
consecutive fields in the current column.
@end table

@node Editing and debugging formulas, Updating the table, Column formulas, The spreadsheet
@subsection Editing and debugging formulas
@cindex formula editing
@cindex editing, of table formulas

@vindex org-table-use-standard-references
You can edit individual formulas in the minibuffer or directly in the
field.  Org can also prepare a special buffer with all active formulas of a
table.  When offering a formula for editing, Org converts references to the
standard format (like @code{B3} or @code{D&})  if possible.  If you prefer
to only work with the internal format (like @code{@@3$2} or @code{$4}),
configure the variable @code{org-table-use-standard-references}.

@table @kbd
@orgcmdkkc{C-c =,C-u C-c =,org-table-eval-formula} Edit the formula
associated with the current column/field in the minibuffer.  See @ref{Column formulas}, and @ref{Field and range formulas}.  @orgcmd{C-u C-u C-c =,org-table-eval-formula} Re-insert the active formula (either a field
formula, or a column formula) into the current field, so that you can edit
it directly in the field.  The advantage over editing in the minibuffer is
that you can use the command @kbd{C-c ?}.  @orgcmd{C-c ?,org-table-field-info} While editing a formula in a table field, highlight
the field(s)  referenced by the reference at the cursor position in the
formula.
@kindex C-c @}
@findex org-table-toggle-coordinate-overlays
@item C-c @}
Toggle the display of row and column numbers for a table, using overlays
(@command{org-table-toggle-coordinate-overlays}).  These are updated each
time the table is aligned; you can force it with @kbd{C-c C-c}.
@kindex C-c @{
@findex org-table-toggle-formula-debugger
@item C-c @{
Toggle the formula debugger on and off
(@command{org-table-toggle-formula-debugger}).  See below.  @orgcmd{C-c ',org-table-edit-formulas} Edit all formulas for the current table in a
special buffer, where the formulas will be displayed one per line.  If the
current field has an active formula, the cursor in the formula editor will
mark it.  While inside the special buffer, Org will automatically highlight
any field or range reference at the cursor position.  You may edit, remove
and add formulas, and use the following commands:
@table @kbd
@orgcmdkkc{C-c C-c,C-x C-s,org-table-fedit-finish} Exit the formula editor
and store the modified formulas.  With @kbd{C-u} prefix, also apply the new
formulas to the entire table.  @orgcmd{C-c C-q,org-table-fedit-abort} Exit
the formula editor without installing changes.  @orgcmd{C-c C-r,org-table-fedit-toggle-ref-type} Toggle all references in the formula
editor between standard (like @code{B3}) and internal (like @code{@@3$2}).
@orgcmd{@key{TAB},org-table-fedit-lisp-indent} Pretty-print or indent Lisp
formula at point.  When in a line containing a Lisp formula, format the
formula according to Emacs Lisp rules.  Another @key{TAB} collapses the
formula back again.  In the open formula, @key{TAB} re-indents just like in
Emacs Lisp mode.  @orgcmd{M-@key{TAB},lisp-complete-symbol} Complete Lisp
symbols, just like in Emacs Lisp mode.
@kindex S-@key{up}
@kindex S-@key{down}
@kindex S-@key{left}
@kindex S-@key{right}
@findex org-table-fedit-ref-up
@findex org-table-fedit-ref-down
@findex org-table-fedit-ref-left
@findex org-table-fedit-ref-right
@item S-@key{up}/@key{down}/@key{left}/@key{right}
Shift the reference at point.  For example, if the reference is @code{B3}
and you press @kbd{S-@key{right}}, it will become @code{C3}.  This also
works for relative references and for hline references.
@orgcmdkkcc{M-S-@key{up},M-S-@key{down},org-table-fedit-line-up,org-table-fedit-line-down}
Move the test line for column formulas in the Org buffer up and down.
@orgcmdkkcc{M-@key{up},M-@key{down},org-table-fedit-scroll-down,org-table-fedit-scroll-up}
Scroll the window displaying the table.
@kindex C-c @}
@findex org-table-toggle-coordinate-overlays
@item C-c @}
Turn the coordinate grid in the table on and off.
@end table
@end table

Making a table field blank does not remove the formula associated with the
field, because that is stored in a different line (the @samp{#+TBLFM}
line)---during the next recalculation the field will be filled again.  To
remove a formula from a field, you have to give an empty reply when prompted
for the formula, or to edit the @samp{#+TBLFM} line.

@kindex C-c C-c
You may edit the @samp{#+TBLFM} directly and re-apply the changed equations
with @kbd{C-c C-c} in that line or with the normal recalculation commands in
the table.

@subsubheading Debugging formulas
@cindex formula debugging
@cindex debugging, of table formulas
When the evaluation of a formula leads to an error, the field content
becomes the string @samp{#ERROR}.  If you would like see what is going on
during variable substitution and calculation in order to find a bug, turn on
formula debugging in the @code{Tbl} menu and repeat the calculation, for
example by pressing @kbd{C-u C-u C-c = @key{RET}} in a field.  Detailed
information will be displayed.

@node Updating the table, Advanced features, Editing and debugging formulas, The spreadsheet
@subsection Updating the table
@cindex recomputing table fields
@cindex updating, table

Recalculation of a table is normally not automatic, but needs to be
triggered by a command.  See @ref{Advanced features}, for a way to make
recalculation at least semi-automatic.

In order to recalculate a line of a table or the entire table, use the
following commands:

@table @kbd
@c
@orgcmd{C-c *,org-table-recalculate} Recalculate the current row by first
applying the stored column formulas from left to right, and all field/range
formulas in the current row.
@kindex C-u C-c *
@item C-u C-c *
@kindex C-u C-c C-c
@itemx C-u C-c C-c
@c
Recompute the entire table, line by line.  Any lines before the first hline
are left alone, assuming that these are part of the table header.
@orgcmdkkc{C-u C-u C-c *,C-u C-u C-c C-c,org-table-iterate} Iterate the
table by recomputing it until no further changes occur.  This may be
necessary if some computed fields use the value of other fields that are
computed @i{later} in the calculation sequence.
@item M-x org-table-recalculate-buffer-tables
@findex org-table-recalculate-buffer-tables
Recompute all tables in the current buffer.
@item M-x org-table-iterate-buffer-tables
@findex org-table-iterate-buffer-tables
Iterate all tables in the current buffer, in order to converge
table-to-table dependencies.
@end table

@node Advanced features, , Updating the table, The spreadsheet
@subsection Advanced features

If you want the recalculation of fields to happen automatically, or if you
want to be able to assign @i{names} to fields and columns, you need to
reserve the first column of the table for special marking characters.
@table @kbd
@orgcmd{C-#,org-table-rotate-recalc-marks} Rotate the calculation mark in
first column through the states @samp{ }, @samp{#}, @samp{*}, @samp{!},
@samp{$}.  When there is an active region, change all marks in the region.
@end table

Here is an example of a table that collects exam results of students and
makes use of these features:

@example
@group
|---+---------+--------+--------+--------+-------+------|
|   | Student | Prob 1 | Prob 2 | Prob 3 | Total | Note |
|---+---------+--------+--------+--------+-------+------|
| ! |         |     P1 |     P2 |     P3 |   Tot |      |
| # | Maximum |     10 |     15 |     25 |    50 | 10.0 |
| ^ |         |     m1 |     m2 |     m3 |    mt |      |
|---+---------+--------+--------+--------+-------+------|
| # | Peter   |     10 |      8 |     23 |    41 |  8.2 |
| # | Sam     |      2 |      4 |      3 |     9 |  1.8 |
|---+---------+--------+--------+--------+-------+------|
|   | Average |        |        |        |  29.7 |      |
| ^ |         |        |        |        |    at |      |
| $ | max=50  |        |        |        |       |      |
|---+---------+--------+--------+--------+-------+------|
#+TBLFM: $6=vsum($P1..$P3)::$7=10*$Tot/$max;%.1f::$at=vmean(@@-II..@@-I);%.1f
@end group
@end example

@noindent @b{Important}: please note that for these special tables,
recalculating the table with @kbd{C-u C-c *} will only affect rows that are
marked @samp{#} or @samp{*}, and fields that have a formula assigned to the
field itself.  The column formulas are not applied in rows with empty first
field.

@cindex marking characters, tables
The marking characters have the following meaning:
@table @samp
@item !
The fields in this line define names for the columns, so that you may refer
to a column as @samp{$Tot} instead of @samp{$6}.
@item ^
This row defines names for the fields @emph{above} the row.  With such a
definition, any formula in the table may use @samp{$m1} to refer to the
value @samp{10}.  Also, if you assign a formula to a names field, it will be
stored as @samp{$name=...}.
@item _
Similar to @samp{^}, but defines names for the fields in the row
@emph{below}.
@item $
Fields in this row can define @emph{parameters} for formulas.  For example,
if a field in a @samp{$} row contains @samp{max=50}, then formulas in this
table can refer to the value 50 using @samp{$max}.  Parameters work exactly
like constants, only that they can be defined on a per-table basis.
@item #
Fields in this row are automatically recalculated when pressing @key{TAB} or
@key{RET} or @kbd{S-@key{TAB}} in this row.  Also, this row is selected for
a global recalculation with @kbd{C-u C-c *}.  Unmarked lines will be left
alone by this command.
@item *
Selects this line for global recalculation with @kbd{C-u C-c *}, but not for
automatic recalculation.  Use this when automatic recalculation slows down
editing too much.
@item
Unmarked lines are exempt from recalculation with @kbd{C-u C-c *}.  All
lines that should be recalculated should be marked with @samp{#} or
@samp{*}.
@item /
Do not export this line.  Useful for lines that contain the narrowing
@samp{<N>} markers or column group markers.
@end table

Finally, just to whet your appetite for what can be done with the fantastic
@file{calc.el} package, here is a table that computes the Taylor series of
degree @code{n} at location @code{x} for a couple of functions.

@example
@group
|---+-------------+---+-----+--------------------------------------|
|   | Func        | n | x   | Result                               |
|---+-------------+---+-----+--------------------------------------|
| # | exp(x)      | 1 | x   | 1 + x                                |
| # | exp(x)      | 2 | x   | 1 + x + x^2 / 2                      |
| # | exp(x)      | 3 | x   | 1 + x + x^2 / 2 + x^3 / 6            |
| # | x^2+sqrt(x) | 2 | x=0 | x*(0.5 / 0) + x^2 (2 - 0.25 / 0) / 2 |
| # | x^2+sqrt(x) | 2 | x=1 | 2 + 2.5 x - 2.5 + 0.875 (x - 1)^2    |
| * | tan(x)      | 3 | x   | 0.0175 x + 1.77e-6 x^3               |
|---+-------------+---+-----+--------------------------------------|
#+TBLFM: $5=taylor($2,$4,$3);n3
@end group
@end example

@node Org-Plot, , The spreadsheet, Tables
@section Org-Plot
@cindex graph, in tables
@cindex plot tables using Gnuplot
@cindex #+PLOT

Org-Plot can produce 2D and 3D graphs of information stored in org tables
using @file{Gnuplot} @uref{http://www.gnuplot.info/} and @file{gnuplot-mode}
@uref{http://cars9.uchicago.edu/~ravel/software/gnuplot-mode.html}.  To see
this in action, ensure that you have both Gnuplot and Gnuplot mode installed
on your system, then call @code{org-plot/gnuplot} on the following table.

@example
@group
#+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
| Sede      | Max cites | H-index |
|-----------+-----------+---------|
| Chile     |    257.72 |   21.39 |
| Leeds     |    165.77 |   19.68 |
| Sao Paolo |     71.00 |   11.50 |
| Stockholm |    134.19 |   14.33 |
| Morelia   |    257.56 |   17.67 |
@end group
@end example

Notice that Org Plot is smart enough to apply the table's headers as
labels.  Further control over the labels, type, content, and appearance of
plots can be exercised through the @code{#+PLOT:} lines preceding a table.
See below for a complete list of Org-plot options.  For more information and
examples see the Org-plot tutorial at
@uref{http://orgmode.org/worg/org-tutorials/org-plot.html}.

@subsubheading Plot Options

@table @code
@item set
Specify any @command{gnuplot} option to be set when graphing.

@item title
Specify the title of the plot.

@item ind
Specify which column of the table to use as the @code{x} axis.

@item deps
Specify the columns to graph as a Lisp style list, surrounded by parentheses
and separated by spaces for example @code{dep:(3 4)} to graph the third and
fourth columns (defaults to graphing all other columns aside from the
@code{ind} column).

@item type
Specify whether the plot will be @code{2d}, @code{3d}, or @code{grid}.

@item with
Specify a @code{with} option to be inserted for every col being plotted
(e.g.@: @code{lines}, @code{points}, @code{boxes}, @code{impulses},
etc...).  Defaults to @code{lines}.

@item file
If you want to plot to a file, specify
@code{"@var{path/to/desired/output-file}"}.

@item labels
List of labels to be used for the @code{deps} (defaults to the column
headers if they exist).

@item line
Specify an entire line to be inserted in the Gnuplot script.

@item map
When plotting @code{3d} or @code{grid} types, set this to @code{t} to graph
a flat mapping rather than a @code{3d} slope.

@item timefmt
Specify format of Org-mode timestamps as they will be parsed by Gnuplot.
Defaults to @samp{%Y-%m-%d-%H:%M:%S}.

@item script
If you want total control, you can specify a script file (place the file
name between double-quotes) which will be used to plot.  Before plotting,
every instance of @code{$datafile} in the specified script will be replaced
with the path to the generated data file.  Note: even if you set this
option, you may still want to specify the plot type, as that can impact the
content of the data file.
@end table

@node Hyperlinks, TODO Items, Tables, Top
@chapter Hyperlinks
@cindex ハイパーリンク

HTMLのように、Org-modeはファイル内でリンクしたり、他のファイルやUsenetの記事
やメールなど、外部へリンクしたりすることができます。

@menu
* Link format::              Org-modeでのリンクのフォーマット
* Internal links::           現在のファイルの別の場所へのリンク
* External links::           URL形式のリンク
* Handling links::           創造、挿入、追随
* Using links outside Org::  Cのソースコードからのリンク？
* Link abbreviations::       複雑なリンクを書くためのショートカット
* Search options::           特定の場所へのリンク
* Custom searches::          デフォルトの検索が充分ではないとき
@end menu

@node Link format, Internal links, Hyperlinks, Hyperlinks
@section Link format
@cindex リンクのフォーマット
@cindex フォーマット,リンクの

Org-modeはURLのようなリンクを認識して、クリック可能なリンクにしてくれます。Org-mode上
での一般的なリンクのフォーマットは以下のようなものです:

@example
[[リンク][項目名]]       @r{または}           [[リンク]]\n@end example

@noindent
すべての括弧を入力し終えてリンクが完成すると、Org-modeは、[[リンク][項目名]]の
かわりに「項目名」を、[[リンク]]のかわりに「リンク」を表示します。リンクは「
org-link」で設定されたフェイスでハイライトされます。なおデフォルトのフェイス
はアンダーラインになっています。表示されている部分については、直接編集するこ
とができます。項目名がない場合はリンクの編集になり、項目名がある場合は項目名
の編集になることに注意してください。表示されていないリンクを編集するには、該
当するリンクの上で「C-c
C-l」を実行します。

表示されたテキストの始端もしくは終端にカーソルを置いて@key{BACKSPACE}を押すと、そ
の場所にある（表示されていない）括弧を取り除くことができます。これによってリ
ンクは不完全なものになり、リンクの内部は再びプレーンなテキストとして表示され
ます。取り除かれた括弧を再度挿入することでリンクは再び内部化され隠されます。
すべてのリンクの内部的な構造を表示するには、@code{Org->Hyperlinks->Literal links}と
いうメニューを使用します。

@node Internal links, External links, Link format, Hyperlinks
@section Internal links
@cindex 内部リンク
@cindex links, internal
@cindex ターゲット,リンクの

@cindex property, CUSTOM_ID
もしもリンクがURLのようなものではない場合、現在使用しているファイル内へのリン
クだとみなされます。最も重要なケースは、@samp{[[#my-custom-id]]}のようなリンクで、
@samp{my-custom-id}という@code{CUSTOM_ID}プロパティのついた見出しへリンクします。このよ
うなカスタムIDは、HTMLでのエクスポート(@pxref{HTML export})時にセクション毎のリンク
を書き出してくれるので、大変便利です。ただし、各カスタムID名がファイル内で重
複しないようにする必要があります。

@samp{[[My Target]]}や@samp{[[My Target][Find my target]]}のようなリンクは、現在使用し
ているファイル内でのテキスト検索になります。

マウスのクリック、またはリンク上にカーソルがあるときは@kbd{C-c C-o}で、リンクを開
くことができます(@pxref{Handling links})。カスタムIDへのリンクは、対応する見出しを
指し示します。テキストへのリンクには、@i{専用のターゲット}を用意する方が良いで
しょう。同じ文字列を二重の角付きの括弧でくくるとか。ターゲットはどこに置かれ
ていてもかまいません。しかし、コメント行のようなところに置いたほうが便利なこ
とが多いでしょう。たとえば、以下のように。

@example
# <<My Target>>\n@end example

@noindent In HTML export (@pxref{HTML export}), such targets will become
HTMLでのエクスポート（@pxref{HTML export}）では、このようなターゲットは、@samp{http}で直
接アクセスできる名前つきのアンカーになります
@footnote{一番最初の見出しより前の文はエクスポートされないことに注意してください。このためそのようなターゲットの一番最初のものは、最初の見出しより後にある必要があります。}。

もしも専用のターゲットが存在しない場合には、Org-modeはそのリンクにある語句と
同じ見出しを検索しますが、TODOキーワードやタグ
@footnote{見出しへのリンクを挿入するときは、バッファー内補完をすることができます。*印の後にいくつか文字を入力し、@kbd{M-@key{TAB}}を実行してください。現在のバッファー内にあるすべての見出しが補完候補として表示されます。}も
検索されます。Org-mode以外のファイルでは、リンクのテキストにある語句を検索し
ます。上記の例では、@samp{my target}が検索されます。

リンクをたどると、Org-mode自身のマークリングにマークが格納されます。@kbd{C-c &}で
、ひとつ前のポジションに戻ります。このコマンドを連続して使うことにより、更に
前のポジションへと戻ることができます。

@menu
* Radio targets::            プレーンテキストのリンクをターゲットに起動させる
@end menu

@node Radio targets, , Internal links, Internal links
@subsection Radio targets
@cindex ラジオターゲット
@cindex ターゲット,ラジオ
@cindex リンク,ラジオターゲット

Org-modeは、通常のテキスト部分に書かれたターゲット名を、自動でリンクにするこ
とができます。ですから、わざわざ個別のリンクを作成することなく、それぞれのテ
キストがターゲットにリンクされます。ラジオターゲットは、３つの角括弧で囲まれ
たものです。例えば、@samp{<<<My Target>>>}というターゲットは、通常のテキスト部分に
@samp{my target}が登場する度にアクティブなリンクにしてくれます。Org-modeファイル内
のラジオターゲットは、最初の読み込み時のみ自動的にスキャンされます。編集中に
ターゲットをアップデートしてリンクするには、ターゲットのところで@kbd{C-c C-c}を実
行します。

@node External links, Handling links, Internal links, Hyperlinks
@section External links
@cindex links, external
@cindex 外部リンク
@cindex links, external
@cindex Gnusリンク
@cindex BBDBリンク
@cindex IRCリンク
@cindex URLリンク
@cindex ファイルリンク
@cindex VMリンク
@cindex RMAILリンク
@cindex WANDERLUSTリンク
@cindex MH-Eリンク
@cindex USENETリンク
@cindex SHELLリンク
@cindex Infoリンク
@cindex ELispリンク

Org-modeは次のようなリンクをサポートしています。ファイル、webサイト、ネットニ
ュース、emailのメッセージ、BBDBデータベースの項目、IRCの会話とログなど。外部
リンクはURLを記載するような方法でリンクします。それらはコロンの前に短い定義用
の文字列をつけて表記します。コロンのあとに空白をとってはいけません。以下に例
とそれぞれのリンクのタイプの一覧を示します。

@example
http://www.astro.uva.nl/~dominik          @r{ウェブへのリンク}
doi:10.1000/182                           @r{電子文献のためのDOI}
file:/home/dominik/images/jupiter.jpg     @r{ファイルへの絶対パス}
/home/dominik/images/jupiter.jpg          @r{上に同じ}
file:papers/last.pdf                      @r{ファイルへの相対パス}
./papers/last.pdf                         @r{same as above}
file:/myself@@some.where:papers/last.pdf   
@r{リモートマシン上のファイルへのパス}
/myself@@some.where:papers/last.pdf        @r{same as above}
file:sometextfile::NNN                    @r{ジャンプ先の行番号付きファイル}
file:projects.org                         @r{他のOrg-modeファイルへのリンク}
file:projects.org::some words             
@r{Org-modeファイル内でのテキスト検索}
file:projects.org::*task title            
@r{Org-modeファイル内での見出し検索}
docview:papers/last.pdf::NNN              @r{ファイルをページ指定して開く}
id:B7423F4D-2E8A-471B-8810-C40F074717E9   @r{IDのついた見出しへのリンク}
news:comp.emacs                           @r{Usenetへのリンク}
mailto:adent@@galaxy.net                   @r{メールリンク}
vm:folder                                 @r{VMのフォルダーへのリンク}
vm:folder#id                              @r{VMのメールメッセージへのリンク}
vm://myself@@some.where.org/folder#id      
@r{リモートマシン上のVMのメールメッセージへのリンク}
wl:folder                                 
@r{WANDERLUSTのフォルダーへのリンク}
wl:folder#id                              
@r{WANDERLUSTのメールメッセージへのリンク}
mhe:folder                                @r{MH-Eのフォルダーへのリンク}
mhe:folder#id                             
@r{MH-Eのメールメッセージへのリンク}
rmail:folder                              @r{RMAILのフォルダーへのリンク}
rmail:folder#id                           
@r{RMAILのメールメッセージへのリンク}
gnus:group                                @r{Gnusグループへのリンク}
gnus:group#id                             @r{Gnusの記事へのリンク}
bbdb:R.*Stallman                          @r{BBDBへのリンク(正規表現)}
irc:/irc.com/#emacs/bob                   @r{IRCへのリンク}
info:org#External%20links                 
@r{Infoノードへのリンク(空白をエンコード)}
shell:ls *.org                            @r{シェルコマンドへのリンク}
elisp:org-agenda                          @r{Elispコマンドへのリンク}
elisp:(find-file-other-frame "Elisp.org") @r{Elispフォームを評価}
@end example

For customizing Org to add new link types @ref{Adding hyperlink types}.

リンクは二重括弧で囲んだ方が良いでしょう。URLの代わりにテキストを表示すること
もできます(@pxref{Link format})。たとえば、以下のように。

@example
[[http://www.gnu.org/software/emacs/][GNU Emacs]]\n@end example

@noindent
項目名が画像を指し示すファイル名やURLの場合、HTMLエクスポート(@pxref{HTML export})に
よって、画像はクリック可能なボタンとして書き出されます。項目名がない画像の場
合には、インライン画像として書き出されます。

@cindex 大括弧,リンクの周辺
@cindex プレーンテキスト外部リンク
Org-modeは、通常のテキスト内のリンクを見つけ出し、外部リンクとします。もしス
ペースがリンクの一部として必要な場合(たとえば、@samp{bbdb:Richard Stallman})や、リ
ンクの末端であいまいさをなくしたい場合、角括弧で囲みます。

@node Handling links, Using links outside Org, External links, Hyperlinks
@section Handling links
@cindex リンク,扱い

Org-modeは正しい構文でリンクを作成したり、Org-modeのファイルにリンクを挿入し
たり、そのリンクをたどったりする方法を提供しています。

@table @kbd
@orgcmd{C-c l,org-store-link}
@cindex リンクの保存
現在の位置へのリンクを一時保管します。これはリンクを作成するときに、どのバッ
ファーでも使用できる@emph{グローバルな}コマンド(あなた自身でキーバインドを作成しな
ければなりません。)です。リンクは一時保管され、後からOrg-modeのバッファーへ挿
入することができます(下記参照)。どの種類のリンクが作成されるかは、現在のバッ
ファーが何であるかによります。

@b{Org-modeバッファー}
@*もしカーソル位置に@samp{<<target>>}がある場合、リンクはそのターゲットを指します。それ以外の場合は、見出しを指し、見出しは項目名にもなります。

@vindex org-link-to-org-use-id
@cindex property, CUSTOM_ID
@cindex property, ID
もし見出しに@code{CUSTOM_ID}プロパティがある場合、このカスタムIDプロパティへのリン
クが一時保管されます。また、(@code{org-link-to-org-use-id}の値によりますが)グロー
バルに固有の@code{ID}プロパティが、リンクを作成するために作られます。ですから、こ
のコマンドをOrg-modeバッファー内で使うと、潜在的にふたつのリンクを作成するこ
とになります。つまり、Org-modeバッファー内でこのコマンドを使用することにより
、人間が読むことのできるカスタムIDと、グローバルに固有で、エントリーがファイ
ル間を移動しても動作するリンクが作成されます。後にリンクを挿入するときには、
どのリンクを挿入するかを決めなければなりません。

@b{メール/ニュースクライアント:VM, Rmail, Wanderlust, MH-E, Gnus}@*ほとんどすべてのEmacsのメールクライアントがサポートされています。リンクは現在の記事を指し示します。Gnusバッファーでは、グループを指し示すこともあるでしょう。項目名は筆者名と題名から作成されます。

@b{ウェブブラウザー:W3 and W3M}@*現在のURLがリンクになり、ページのタイトルが項目名になります。

@b{連絡先:BBDB}@*BBDBバッファー内で作成されたリンクは、現在のエントリーへのリンクになります。

@b{Chat: IRC}@*
@vindex org-irc-link-to-logs
IRCリンクの場合、@code{org-irc-link-to-logs}変数を@code{t}にした場合は、ログファイル内
に、現在の会話に相当する部分への@samp{file:/}形式のリンクが作成されます。それ以外
の場合は、user/channel/serverへの@samp{irc:/}スタイルのリンクが一時保管されます。

@b{その他のファイル}
@*その他のファイルの場合、リンクは、現在の行を指ししめす検索語句(@pxref{Search options})を伴って作成されます。もし、アクティブなリージョンがある場合は、選択された言葉が検索語句の基本となります。自動的に作成されたリンクがうまく働かなかったり、不正確であったりする場合は、カスタム関数を書いて、検索語句を選択したり、特定のファイル形式を検索したりすることがきます。@ref{Custom searches}を参照してください。@kbd{C-c l}というキーバインディングはひとつの提案に過ぎません@ref{Installation})。

@b{アジェンダビュー}@*カーソルがアジェンダビューにあるときは、作成されたリンクは現在の行が参照するエントリーを指し示します。

@c
@orgcmd{C-c C-l,org-insert-link}
@cindex リンクの補完
@cindex 補完,リンクの
@cindex リンクの挿入
@vindex org-keep-stored-link-after-insertion
リンク
@footnote{リンクを挿入するのに、このコマンドを使わなければならないわけではないことに注意してください。Org-modeでのリンクはプレーンテキストですので、リンクはタイプしたりペーストしたりして直接バッファーへ入力することができます。このコマンドを使うことによって、リンクは自動的に二重括弧に入れられ、オプションとして項目名を入力するかどうかをたずねられます。}を
挿入します。そうすると、プロンプトによって、バッファーに挿入するリンクをたず
ねられます。テキストを使った内部リンクや、既に述べましたリンクタイプのいずれ
かへのリンクを入力するだけです。リンクは項目名とともに、バッファー
@footnote{一時保管されたリンクを挿入した後は、そのリンクは一時保管リストから削除されます。後で使用するためにリンクを保存したままにしておきたい場合は、@kbd{C-c C-l}の前に3回@kbd{C-u}をタイプするか、@code{org-keep-stored-link-after-insertion}オプションを設定してください。}に
挿入されます。もし、このコマンドの呼び出し時にテキストが選択されていた場合に
は、選択されたテキストがデフォルトの項目名になります。

@b{一時保管されたリンクを挿入}
@*<現在のセッションで一時保管されたすべてのリンクは、このプロンプトの履歴となっていますので、@key{up}や@key{down}(あるいは、@kbd{M-p/n})を使ってこれらにアクセスすることができます。

@b{補完の支援}
@*@key{TAB}を使用した補完機能によって、リンクの省略記法で定義された接頭辞(@pxref{Link abbreviations})を含む、@samp{http}や@samp{ftp}などのリンクを適切に挿入することができるでしょう。もし、
@var{接頭辞}のみをタイプした後に@key{RET}を押すと、Org-modeは、いくつかのリンク形式
@footnote{これは@code{org-PREFIX-complete-link}という特別な関数を呼び出すことによって行います。}に対して詳細な補完の支援を行います。たとえば、@kbd{file @key{RET}}をタイプすると、ファイル名の補完((または、@kbd{C-u C-c C-l}をタイプします。以下を参照。)を行い、@kbd{bbdb @key{RET}}をタイプすると、連絡先の名前を補完することができます。@orgkey C-u C-c C-l
@cindex ファイル名の補完
@cindex 補完,ファイル名の
@c
接頭辞@kbd{C-u}を付けて@kbd{C-c C-l}が呼び出されたときは、ファイルへのリンクが挿入さ
れ、ファイル名の補完を利用することができます。リンクされたファイルがカレント
ディレクトリにあるときや、カレントディレクトリのサブディレクトリにあるとき、
あるいはパスが@samp{../}を使って相対パスで書かれているときは、ファイルへのパスは、
現在のOrg-modeファイルからの相対パスとして挿入されます。それ以外の場合は絶対
パスが使われ、可能であれば、ホームディレクトリには@samp{~/}が使われます。2つの@kbd{C-u}を
付けることによって、絶対パス表記を明確に指定することができます。
@item C-c C-l @ @r{(カーソルがリンク上にある場合)}
@c
リンク上にカーソルがある場合、@kbd{C-c C-l}を実行すると、リンクと項目名を編集する
ことができます。
@cindex リンクをたどる
@orgcmd{C-c C-o,org-open-at-point}
@vindex org-file-apps
その場所にあるリンクを開きます。リンクがURLならば、(@command{browse-url-at-point}を使
って)ウェブブラウザーを開きますし、それぞれ対応するリンクにより、VM/MH-E/Wanderlust/Rmail/Gnus/BBDBが
起動し、シェルへのリンクの場合はコマンドを実行します。カーソルが内部リンク上
にあるときは、対応する検索を行います。カーソルが見出しのタグ上にあるときは、
対応するタグビューを作成します。カーソルがタイムスタンプ上にあるときは、その
日のアジェンダを表示します。さらに、@samp{file:}リンクの場合、テキストファイルやリ
モートマシン上のファイルはEmacsで、非テキストファイルは適切なアプリケーション
で、ファイルを開きます。ファイルの分類は、拡張子のみによって判断されます。@code{org-file-apps}を
参照してください。もし、デフォルトのアプリケーションではなくEmacsでファイルを
開きたい場合は、接頭辞@kbd{C-u}を付け、Emacsで開くことを避けたい場合は、接頭辞@kbd{C-u C-u}を
付けてください。カーソルがリンクではない見出し上にあるときは、見出し上のすべ
てのリンクとエントリーテキストを表示します。@orgkey
@key{RET}
@vindex org-return-follows-link
@c
@code{org-return-follows-link}が設定されているときは、@kbd{@key{RET}}もポイント上のリンクを開きます。
@kindex mouse-2
@kindex mouse-1
@item mouse-2
@itemx mouse-1
@c
リンク上では、@kbd{mouse-2}は@kbd{C-c C-o}と同様にリンクを開きます。Emacs
22以降では、@kbd{mouse-1}もリンクを開きます。
@kindex mouse-3
@item mouse-3
@vindex org-display-internal-link-with-indirect-buffer
@c
@kbd{mouse-2}と同様にリンクを開きますが、ファイルのリンクを強制的にEmacsで開き、
内部リンクは別のウインドウ
@footnote{@code{org-display-internal-link-with-indirect-buffer}変数を参照してください。}で開きます。@orgcmd{C-c C-x C-v,org-toggle-inline-images}
@cindex インライン画像
@cindex 画像,インライン
@vindex org-startup-with-inline-images
@cindex @code{inlineimages}, STARTUP keyword
@cindex @code{noinlineimages}, STARTUP keyword
リンクされた画像のインライン表示をトグルします。通常これはリンクに項目名がな
い画像のみをインライン表示するものです。すなわち、エクスポート時にインライン
になる画像のことです。@code{org-startup-with-inline-images}変数
@footnote{対応する@code{#+STARTUP}@code{inlineimages}と@code{inlineimages}と共に。}を設定することにより、イン
ライン画像を起動時に表示されることができます。@orgcmd{C-c %,org-mark-ring-push}
@cindex マークリング
@c
現在のポジションをマークリングに格納し、現在のポジションに簡単に戻ってこられ
るようにします。ファイル内部でのリンクをたどるときは、自動的にこれが行われま
す。@orgcmd{C-c &,org-mark-ring-goto}
@cindex リンク,戻る
@c
記録されたポジションへ戻ります。ポジションは、内部リンクをたどるコマンドと@kbd{C-c %}に
よって記録されます。このコマンドを連続して何回か使うと、記録されたポジション
間を移動することができます。@orgcmdkkcc{C-c C-x C-n,C-c C-x C-p,org-next-link,org-previous-link}
@cindex リンク,次/前を探す
バッファー内の前後のリンクへ移動します。バッファーの端では、移動は、いったん
エラーになり、もう一度行うと回り込みます。このキーバインドはとても長いので、
@kbd{C-n}と@kbd{C-p}に設定したいと考えるかもしれません。
@lisp
(add-hook 'org-load-hook
  (lambda ()
    (define-key org-mode-map "\C-n" 'org-next-link)
    (define-key org-mode-map "\C-p" 'org-previous-link)))
@end lisp
@end table

@node Using links outside Org, Link abbreviations, Handling links, Hyperlinks
@section Using links outside Org

Org-modeだけでなく、どのEmacsのバッファーでも、Org-mode構文を持つリンクを挿入
し、たどることができます。このためには、次のような2つのグローバルコマンドを作
成しなければなりません(自分に適したグローバルなキーを設定してください)。

@lisp
(global-set-key "\C-c L" 'org-insert-link-global)
(global-set-key "\C-c o" 'org-open-at-point-global)
@end lisp

@node Link abbreviations, Search options, Using links outside Org, Hyperlinks
@section Link abbreviations
@cindex リンクの省略記法
@cindex 省略記法,リンクの

長いURLをタイプするのは面倒ですが、往々にしてひとつの文章には似たようなリンク
が数多く登場するものです。このような場合には、リンクの省略記法を使うことがで
きます。省略記法されたリンクは次のようなものです。

@example
[[リンク語句:タグ][項目名]]\n@end example

@noindent
@vindex org-link-abbrev-alist
タグはなくても構いません。@i{リンク語句}は文字で始まる語句、数字、@samp{-}、@samp{_}を使
うことができます。省略記法は、リンク語句とリンクテキストを関連づける@code{org-link-abbrev-alist}変
数の値にしたがって展開されます。以下に例を示します。

@smalllisp
@group
(setq org-link-abbrev-alist
  '(("bugzilla" . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
    ("google"   . "http://www.google.com/search?q=")
    ("gmap"     . "http://maps.google.com/maps?q=%s")
    ("omap"     . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
    ("ads"      . "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")))
@end group
@end smalllisp

置き換えるテキストに@samp{%s}が含まれている場合は、タグに置き換えられます。それ以
外の場合は、タグはリンクを作成するために文字列に付け加えられます。リンクを作
成する引数としてタグと一緒に呼び出される機能を指定したほうがよいかもしれませ
ん。

上記の設定だと、@code{[[bugzilla:129]]}で特定のバグへリンクすることができ、@code{[[google:OrgMode]]}で
@samp{OrgMode}をウェブ検索することができ、@code{[[gmap:51 Franklin Street, Boston]]}で
Free Software Foundationの、@code{[[omap:Science Park 904, Amsterdam, The
Netherlands]]}でCarstenのオフィスの地図上の位置を表示することができ、@code{[[ads:Dominik,C]]}で
Org-modeの作者がEmacsのハッキングの他に何をしているかを見つけることができます
。

ある特定のOrg-modeバッファーでだけリンクの省略記法を使いたい場合は、次のよう
にすることで定義できます。

@cindex #+LINK
@example
#+LINK: bugzilla  http://10.1.2.9/bugzilla/show_bug.cgi?id=
#+LINK: google    http://www.google.com/search?q=%s
@end example

@noindent
In-buffer completion (@pxref{Completion}) can be used after @samp{[} to
complete link abbreviations.  You may also define a function
@code{org-PREFIX-complete-link} that implements special (e.g.@: completion)
support for inserting such a link with @kbd{C-c C-l}.  Such a function
should not accept any arguments, and return the full link with prefix.

@node Search options, Custom searches, Link abbreviations, Hyperlinks
@section ファイルリンクにおける検索オプション
@cindex ファイルリンクにおける検索オプション
@cindex ファイルリンク,検索

ファイルへのリンクには、ファイル内の特定の場所へジャンプするリンクを含ませる
ことができます。これは、ダブルコロン
@footnote{下方互換性のために、行番号はシングルコロンの後に置くこともできます。}の後に行番号や検索語句を置くことによっ
て行います。たとえば、@kbd{C-c l}コマンドをタイプして、あるファイルへのリンクを作
成する場合(@pxref{Handling links})、現在の行の言葉を検索語句としてリンクに含めるこ
とができ、@kbd{C-c C-o}コマンドで開くことができます。

説明と共に、あるファイルリンクへの検索語句を付加する様々な構文の方法を示しま
す。

@example
[[file:~/code/main.c::255]]
[[file:~/xx.org::My Target]]
[[file:~/xx.org::*My Target]]
[[file:~/xx.org::#my-custom-id]]
[[file:~/xx.org::/regexp/]]
@end example

@table @code
@item 255
255行目へジャンプします。
@item My Target
内部リンクの検索と同様に、@samp{<<My Target>>}という名前のリンクターゲット、あるい
は@samp{my target}というテキストを検索します(@ref{Internal links}を参照してください。
)。HTMLエクスポート(@pxref{HTML export})では、このようなファイルへのリンクは、リン
ク先のファイル内にある、一致する名前のアンカーへのHTMLリンクになります。
@item *My Target
Org-modeファイルの中で見出しの検索に限定されます。
@item #my-custom-id
@code{CUSTOM_ID}プロパティを持つ見出しへリンクします。
@item /regexp/
@c If the target file is a directory,
@c @code{grep} will be used to search all files in the directory.
@code{regexp}を正規表現検索します。これは、Emacsの@code{occur}コマンドを使って、一致するすべてを別ウインドウでリスト表示します。ターゲットがOrg-modeファイルならば、@code{org-occur}が使われ、一致した部分について、ツリーの抽出を行います。
@end table

特殊なケースとして、ファイル名が指定されていないファイルのリンクは、現在のフ
ァイルの検索となります。たとえば、@code{[[file:::find me]]}は、@samp{[[find me]]}と同様
に、現在のファイルで@samp{find me}を検索します。

@node Custom searches, , Search options, Hyperlinks
@section カスタム検索
@cindex カスタム検索文字列
@cindex 検索文字列,カスタム

デフォルトの検索文字列作成のメカニズムと、実際のファイル検索のメカニズムは、
すべての場合でうまく動作するとは限りません。たとえば、Bib@TeX{}データベースのファ
イルは、@samp{year=\"1993\"}のようなエントリーをたくさん有していますが、これは良い
検索文字列であるとは言えません。なぜならば、Bib@TeX{}のエントリーでは、唯一の識別
情報は引用キーだからです。

@vindex org-create-file-search-functions
@vindex org-execute-file-search-functions
このような問題に直面した場合は、特定のファイルタイプに適した検索文字列を設定
し、そのファイルで検索を行うカスタム関数を書くことができます。@code{add-hook}を使
用して、これらの関数は、@code{org-create-file-search-functions}、@code{org-execute-file-search-functions}と
いうフック変数に付け加えられる必要があります。これらの変数についてのより詳し
い情報は、ドキュメント文字列を参照してください。Org-modeは、実際にこのメカニ
ズムをBib@TeX{}データベースファイルに使用しており、該当するコードを実装のサンプル
として使うことができます。@file{org-bibtex.el}というファイルを参照してください。

@node TODO Items, Tags, Hyperlinks, Top
@chapter TODOアイテム
@cindex TODOアイテム

Org-modeではTODOリストを個別の文書として管理するわけではありません。
@footnote{もちろん、長いTODOリストだけを含む個別の文書を作成することもできますが、そうする必要はないということです。}そ
の変りに、TODOアイテムはノートファイルの一部として存在します。なぜならTODOア
イテムはメモを書いている最中に頭に浮かぶものだからです!Org-modeでは、ツリーの
中のどの項目でも簡単にマークしてTODOアイテムとするだけです。この方法により特
定の情報を複数個所にもつ必要は無くなり、TODOアイテムを作成するのに使用した全
文書が常に最新であることになります。

もちろん、こうした手法をとることで、あなたのノートファイルの中のあちこちに、
TODOアイテムが散らばることになります。それを補うためにOrg-modeでは、やらなけ
ればならない事柄の全体を見渡す方法が提供されています。

@menu
* TODO basics::              登録したTODOのマーキングと表示
* TODO extensions::          ワークフローと割り当て
* Progress logging::         進行管理のための日付とメモ
* Priorities::               他より重要なものもある
* Breaking down tasks::      タスクを管理可能な単位に分解する
* Checkboxes::               リストをチェックする
@end menu

@node TODO basics, TODO extensions, TODO Items, TODO Items
@section 基本的なTODOの機能

どの見出しでも@samp{TODO}という言葉を前につけることで、TODOアイテムとみなします。
例えば:

@example
*** TODO サム フォーチュンに手紙を書く。
@end example

@noindent
TODO項目を入力するときの重要なコマンドは以下のとおりです。

@table @kbd
@orgcmd{C-c C-t,org-todo}
@cindex TODOの状態の切り替え
現在のTODOの状態を次のように切り替えます。

@example
,-> (マーク無し) -> TODO -> DONE --.
'----------------------------------'
@end example

同じような状態の切り替えは、タイムラインとアジェンダバッファで@kbd{t}コマンドキー
（@pxref{Agenda commands}参照）を入力することで「リモートで」完了にすることもできま
す。

@orgkey{C-u C-c C-t}補完や「すでに設定されていれば」さらに速い選択方法を提供するイン
ターフェイスを使用して特定のキーワードを選択します。後者の方法では、TODOの状
態に対してキーを割り振る必要があります。詳細は、@ref{Per-file keywords}と@ref{Setting tags}を
参照してください。

@kindex S-@key{right}
@kindex S-@key{left}
@item S-@key{right} @ @r{/} @ S-@key{left}
@vindex org-treat-S-cursor-todo-selection-as-state-change
切り替えの機能に似て、後にくるTODOの状態、あるいは前にくるものを選択します。
もっとも役に立つのはTODOの状態が２段階以上の場合です。(@pxref{TODO extensions}).@code{shift-selection-mode}と
の連携については、@ref{Conflicts}も参照してください。変数@code{org-treat-S-cursor-todo-selection-as-state-change}.
@orgcmd{C-c / t,org-show-todo-key}も参照してください。
@cindex TODOのためのツリーの抽出
@vindex org-todo-keywords
@emph{ツリーの抽出}機能を使ってTODOを確認します（@pxref{Sparse trees}）参照。バッファ全
体を折り畳みますが、全てのTODO項目「DONE状態以外の」とその階層の見出しを表示
します。接頭辞をつけることで(もしくは、キーバインド@kbd{C-c /
T})、ある特定のDONE状態の項目も表示させることができます。検索用のキーワードを
入力するためのプロンプトが表示されます。さらにキーワードのリストを次のように
入力することもでき@code{KWD1|KWD2|...}、この内のどれかに一致するものが表示されます
。前置引数Nを使って、変数@code{org-todo-keywords}内のN番目のキーワードを含むツリー
を表示することもできます。２回の前置引数を指定すると、すべてのTODO状態「DONEと
それ以外を含む」を見つけることができます。@orgcmd{C-c a
t,org-todo-list}グローバルTODOリストを表示します。すべての「DONE状態以外の」
TODOアイテムをすべてのアジェンダファイル(@pxref{Agenda Views})から集めて、一つのバ
ッファに表示します。その新しくできたバッファは、@code{agenda-mode}で表示され、確認
や修正を加えるためのコマンドも提供されます。(@pxref{Agenda commands}). @xref{Global TODO list}.を
参照してください。@orgcmd{S-M-@key{RET},org-insert-todo-heading}新しいTODOを現在の位置に入力しま
す。
@end table

@noindent
@vindex org-todo-state-tags-triggers
Changing a TODO state can also trigger tag changes.  See the docstring of
the option @code{org-todo-state-tags-triggers} for details.

@node TODO extensions, Progress logging, TODO basics, TODO Items
@section TODOキーワードの拡張的な使い方
@cindex 拡張されたTODOキーワード

@vindex org-todo-keywords
デフォルトでは、マークされたTODOの状態は、TODOとDONEの２つあります。さらにOrg-modeは
、@emph{TODOキーワード}「@code{org-todo-keywords}に指定されています。」を使って、より複
雑にTODOアイテムを分類できます。特別な設定により、TODOキーワードシステムは、
ファイルによって異なる働きにすることできます。

注記、@i{タグ}は見出しと特にTODOアイテムの分類のもう一つの方法です。(@pxref{Tags}).

@menu
* Workflow states::          TODOからDONEまでの流れ
* TODO types::               私はこの仕事をこなす。フレッドは休む。
* Multiple sets in one file::  ごちゃまぜにしてもやり方は見つけられる
* Fast access to TODO states::  状態を選択するための文字
* Per-file keywords::        ファイルが違えば、やりたい事も違う
* Faces for TODO keywords::  状態のハイライト
* TODO dependencies::        他のタスクの終了を待たないといけないタスクがある
時
@end menu

@node Workflow states, TODO types, TODO extensions, TODO extensions
@subsection ワークフローの状態としてのTODOキーワード
@cindex TODOワークフロー
@cindex TODOキーワードとしてのワークフローの状態

TODOキーワードを使用して、アイテムの@emph{連続した}異なる状態を表すことができます
。例えば、
@footnote{この変数の変更は、Org-modeをバッファ内で再起動した場合のみ有効になります。}:

@lisp
(setq org-todo-keywords
  '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
@end lisp

縦線は、TODOキーワード「@emph{アクションが必要な}状態」とDONE状態「アクションが必
要ない状態」からを分離します。縦線が指定されていない場合は、最後の状態が、DONE状
態として使用されます。
@cindex 完了、TODOキーワードの
この設定により、コマンド@kbd{C-c C-t}で、TODO、FEEDBACK、それからVERIFY、最後にDONE、
DELEGATEDというように順番切り替えます。前置引数を使用することで、特定の状態を
即座に選択することもできます。例えば@kbd{C-3 C-c
C-t}と入力すると、ダイレクトに３番目のVERIFYに変更することができます。もしく
は、@kbd{S-@key{left}}により、逆の方向に順番に切り替えることもできます。もしも、たくさんのキ
ーワードを定義した場合は、入力補完機能（@pxref{Completion}）か特別な一つのキーによ
る選択によりバッファに入力することができます。(@pxref{Fast access to TODO
states})TODOの状態の変更は、タイムスタンプと共にログをとることができます。（
より詳しい情報は@ref{Tracking TODO state changes}参照）

@node TODO types, Multiple sets in one file, Workflow states, TODO extensions
@subsection 種類としてのTODOキーワード
@cindex TODO types
@cindex 名前をTODOキーワードとして
@cindex 種類をTODOキーワードとして

TODOキーワードの２つ目の使い方として、異なる@emph{種類}のアクションアイテムを定義
できることです。例えば、アイテムを「仕事」または「家庭」を示すようにも使えま
す。もしくは、複数の人と同じプロジェクトに参加するとき、その中の何人かに彼ら
の名前を使って直接アクションアイテムを割り当てたいかもしれません。これは、以
下のように設定します。：

@lisp
(setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))
@end lisp

この場合、それぞれのキーワードは作業の順序を表しているのではなく、別々のタイ
プを表すことになります。そのため、通常の作業の流れとしてタスクを一人に割り振
ることになり、その後のDONEになります。Org-modeは、このような形式をサポートす
るため、「@kbd{C-c C-t}」コマンドの動作が少し変化します（
@footnote{タイムラインやアジェンダのバッファでは、「@kbd{t}」コマンドも同じ仕様です。}）。まずは、適当な
タイプを選択するのに、繰り返し押すことで、順番にキーワードの名称が表示されま
す。しばらく間をおいてその項目に戻ってきて、「@kbd{C-c C-t}」を再度実行すると、そ
のときは、すぐDONEに切り替えられます。前置引数か補完を使えば、適当なタイプを
すぐに選ぶことができます。さらに@kbd{C-c /
t}に前置引数を指定することにより、抽出されたツリーの中で探しているTODOのタイ
プを確認することもできます。例えば、Lucyがやらねばならないにすべての項目を見
るには、「@kbd{C-3 C-c /
t}」を実行します。すべてのアジェンダのファイルの中からLucyの項目を一つのバッ
ファに集約するのに、グローバルなtodoリストを作成し、次のように前置引数を使用
します:「@kbd{C-3 C-c a t}」。

@node Multiple sets in one file, Fast access to TODO states, TODO types, TODO extensions
@subsection 同一ファイル内での複数のキーワードセット
@cindex TODOキーワードセット

時には、異なるセットのTODOキーワードを同時に使いたい場合があるかもしれません
。例えば、通常の@code{TODO}/@code{DONE}を使用しつつ、バグフィックスのワークフロー、さら
にアイテムがキャンセルをされたことを表すその次の状態を使用したい場合などです
「つまりDONEではないが、次のアクションが必要ない場合」。その場合の設定は次の
ようになります:

@lisp
(setq org-todo-keywords
      '((sequence "TODO" "|" "DONE")
        (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
        (sequence "|" "CANCELED")))
@end lisp

キーワードは、すべて異るようにすべきで、そうするとOrg-modeが、現在の状態の次
に続くものを認識するのに役立ちます。この設定では、@kbd{C-c C-t}は、サブグループ内
だけで働きます。つまり@code{DONE}から(何も無い状態)から@code{TODO}へ、そして@code{FIXED}から
(何も無い状態)から@code{REPORT}へ。その為、まず使いたいサブグループを選ぶ方法が必
要です。当然通常行うようにキーワードをタイプするか、補完、または次のコマンド
を使ううこともできます:

@table @kbd
@kindex C-S-@key{right}
@kindex C-S-@key{left}
@kindex C-u C-u C-c C-t
@item C-u C-u C-c C-t
@itemx C-S-@key{right}
@itemx C-S-@key{left}
These keys jump from one TODO subset to the next.  In the above example,
@kbd{C-u C-u C-c C-t} or @kbd{C-S-@key{right}} would jump from @code{TODO}
or @code{DONE} to @code{REPORT}, and any of the words in the second row to
@code{CANCELED}.  Note that the @kbd{C-S-} key binding conflict with
@code{shift-selection-mode} (@pxref{Conflicts}).
@kindex S-@key{right}
@kindex S-@key{left}
@item S-@key{right}
@itemx S-@key{left}
@kbd{S-@key{<left>}}と@kbd{S-@key{<right>}}は、すべてのサブグループの@emph{すべて}のキーワード切り替えいきます。
例えば、上記の例では、@kbd{S-@key{<right>}}は、@code{DONE}に切り替えられ、さらに@code{REPORT}になりま
す。@code{shift-selection-mode}と連携させる方法については、@ref{Conflicts}を参照してく
ださい。
@end table

@node Fast access to TODO states, Per-file keywords, Multiple sets in one file, TODO extensions
@subsection Fast access to TODO states

もし、切り替えせずに任意のTODOの状態にすばやく変更したい場合は、キー登録して
一文字でその状態に変更できます。それには、各キーワードに対して括弧で括ってセ
クションキーを割り当てることにより実現できます。例えば:

@lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
        (sequence "|" "CANCELED(c)")))
@end lisp

@vindex org-fast-tag-selection-include-todo
@code{C-c C-t}を押して、選択の為のキーを押せば、その選ばれた状態へ切り替えられます。さらに@key{SPC}を使って、どのTODOキーワードも削除することができます。@footnote{変数@code{org-fast-tag-selection-include-todo}も見てください、この変数は、タグを使って状態の変更を可能にします(@pxref{Setting tags})、この二つを混ぜて使いたいならですが。この場合、それぞれのキーワードセットに単一なキーを準備する必要があります。}

@node Per-file keywords, Faces for TODO keywords, Fast access to TODO states, TODO extensions
@subsection ファイル別にキーワードを設定する
@cindex キーワードオプション
@cindex ファイル毎のキーワード
@cindex #+TODO
@cindex #+TYP_TODO
@cindex #+SEQ_TODO

異なるファイルごとに、TODOの機能をさまざまなの方法で使用できるととても便利で
す。ファイル単位のローカルな設定をするためには、そのファイルだけに通用するキ
ーワードを特別な行を記入することで設定する必要があります。例えば、前述した２
つの例のうちの一つを設定するの場合、次のような行を、そのファイルのどこかで行
頭から開始する必要があります。

@example
#+TODO: TODO FEEDBACK VERIFY | DONE CANCELED
@end example
@noindent (you may also write @code{#+SEQ_TODO} to be explicit about the
interpretation, but it means the same as @code{#+TODO}), or
@example
#+TYP_TODO: Fred Sara Lucy Mike | DONE
@end example

同時に複数のキーワードセットの設定には:

@example
#+TODO: TODO | DONE
#+TODO: REPORT BUG KNOWNCAUSE | FIXED
#+TODO: | CANCELED
@end example

@cindex オプションのキーワードの補完
@kindex M-@key{TAB}
@noindent To make sure you are using the correct keyword, type
間違いなく正しいキーワードを使うため、そのバッファ内で@samp{#+}をタイプして、@kbd{M-@key{TAB}}を
使って補完してください。

@cindex DONEは最終のTODOキーワード
縦線の後のキーワード「もしくは、縦線が指定されてない場合は、最後のキーワード
」は、そのアイテムがいつもDONE「最後のもの」であることを覚えていてください「
と言ってもDONE以外のキーワードも使えます」。これらの変更を加えた後、Org-modeに
変更を認識させるため、カーソルを変更した場所に置いたままで@kbd{C-c C-c}してくださ
い。
@footnote{Org-modeがこれらの行を読み込むのは、ファイルを開いてOrg-modeが実行された場合だけです。@samp{#+}で始まる行にカーソルを置いて@kbd{C-c C-c}をすると、現在のバッファでOrg-modeを再起動したことになります。}

@node Faces for TODO keywords, TODO dependencies, Per-file keywords, TODO extensions
@subsection Faces for TODO keywords
@cindex TODOキーワードのフェイス

@vindex org-todo @r{(フェイス)}
@vindex org-done @r{(フェイス)}
@vindex org-todo-keyword-faces
Org-modeは、TODOキーワードを特別なフェイスを使ってハイライトします:@code{org-todo}は
、あるアイテムがアクションが必要なキーワードであることを指しています。@code{org-done}は
、あるアイテムが完了していることを指しています。もし2つ以上の異なる状態を使用
しているのであれば、特別なフェイスを使いたくなるかもしれません。これは、変数
@code{org-todo-keyword-faces}を変更することで可能です。例えば:

@lisp
@group
(setq org-todo-keyword-faces
      '(("TODO" . org-warning) ("STARTED" . "yellow")
        ("CANCELED" . (:foreground "blue" :weight bold))))
@end group
@end lisp

CANCELEDにあるようにフェイスプロパティのリストを使うのは、上手くいく
@emph{はず}ですが、いつもうまくいってるように見えないかもしれません。必要であれば、特
別なフェイスを定義してそれを使うのもいいかもしれません。文字列は、カラーとし
て解釈されます。変数@code{org-faces-easy-properties}により、文字の色にするか、背景
色にするか指定できます。

@node TODO dependencies, , Faces for TODO keywords, TODO extensions
@subsection TODO dependencies
@cindex TODO dependencies
@cindex dependencies, of TODO states

@vindex org-enforce-todo-dependencies
@cindex 属性、並び順
The structure of Org files (hierarchy and lists) makes it easy to define
TODO dependencies.  Usually, a parent TODO task should not be marked DONE
until all subtasks (defined as children tasks) are marked as DONE.  And
sometimes there is a logical sequence to a number of (sub)tasks, so that one
task cannot be acted upon before all siblings above it are done.  If you
customize the variable @code{org-enforce-todo-dependencies}, Org will block
entries from changing state to DONE while they have children that are not
DONE.  Furthermore, if an entry has a property @code{ORDERED}, each of its
children will be blocked until all earlier siblings are marked DONE.  Here
is an example:

@example
* TODO Blocked until (two) is done
** DONE one
** TODO two

* Parent
  :PROPERTIES:
    :ORDERED: t
  :END:
** TODO a
** TODO b, needs to wait for (a)
** TODO c, needs to wait for (a) and (b)
@end example

@table @kbd
@orgcmd{C-c C-x o,org-toggle-ordered-property}
@vindex org-track-ordered-property-with-tag
@cindex 属性、並び順
Toggle the @code{ORDERED} property of the current entry.  A property is used
for this behavior because this should be local to the current entry, not
inherited like a tag.  However, if you would like to @i{track} the value of
this property with a tag for better visibility, customize the variable
@code{org-track-ordered-property-with-tag}.  @orgkey{C-u C-u C-u C-c C-t}
Change TODO state, circumventing any state blocking.
@end table

@vindex org-agenda-dim-blocked-tasks
If you set the variable @code{org-agenda-dim-blocked-tasks}, TODO entries
that cannot be closed because of such dependencies will be shown in a dimmed
font or even made invisible in agenda views (@pxref{Agenda Views}).

@cindex checkboxes and TODO dependencies
@vindex org-enforce-todo-dependencies
You can also block changes of TODO states by looking at checkboxes
(@pxref{Checkboxes}).  If you set the variable
@code{org-enforce-todo-checkbox-dependencies}, an entry that has unchecked
checkboxes will be blocked from switching to DONE.

If you need more complex dependency structures, for example dependencies
between entries in different trees or files, check out the contributed
module @file{org-depend.el}.

@page
@node Progress logging, Priorities, TODO extensions, TODO Items
@section Progress logging
@cindex progress logging
@cindex logging, of progress

Org-mode can automatically record a timestamp and possibly a note when you
mark a TODO item as DONE, or even each time you change the state of a TODO
item.  This system is highly configurable, settings can be on a per-keyword
basis and can be localized to a file or even a subtree.  For information on
how to clock working time for a task, see @ref{Clocking work time}.

@menu
* Closing items::            DONEとなったのはいつ？
* Tracking TODO state changes::  状態が変わったのはいつですか？
* 習慣の追跡::          どれだけ、続けられていますか？
@end menu

@node Closing items, Tracking TODO state changes, Progress logging, Progress logging
@subsection Closing items

The most basic logging is to keep track of @emph{when} a certain TODO item
was finished.  This is achieved with@footnote{The corresponding in-buffer setting is: @code{#+STARTUP: logdone}}

@lisp
(setq org-log-done 'time)
@end lisp

@noindent
Then each time you turn an entry from a TODO (not-done) state into any of
the DONE states, a line @samp{CLOSED: [timestamp]} will be inserted just
after the headline.  If you turn the entry back into a TODO item through
further state cycling, that line will be removed again.  If you want to
record a note along with the timestamp, use@footnote{The corresponding in-buffer setting is: @code{#+STARTUP: lognotedone}}

@lisp
(setq org-log-done 'note)
@end lisp

@noindent
You will then be prompted for a note, and that note will be stored below the
entry with a @samp{Closing Note} heading.

In the timeline (@pxref{Timeline}) and in the agenda (@pxref{Weekly/daily agenda}), you can then use the @kbd{l} key to display the TODO items with a
@samp{CLOSED} timestamp on each day, giving you an overview of what has been
done.

@node Tracking TODO state changes, 習慣の追跡, Closing items, Progress logging
@subsection Tracking TODO state changes
@cindex drawer, for state change recording

@vindex org-log-states-order-reversed
@vindex org-log-into-drawer
@cindex property, LOG_INTO_DRAWER
When TODO keywords are used as workflow states (@pxref{Workflow states}),
you might want to keep track of when a state change occurred and maybe take
a note about this change.  You can either record just a timestamp, or a
time-stamped note for a change.  These records will be inserted after the
headline as an itemized list, newest first@footnote{See the variable @code{org-log-states-order-reversed}}.  When taking a lot of notes, you
might want to get the notes out of the way into a drawer (@pxref{Drawers}).
Customize the variable @code{org-log-into-drawer} to get this behavior---the
recommended drawer for this is called @code{LOGBOOK}.  You can also overrule
the setting of this variable for a subtree by setting a
@code{LOG_INTO_DRAWER} property.

Since it is normally too much to record a note for every state, Org-mode
expects configuration on a per-keyword basis for this.  This is achieved by
adding special markers @samp{!} (for a timestamp) and @samp{@@} (for a note)
in parentheses after each keyword.  For example, with the setting

@lisp
(setq org-todo-keywords
  '((sequence "TODO(t)" "WAIT(w@@/!)" "|" "DONE(d!)" "CANCELED(c@@)")))
@end lisp

@noindent
@vindex org-log-done
you not only define global TODO keywords and fast access keys, but also
request that a time is recorded when the entry is set to DONE@footnote{It is possible that Org-mode will record two timestamps when you are using both
@code{org-log-done} and state change logging.  However, it will never prompt
for two notes---if you have configured both, the state change recording note
will take precedence and cancel the @samp{Closing Note}.}, and that a note
is recorded when switching to WAIT or CANCELED.  The setting for WAIT is
even more special: the @samp{!} after the slash means that in addition to
the note taken when entering the state, a timestamp should be recorded when
@i{leaving} the WAIT state, if and only if the @i{target} state does not
configure logging for entering it.  So it has no effect when switching from
WAIT to DONE, because DONE is configured to record a timestamp only.  But
when switching from WAIT back to TODO, the @samp{/!} in the WAIT setting now
triggers a timestamp even though TODO has no logging configured.

You can use the exact same syntax for setting logging preferences local to a
buffer:
@example
#+TODO: TODO(t) WAIT(w@@/!) | DONE(d!) CANCELED(c@@)
@end example

@cindex 属性、ログをとる
In order to define logging settings that are local to a subtree or a single
item, define a LOGGING property in this entry.  Any non-empty LOGGING
property resets all logging settings to nil.  You may then turn on logging
for this specific tree using STARTUP keywords like @code{lognotedone} or
@code{logrepeat}, as well as adding state specific settings like
@code{TODO(!)}.  For example

@example
* TODO Log each state with only a time
  :PROPERTIES:
  :LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)
  :END:
* TODO Only log when switching to WAIT, and when repeating
  :PROPERTIES:
  :LOGGING: WAIT(@@) logrepeat
  :END:
* TODO No logging at all
  :PROPERTIES:
  :LOGGING: nil
  :END:
@end example

@node 習慣の追跡, , Tracking TODO state changes, Progress logging
@subsection 習慣の追跡
@cindex habits

Org has the ability to track the consistency of a special category of TODOs,
called ``habits''.  A habit has the following properties:

@enumerate
@item
You have enabled the @code{habits} module by customizing the variable
@code{org-modules}.
@item
The habit is a TODO, with a TODO keyword representing an open state.
@item
The property @code{STYLE} is set to the value @code{habit}.
@item
The TODO has a scheduled date, usually with a @code{.+} style repeat
interval.  A @code{++} style may be appropriate for habits with time
constraints, e.g., must be done on weekends, or a @code{+} style for an
unusual habit that can have a backlog, e.g., weekly reports.
@item
The TODO may also have minimum and maximum ranges specified by using the
syntax @samp{.+2d/3d}, which says that you want to do the task at least
every three days, but at most every two days.
@item
You must also have state logging for the @code{DONE} state enabled, in order
for historical data to be represented in the consistency graph.  If it's not
enabled it's not an error, but the consistency graphs will be largely
meaningless.
@end enumerate

To give you an idea of what the above rules look like in action, here's an
actual habit with some history:

@example
** TODO Shave
   SCHEDULED: <2009-10-17 Sat .+2d/4d>
   - State "DONE"       from "TODO"       [2009-10-15 Thu]
   - State "DONE"       from "TODO"       [2009-10-12 Mon]
   - State "DONE"       from "TODO"       [2009-10-10 Sat]
   - State "DONE"       from "TODO"       [2009-10-04 Sun]
   - State "DONE"       from "TODO"       [2009-10-02 Fri]
   - State "DONE"       from "TODO"       [2009-09-29 Tue]
   - State "DONE"       from "TODO"       [2009-09-25 Fri]
   - State "DONE"       from "TODO"       [2009-09-19 Sat]
   - State "DONE"       from "TODO"       [2009-09-16 Wed]
   - State "DONE"       from "TODO"       [2009-09-12 Sat]
   :PROPERTIES:
   :STYLE:    habit
   :LAST_REPEAT: [2009-10-19 Mon 00:36]
   :END:
@end example

What this habit says is: I want to shave at most every 2 days (given by the
@code{SCHEDULED} date and repeat interval) and at least every 4 days.  If
today is the 15th, then the habit first appears in the agenda on Oct 17,
after the minimum of 2 days has elapsed, and will appear overdue on Oct 19,
after four days have elapsed.

What's really useful about habits is that they are displayed along with a
consistency graph, to show how consistent you've been at getting that task
done in the past.  This graph shows every day that the task was done over
the past three weeks, with colors for each day.  The colors used are:

@table @code
@item Blue
If the task wasn't to be done yet on that day.
@item Green
If the task could have been done on that day.
@item Yellow
If the task was going to be overdue the next day.
@item Red
If the task was overdue on that day.
@end table

In addition to coloring each day, the day is also marked with an asterisk if
the task was actually done that day, and an exclamation mark to show where
the current day falls in the graph.

There are several configuration variables that can be used to change the way
habits are displayed in the agenda.

@table @code
@item org-habit-graph-column
The buffer column at which the consistency graph should be drawn.  This will
overwrite any text in that column, so it's a good idea to keep your habits'
titles brief and to the point.
@item org-habit-preceding-days
The amount of history, in days before today, to appear in consistency
graphs.
@item org-habit-following-days
The number of days after today that will appear in consistency graphs.
@item org-habit-show-habits-only-for-today
If non-nil, only show habits in today's agenda view.  This is set to true by
default.
@end table

Lastly, pressing @kbd{K} in the agenda buffer will cause habits to
temporarily be disabled and they won't appear at all.  Press @kbd{K} again
to bring them back.  They are also subject to tag filtering, if you have
habits which should only be done in certain contexts, for example.

@node Priorities, Breaking down tasks, Progress logging, TODO Items
@section Priorities
@cindex priorities

If you use Org-mode extensively, you may end up with enough TODO items that
it starts to make sense to prioritize them.  Prioritizing can be done by
placing a @emph{priority cookie} into the headline of a TODO item, like this

@example
*** TODO [#A] Write letter to Sam Fortune
@end example

@noindent
@vindex org-priority-faces
By default, Org-mode supports three priorities: @samp{A}, @samp{B}, and
@samp{C}.  @samp{A} is the highest priority.  An entry without a cookie is
treated just like priority @samp{B}.  Priorities make a difference only for
sorting in the agenda (@pxref{Weekly/daily agenda}); outside the agenda,
they have no inherent meaning to Org-mode.  The cookies can be highlighted
with special faces by customizing the variable @code{org-priority-faces}.

Priorities can be attached to any outline node; they do not need to be TODO
items.

@table @kbd
@item @kbd{C-c ,}
@kindex @kbd{C-c ,}
@findex org-priority
@c
Set the priority of the current headline (@command{org-priority}).  The
command prompts for a priority character @samp{A}, @samp{B} or @samp{C}.
When you press @key{SPC} instead, the priority cookie is removed from the
headline.  The priorities can also be changed ``remotely'' from the timeline
and agenda buffer with the @kbd{,} command (@pxref{Agenda commands}).
@orgcmdkkcc{S-@key{up},S-@key{down},org-priority-up,org-priority-down}
@vindex org-priority-start-cycle-with-default
Increase/decrease priority of current headline@footnote{See also the option @code{org-priority-start-cycle-with-default}.}.  Note that these keys are
also used to modify timestamps (@pxref{Creating timestamps}).  See also
@ref{Conflicts}, for a discussion of the interaction with
@code{shift-selection-mode}.
@end table

@vindex org-highest-priority
@vindex org-lowest-priority
@vindex org-default-priority
You can change the range of allowed priorities by setting the variables
@code{org-highest-priority}, @code{org-lowest-priority}, and
@code{org-default-priority}.  For an individual buffer, you may set these
values (highest, lowest, default) like this (please make sure that the
highest priority is earlier in the alphabet than the lowest priority):

@cindex #+PRIORITIES
@example
#+PRIORITIES: A C B
@end example

@node Breaking down tasks, Checkboxes, Priorities, TODO Items
@section Breaking tasks down into subtasks
@cindex tasks, breaking down
@cindex statistics, for TODO items

@vindex org-agenda-todo-list-sublevels
It is often advisable to break down large tasks into smaller, manageable
subtasks.  You can do this by creating an outline tree below a TODO item,
with detailed subtasks on the tree@footnote{To keep subtasks out of the global TODO list, see the @code{org-agenda-todo-list-sublevels}.}.  To keep
the overview over the fraction of subtasks that are already completed,
insert either @samp{[/]} or @samp{[%]} anywhere in the headline.  These
cookies will be updated each time the TODO status of a child changes, or
when pressing @kbd{C-c C-c} on the cookie.  For example:

@example
* Organize Party [33%]
** TODO Call people [1/2]
*** TODO Peter
*** DONE Sarah
** TODO Buy food
** DONE Talk to neighbor
@end example

@cindex 属性、COOKIE_DATA
If a heading has both checkboxes and TODO children below it, the meaning of
the statistics cookie become ambiguous.  Set the property @code{COOKIE_DATA}
to either @samp{checkbox} or @samp{todo} to resolve this issue.

@vindex org-hierarchical-todo-statistics
If you would like to have the statistics cookie count any TODO entries in
the subtree (not just direct children), configure the variable
@code{org-hierarchical-todo-statistics}.  To do this for a single subtree,
include the word @samp{recursive} into the value of the @code{COOKIE_DATA}
property.

@example
* Parent capturing statistics [2/20]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :END:
@end example

If you would like a TODO entry to automatically change to DONE when all
children are done, you can use the following setup:

@example
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
@end example


Another possibility is the use of checkboxes to identify (a hierarchy of) a
large number of subtasks (@pxref{Checkboxes}).


@node Checkboxes, , Breaking down tasks, TODO Items
@section Checkboxes
@cindex checkboxes

@vindex org-list-automatic-rules
Every item in a plain list@footnote{With the exception of description lists. But you can allow it by modifying @code{org-list-automatic-rules}
accordingly.} (@pxref{Plain lists}) can be made into a checkbox by starting
it with the string @samp{[ ]}.  This feature is similar to TODO items
(@pxref{TODO Items}), but is more lightweight.  Checkboxes are not included
into the global TODO list, so they are often great to split a task into a
number of simple steps.  Or you can use them in a shopping list.  To toggle
a checkbox, use @kbd{C-c C-c}, or use the mouse (thanks to Piotr Zielinski's
@file{org-mouse.el}).

Here is an example of a checkbox list.

@example
* TODO Organize party [2/4]
  - [-] call people [1/3]
    - [ ] Peter
    - [X] Sarah
    - [ ] Sam
  - [X] order food
  - [ ] think about what music to play
  - [X] talk to the neighbors
@end example

Checkboxes work hierarchically, so if a checkbox item has children that are
checkboxes, toggling one of the children checkboxes will make the parent
checkbox reflect if none, some, or all of the children are checked.

@cindex statistics, for checkboxes
@cindex checkbox statistics
@cindex 属性、COOKIE_DATA
@vindex org-hierarchical-checkbox-statistics
The @samp{[2/4]} and @samp{[1/3]} in the first and second line are cookies
indicating how many checkboxes present in this entry have been checked off,
and the total number of checkboxes present.  This can give you an idea on
how many checkboxes remain, even without opening a folded entry.  The
cookies can be placed into a headline or into (the first line of) a plain
list item.  Each cookie covers checkboxes of direct children structurally
below the headline/item on which the cookie appears@footnote{Set the variable @code{org-hierarchical-checkbox-statistics} if you want such
cookies to represent the all checkboxes below the cookie, not just the
direct children.}.  You have to insert the cookie yourself by typing either
@samp{[/]} or @samp{[%]}.  With @samp{[/]} you get an @samp{n out of m}
result, as in the examples above.  With @samp{[%]} you get information about
the percentage of checkboxes checked (in the above example, this would be
@samp{[50%]} and @samp{[33%]}, respectively).  In a headline, a cookie can
count either checkboxes below the heading or TODO states of children, and it
will display whatever was changed last.  Set the property @code{COOKIE_DATA}
to either @samp{checkbox} or @samp{todo} to resolve this issue.

@cindex blocking, of checkboxes
@cindex checkbox blocking
@cindex 属性、並び順
If the current outline node has an @code{ORDERED} property, checkboxes must
be checked off in sequence, and an error will be thrown if you try to check
off a box while there are unchecked boxes above it.

@noindent The following commands work with checkboxes:

@table @kbd
@orgcmd{C-c C-c,org-toggle-checkbox} Toggle checkbox status or (with prefix
arg) checkbox presence at point.  With double prefix argument, set it to
@samp{[-]}, which is considered to be an intermediate state.  @orgcmd{C-c C-x C-b,org-toggle-checkbox} Toggle checkbox status or (with prefix arg)
checkbox presence at point.  With double prefix argument, set it to
@samp{[-]}, which is considered to be an intermediate state.
@itemize @minus
@item
If there is an active region, toggle the first checkbox in the region and
set all remaining boxes to the same status as the first.  With a prefix arg,
add or remove the checkbox for all items in the region.
@item
If the cursor is in a headline, toggle checkboxes in the region between this
headline and the next (so @emph{not} the entire subtree).
@item
If there is no active region, just toggle the checkbox at point.
@end itemize
@orgcmd{M-S-@key{RET},org-insert-todo-heading} Insert a new item with a
checkbox.  This works only if the cursor is already in a plain list item
(@pxref{Plain lists}).  @orgcmd{C-c C-x o,org-toggle-ordered-property}
@vindex org-track-ordered-property-with-tag
@cindex 属性、並び順
Toggle the @code{ORDERED} property of the entry, to toggle if checkboxes
must be checked off in sequence.  A property is used for this behavior
because this should be local to the current entry, not inherited like a
tag.  However, if you would like to @i{track} the value of this property
with a tag for better visibility, customize the variable
@code{org-track-ordered-property-with-tag}.  @orgcmd{C-c #,org-update-statistics-cookies} Update the statistics cookie in the current
outline entry.  When called with a @kbd{C-u} prefix, update the entire
file.  Checkbox statistic cookies are updated automatically if you toggle
checkboxes with @kbd{C-c C-c} and make new ones with @kbd{M-S-@key{RET}}.
TODO statistics cookies update when changing TODO states.  If you delete
boxes/entries or add/change them by hand, use this command to get things
back into sync.  Or simply toggle any entry twice (checkboxes with @kbd{C-c C-c}).
@end table

@node Tags, Properties and Columns, TODO Items, Top
@chapter Tags
@cindex tags
@cindex headline tagging
@cindex matching, tags
@cindex sparse tree, tag based

An excellent way to implement labels and contexts for cross-correlating
information is to assign @i{tags} to headlines.  Org-mode has extensive
support for tags.

@vindex org-tag-faces
Every headline can contain a list of tags; they occur at the end of the
headline.  Tags are normal words containing letters, numbers, @samp{_}, and
@samp{@@}.  Tags must be preceded and followed by a single colon, e.g.,
@samp{:work:}.  Several tags can be specified, as in @samp{:work:urgent:}.
Tags will by default be in bold face with the same color as the headline.
You may specify special faces for specific tags using the variable
@code{org-tag-faces}, in much the same way as you can for TODO keywords
(@pxref{Faces for TODO keywords}).

@menu
* Tag inheritance::          アウトラインのツリー構造に沿ってタグ付けされる
* Setting tags::             見出しにタグをつける
* Tag searches::             タグの組み合わせで検索する
@end menu

@node Tag inheritance, Setting tags, Tags, Tags
@section Tag inheritance
@cindex tag inheritance
@cindex inheritance, of tags
@cindex sublevels, inclusion into tags match

@i{Tags} make use of the hierarchical structure of outline trees.  If a
heading has a certain tag, all subheadings will inherit the tag as well.
For example, in the list

@example
* Meeting with the French group      :work:
** Summary by Frank                  :boss:notes:
*** TODO Prepare slides for him      :action:
@end example

@noindent
the final heading will have the tags @samp{:work:}, @samp{:boss:},
@samp{:notes:}, and @samp{:action:} even though the final heading is not
explicitly marked with those tags.  You can also set tags that all entries
in a file should inherit just as if these tags were defined in a
hypothetical level zero that surrounds the entire file.  Use a line like
this@footnote{As with all these in-buffer settings, pressing @kbd{C-c C-c}
activates any changes in the line.}:

@cindex #+FILETAGS
@example
#+FILETAGS: :Peter:Boss:Secret:
@end example

@noindent
@vindex org-use-tag-inheritance
@vindex org-tags-exclude-from-inheritance
To limit tag inheritance to specific tags, or to turn it off entirely, use
the variables @code{org-use-tag-inheritance} and
@code{org-tags-exclude-from-inheritance}.

@vindex org-tags-match-list-sublevels
When a headline matches during a tags search while tag inheritance is turned
on, all the sublevels in the same tree will (for a simple match form) match
as well@footnote{This is only true if the search does not involve more complex tests including properties (@pxref{Property searches}).}.  The list
of matches may then become very long.  If you only want to see the first
tags match in a subtree, configure the variable
@code{org-tags-match-list-sublevels} (not recommended).

@node Setting tags, Tag searches, Tag inheritance, Tags
@section Setting tags
@cindex setting tags
@cindex tags, setting

@kindex M-@key{TAB}
Tags can simply be typed into the buffer at the end of a headline.  After a
colon, @kbd{M-@key{TAB}} offers completion on tags.  There is also a special
command for inserting tags:

@table @kbd
@orgcmd{C-c C-q,org-set-tags-command}
@cindex 完了、タグの
@vindex org-tags-column
Enter new tags for the current headline.  Org-mode will either offer
completion or a special single-key interface for setting tags, see below.
After pressing @key{RET}, the tags will be inserted and aligned to
@code{org-tags-column}.  When called with a @kbd{C-u} prefix, all tags in
the current buffer will be aligned to that column, just to make things look
nice.  TAGS are automatically realigned after promotion, demotion, and TODO
state changes (@pxref{TODO basics}).  @orgcmd{C-c C-c,org-set-tags-command}
When the cursor is in a headline, this does the same as @kbd{C-c C-q}.
@end table

@vindex org-tag-alist
Org will support tag insertion based on a @emph{list of tags}.  By default
this list is constructed dynamically, containing all tags currently used in
the buffer.  You may also globally specify a hard list of tags with the
variable @code{org-tag-alist}.  Finally you can set the default tags for a
given file with lines like

@cindex #+TAGS
@example
#+TAGS: @@work @@home @@tennisclub
#+TAGS: laptop car pc sailboat
@end example

If you have globally defined your preferred set of tags using the variable
@code{org-tag-alist}, but would like to use a dynamic tag list in a specific
file, add an empty TAGS option line to that file:

@example
#+TAGS:
@end example

@vindex org-tag-persistent-alist
If you have a preferred set of tags that you would like to use in every
file, in addition to those defined on a per-file basis by TAGS option lines,
then you may specify a list of tags with the variable
@code{org-tag-persistent-alist}.  You may turn this off on a per-file basis
by adding a STARTUP option line to that file:

@example
#+STARTUP: noptag
@end example

By default Org-mode uses the standard minibuffer completion facilities for
entering tags.  However, it also implements another, quicker, tag selection
method called @emph{fast tag selection}.  This allows you to select and
deselect tags with just a single key press.  For this to work well you
should assign unique letters to most of your commonly used tags.  You can do
this globally by configuring the variable @code{org-tag-alist} in your
@file{.emacs} file.  For example, you may find the need to tag many items in
different files with @samp{:@@home:}.  In this case you can set something
like:

@lisp
(setq org-tag-alist '(("@@work" . ?w) ("@@home" . ?h) ("laptop" . ?l)))
@end lisp

@noindent If the tag is only relevant to the file you are working on, then you
can instead set the TAGS option line as:

@example
#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t)  laptop(l)  pc(p)
@end example

@noindent The tags interface will show the available tags in a splash
window.  If you want to start a new line after a specific tag, insert
@samp{\n} into the tag list

@example
#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t) \n laptop(l)  pc(p)
@end example

@noindent or write them in two lines:

@example
#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t)
#+TAGS: laptop(l)  pc(p)
@end example

@noindent
You can also group together tags that are mutually exclusive by using
braces, as in:

@example
#+TAGS: @{ @@work(w)  @@home(h)  @@tennisclub(t) @}  laptop(l)  pc(p)
@end example

@noindent you indicate that at most one of @samp{@@work}, @samp{@@home},
and @samp{@@tennisclub} should be selected.  Multiple such groups are
allowed.

@noindent Don't forget to press @kbd{C-c C-c} with the cursor in one of
these lines to activate any changes.

@noindent
To set these mutually exclusive groups in the variable
@code{org-tags-alist}, you must use the dummy tags @code{:startgroup} and
@code{:endgroup} instead of the braces.  Similarly, you can use
@code{:newline} to indicate a line break.  The previous example would be set
globally by the following configuration:

@lisp
(setq org-tag-alist '((:startgroup . nil)
                      ("@@work" . ?w) ("@@home" . ?h)
                      ("@@tennisclub" . ?t)
                      (:endgroup . nil)
                      ("laptop" . ?l) ("pc" . ?p)))
@end lisp

If at least one tag has a selection key then pressing @kbd{C-c C-c} will
automatically present you with a special interface, listing inherited tags,
the tags of the current headline, and a list of all valid tags with
corresponding keys@footnote{Keys will automatically be assigned to tags which have no configured keys.}.  In this interface, you can use the
following keys:

@table @kbd
@item a-z...
Pressing keys assigned to tags will add or remove them from the list of tags
in the current line.  Selecting a tag in a group of mutually exclusive tags
will turn off any other tags from that group.
@kindex @key{TAB}
@item @key{TAB}
Enter a tag in the minibuffer, even if the tag is not in the predefined
list.  You will be able to complete on all tags present in the buffer.  You
can also add several tags: just separate them with a comma.

@kindex @key{SPC}
@item @key{SPC}
Clear all tags for this line.
@kindex @key{RET}
@item @key{RET}
Accept the modified set.
@item C-g
Abort without installing changes.
@item q
If @kbd{q} is not assigned to a tag, it aborts like @kbd{C-g}.
@item !
Turn off groups of mutually exclusive tags.  Use this to (as an exception)
assign several tags from such a group.
@item C-c
Toggle auto-exit after the next change (see below).  If you are using expert
mode, the first @kbd{C-c} will display the selection window.
@end table

@noindent
This method lets you assign tags to a headline with very few keys.  With the
above setup, you could clear the current tags and set @samp{@@home},
@samp{laptop} and @samp{pc} tags with just the following keys: @kbd{C-c C-c @key{SPC} h l p @key{RET}}.  Switching from @samp{@@home} to @samp{@@work}
would be done with @kbd{C-c C-c w @key{RET}} or alternatively with @kbd{C-c C-c C-c w}.  Adding the non-predefined tag @samp{Sarah} could be done with
@kbd{C-c C-c @key{TAB} S a r a h @key{RET} @key{RET}}.

@vindex org-fast-tag-selection-single-key
If you find that most of the time you need only a single key press to modify
your list of tags, set the variable
@code{org-fast-tag-selection-single-key}.  Then you no longer have to press
@key{RET} to exit fast tag selection---it will immediately exit after the
first change.  If you then occasionally need more keys, press @kbd{C-c} to
turn off auto-exit for the current tag selection process (in effect: start
selection with @kbd{C-c C-c C-c} instead of @kbd{C-c C-c}).  If you set the
variable to the value @code{expert}, the special window is not even shown
for single-key tag selection, it comes up only when you press an extra
@kbd{C-c}.

@node Tag searches, , Setting tags, Tags
@section Tag searches
@cindex tag searches
@cindex searching for tags

Once a system of tags has been set up, it can be used to collect related
information into special lists.

@table @kbd
@orgcmdkkc{C-c / m,C-c \\,org-match-sparse-tree} Create a sparse tree with
all headlines matching a tags search.  With a @kbd{C-u} prefix argument,
ignore headlines that are not a TODO line.  @orgcmd{C-c a m,org-tags-view}
Create a global list of tag matches from all agenda files.  @xref{Matching tags and properties}.  @orgcmd{C-c a M,org-tags-view}
@vindex org-tags-match-list-sublevels
Create a global list of tag matches from all agenda files, but check only
TODO items and force checking subitems (see variable
@code{org-tags-match-list-sublevels}).
@end table

These commands all prompt for a match string which allows basic Boolean
logic like @samp{+boss+urgent-project1}, to find entries with tags
@samp{boss} and @samp{urgent}, but not @samp{project1}, or
@samp{Kathy|Sally} to find entries which are tagged, like @samp{Kathy} or
@samp{Sally}.  The full syntax of the search string is rich and allows also
matching against TODO keywords, entry levels and properties.  For a complete
description with many examples, see @ref{Matching tags and properties}.


@node Properties and Columns, Date and Times, Tags, Top
@chapter プロパティ（属性）とカラム（列）
@cindex properties

Properties are a set of key-value pairs associated with an entry.  There are
two main applications for properties in Org-mode.  First, properties are
like tags, but with a value.  Second, you can use properties to implement
(very basic) database capabilities in an Org buffer.  For an example of the
first application, imagine maintaining a file where you document bugs and
plan releases for a piece of software.  Instead of using tags like
@code{:release_1:}, @code{:release_2:}, one can use a property, say
@code{:Release:}, that in different subtrees has different values, such as
@code{1.0} or @code{2.0}.  For an example of the second application of
properties, imagine keeping track of your music CDs, where properties could
be things such as the album, artist, date of release, number of tracks, and
so on.

Properties can be conveniently edited and viewed in column view
(@pxref{Column view}).

@menu
* Property syntax::          プロパティの表記の仕方
* Special properties::       他のorg-modeの機能を使用する
* Property searches::        プロパティ値の一致作業
* Property inheritance::     ツリー上でのプロパティの伝達
* Column view::              表による表示と修正
* Property API::             Lispプログラマのためのプロパティ
@end menu

@node Property syntax, Special properties, Properties and Columns, Properties and Columns
@section Property syntax
@cindex property syntax
@cindex drawer, for properties

Properties are key-value pairs.  They need to be inserted into a special
drawer (@pxref{Drawers}) with the name @code{PROPERTIES}.  Each property is
specified on a single line, with the key (surrounded by colons)  first, and
the value after it.  Here is an example:

@example
* CD collection
** Classic
*** Goldberg Variations
    :PROPERTIES:
    :Title:     Goldberg Variations
    :Composer:  J.S. Bach
    :Artist:    Glen Gould
    :Publisher: Deutsche Grammophon
    :NDisks:    1
    :END:
@end example

You may define the allowed values for a particular property @samp{:Xyz:} by
setting a property @samp{:Xyz_ALL:}.  This special property is
@emph{inherited}, so if you set it in a level 1 entry, it will apply to the
entire tree.  When allowed values are defined, setting the corresponding
property becomes easier and is less prone to typing errors.  For the example
with the CD collection, we can predefine publishers and the number of disks
in a box like this:

@example
* CD collection
  :PROPERTIES:
  :NDisks_ALL:  1 2 3 4
  :Publisher_ALL: "Deutsche Grammophon" Philips EMI
  :END:
@end example

If you want to set properties that can be inherited by any entry in a file,
use a line like
@cindex property, _ALL
@cindex #+PROPERTY
@example
#+PROPERTY: NDisks_ALL 1 2 3 4
@end example

@vindex org-global-properties
Property values set with the global variable @code{org-global-properties}
can be inherited by all entries in all Org files.

@noindent
The following commands help to work with properties:

@table @kbd
@orgcmd{M-@key{TAB},pcomplete} After an initial colon in a line, complete
property keys.  All keys used in the current file will be offered as
possible completions.  @orgcmd{C-c C-x p,org-set-property} Set a property.
This prompts for a property name and a value.  If necessary, the property
drawer is created as well.
@item M-x org-insert-property-drawer
@findex org-insert-property-drawer
Insert a property drawer into the current entry.  The drawer will be
inserted early in the entry, but after the lines with planning information
like deadlines.  @orgcmd{C-c C-c,org-property-action} With the cursor in a
property drawer, this executes property commands.  @orgcmd{C-c C-c s,org-set-property} Set a property in the current entry.  Both the property
and the value can be inserted using completion.
@orgcmdkkcc{S-@key{right},S-@key{left},org-property-next-allowed-value,org-property-previous-allowed-value}
Switch property at point to the next/previous allowed value.  @orgcmd{C-c C-c d,org-delete-property} Remove a property from the current entry.
@orgcmd{C-c C-c D,org-delete-property-globally} Globally remove a property,
from all entries in the current file.  @orgcmd{C-c C-c c,org-compute-property-at-point} Compute the property at point, using the
operator and scope from the nearest column format definition.
@end table

@node Special properties, Property searches, Property syntax, Properties and Columns
@section Special properties
@cindex properties, special

Special properties provide an alternative access method to Org-mode
features, like the TODO state or the priority of an entry, discussed in the
previous chapters.  This interface exists so that you can include these
states in a column view (@pxref{Column view}), or to use them in queries.
The following property names are special and (except for @code{:CATEGORY:})
should not be used as keys in the properties drawer:

@cindex property, special, TODO
@cindex property, special, TAGS
@cindex property, special, ALLTAGS
@cindex property, special, CATEGORY
@cindex property, special, PRIORITY
@cindex property, special, DEADLINE
@cindex property, special, SCHEDULED
@cindex property, special, CLOSED
@cindex property, special, TIMESTAMP
@cindex property, special, TIMESTAMP_IA
@cindex 特別なプロパティ（CLOCKSUM）
@cindex property, special, BLOCKED
@c guessing that ITEM is needed in this area; also, should this list be sorted?
@cindex property, special, ITEM
@cindex property, special, FILE
@example
TODO         @r{The TODO keyword of the entry.}
TAGS         @r{The tags defined directly in the headline.}
ALLTAGS      @r{All tags, including inherited ones.}
CATEGORY     @r{The category of an entry.}
PRIORITY     @r{The priority of the entry, a string with a single letter.}
DEADLINE     @r{The deadline time string, without the angular brackets.}
SCHEDULED    @r{The scheduling timestamp, without the angular brackets.}
CLOSED       @r{When was this entry closed?}
TIMESTAMP    @r{The first keyword-less timestamp in the entry.}
TIMESTAMP_IA @r{The first inactive timestamp in the entry.}
CLOCKSUM     @r{The sum of CLOCK intervals in the subtree.  @code{org-clock-sum}}
             @r{must be run first to compute the values.}
BLOCKED      @r{"t" if task is currently blocked by children or siblings}
ITEM         @r{The content of the entry.}
FILE         @r{The filename the entry is located in.}
@end example

@node Property searches, Property inheritance, Special properties, Properties and Columns
@section Property searches
@cindex properties, searching
@cindex searching, of properties

To create sparse trees and special lists with selection based on properties,
the same commands are used as for tag searches (@pxref{Tag searches}).
@table @kbd
@orgcmdkkc{C-c / m,C-c \,org-match-sparse-tree} Create a sparse tree with
all matching entries.  With a @kbd{C-u} prefix argument, ignore headlines
that are not a TODO line.  @orgcmd{C-c a m,org-tags-view} Create a global
list of tag/property matches from all agenda files.  @xref{Matching tags and properties}.  @orgcmd{C-c a M,org-tags-view}
@vindex org-tags-match-list-sublevels
Create a global list of tag matches from all agenda files, but check only
TODO items and force checking of subitems (see variable
@code{org-tags-match-list-sublevels}).
@end table

The syntax for the search string is described in @ref{Matching tags and properties}.

There is also a special command for creating sparse trees based on a single
property:

@table @kbd
@orgkey{C-c / p} Create a sparse tree based on the value of a property.
This first prompts for the name of a property, and then for a value.  A
sparse tree is created with all entries that define this property with the
given value.  If you enclose the value in curly braces, it is interpreted as
a regular expression and matched against the property values.
@end table

@node Property inheritance, Column view, Property searches, Properties and Columns
@section Property Inheritance
@cindex properties, inheritance
@cindex inheritance, of properties

@vindex org-use-property-inheritance
The outline structure of Org-mode documents lends itself to an inheritance
model of properties: if the parent in a tree has a certain property, the
children can inherit this property.  Org-mode does not turn this on by
default, because it can slow down property searches significantly and is
often not needed.  However, if you find inheritance useful, you can turn it
on by setting the variable @code{org-use-property-inheritance}.  It may be
set to @code{t} to make all properties inherited from the parent, to a list
of properties that should be inherited, or to a regular expression that
matches inherited properties.  If a property has the value @samp{nil}, this
is interpreted as an explicit undefine of the property, so that inheritance
search will stop at this value and return @code{nil}.

Org-mode has a few properties for which inheritance is hard-coded, at least
for the special applications for which they are used:

@cindex プロパティ（COLUMNS）
@table @code
@item COLUMNS
The @code{:COLUMNS:} property defines the format of column view
(@pxref{Column view}).  It is inherited in the sense that the level where a
@code{:COLUMNS:} property is defined is used as the starting point for a
column view table, independently of the location in the subtree from where
columns view is turned on.
@item CATEGORY
@cindex プロパティ（CATEGORY）
For agenda view, a category set through a @code{:CATEGORY:} property applies
to the entire subtree.
@item ARCHIVE
@cindex プロパティ（ARCHIVE）
For archiving, the @code{:ARCHIVE:} property may define the archive location
for the entire subtree (@pxref{Moving subtrees}).
@item LOGGING
@cindex 属性、ログをとる
The LOGGING property may define logging settings for an entry or a subtree
(@pxref{Tracking TODO state changes}).
@end table

@node Column view, Property API, Property inheritance, Properties and Columns
@section Column view

A great way to view and edit properties in an outline tree is @emph{column view}.  In column view, each outline node is turned into a table row.
Columns in this table provide access to properties of the entries.  Org-mode
implements columns by overlaying a tabular structure over the headline of
each item.  While the headlines have been turned into a table row, you can
still change the visibility of the outline tree.  For example, you get a
compact table by switching to CONTENTS view (@kbd{S-@key{TAB} S-@key{TAB}},
or simply @kbd{c} while column view is active), but you can still open,
read, and edit the entry below each headline.  Or, you can switch to column
view after executing a sparse tree command and in this way get a table only
for the selected items.  Column view also works in agenda buffers
(@pxref{Agenda Views}) where queries have collected selected items, possibly
from a number of files.

@menu
* Defining columns::         カラムの書式のプロパティ
* Using column view::        カラム表示の作り方と使い方
* カラム表示の保存::  カラム表示用の動的ブロック
@end menu

@node Defining columns, Using column view, Column view, Column view
@subsection Defining columns
@cindex column view, for properties
@cindex properties, column view

Setting up a column view first requires defining the columns.  This is done
by defining a column format line.

@menu
* Scope of column definitions::  カラム設定の定義範囲の指定方法は？
* Column attributes::        カラム内の表示と値
@end menu

@node Scope of column definitions, Column attributes, Defining columns, Defining columns
@subsubsection Scope of column definitions

To define a column format for an entire file, use a line like

@cindex #+COLUMNS
@example
#+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
@end example

To specify a format that only applies to a specific tree, add a
@code{:COLUMNS:} property to the top node of that tree, for example:

@example
** Top node for columns view
   :PROPERTIES:
   :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
   :END:
@end example

If a @code{:COLUMNS:} property is present in an entry, it defines columns
for the entry itself, and for the entire subtree below it.  Since the column
definition is part of the hierarchical structure of the document, you can
define columns on level 1 that are general enough for all sublevels, and
more specific columns further down, when you edit a deeper part of the tree.

@node Column attributes, , Scope of column definitions, Defining columns
@subsubsection Column attributes
A column definition sets the attributes of a column.  The general definition
looks like this:

@example
 %[@var{width}]@var{property}[(@var{title})][@{@var{summary-type}@}]
@end example

@noindent
Except for the percent sign and the property name, all items are optional.
The individual parts have the following meaning:

@example
@var{width}           @r{An integer specifying the width of the column in characters.}
                @r{If omitted, the width will be determined automatically.}
@var{property}        @r{The property that should be edited in this column.}
                @r{Special properties representing meta data are allowed here}
                @r{as well (@pxref{Special properties})}
@var{title}     @r{The header text for the column. If omitted, the property}
                @r{name is used.}
@{@var{summary-type}@}  @r{The summary type.  If specified, the column values for}
                @r{parent nodes are computed from the children.}
                @r{Supported summary types are:}
                @{+@}       @r{Sum numbers in this column.}
                @{+;%.1f@}  @r{Like @samp{+}, but format result with @samp{%.1f}.}
                @{$@}       @r{Currency, short for @samp{+;%.2f}.}
                @{:@}       @r{Sum times, HH:MM, plain numbers are hours.}
                @{X@}       @r{Checkbox status, @samp{[X]} if all children are @samp{[X]}.}
                @{X/@}      @r{Checkbox status, @samp{[n/m]}.}
                @{X%@}      @r{Checkbox status, @samp{[n%]}.}
                @{min@}     @r{Smallest number in column.}
                @{max@}     @r{Largest number.}
                @{mean@}    @r{Arithmetic mean of numbers.}
                @{:min@}    @r{Smallest time value in column.}
                @{:max@}    @r{Largest time value.}
                @{:mean@}   @r{Arithmetic mean of time values.}
                @{@@min@}    @r{Minimum age (in days/hours/mins/seconds).}
                @{@@max@}    @r{Maximum age (in days/hours/mins/seconds).}
                @{@@mean@}   @r{Arithmetic mean of ages (in days/hours/mins/seconds).}
                @{est+@}    @r{Add low-high estimates.}
@end example

@noindent
Be aware that you can only have one summary type for any property you
include. Subsequent columns referencing the same property will all display
the same summary information.

The @code{est+} summary type requires further explanation.  It is used for
combining estimates, expressed as low-high ranges.  For example, instead of
estimating a particular task will take 5 days, you might estimate it as 5-6
days if you're fairly confident you know how much work is required, or 1-10
days if you don't really know what needs to be done.  Both ranges average at
5.5 days, but the first represents a more predictable delivery.

When combining a set of such estimates, simply adding the lows and highs
produces an unrealistically wide result. Instead, @code{est+} adds the
statistical mean and variance of the sub-tasks, generating a final estimate
from the sum.  For example, suppose you had ten tasks, each of which was
estimated at 0.5 to 2 days of work.  Straight addition produces an estimate
of 5 to 20 days, representing what to expect if everything goes either
extremely well or extremely poorly. In contrast, @code{est+} estimates the
full job more realistically, at 10-15 days.

Here is an example for a complete columns definition, along with allowed
values.

@example
:COLUMNS:  %25ITEM %9Approved(Approved?)@{X@} %Owner %11Status \@footnote{Please note that the COLUMNS definition must be on a single line---it is wrapped here only because of formatting constraints.}
                   %10Time_Estimate@{:@} %CLOCKSUM
:Owner_ALL:    Tammy Mark Karl Lisa Don
:Status_ALL:   "In progress" "Not started yet" "Finished" ""
:Approved_ALL: "[ ]" "[X]"
@end example

@noindent
The first column, @samp{%25ITEM}, means the first 25 characters of the item
itself, i.e.@: of the headline.  You probably always should start the column
definition with the @samp{ITEM} specifier.  The other specifiers create
columns @samp{Owner} with a list of names as allowed values, for
@samp{Status} with four different possible values, and for a checkbox field
@samp{Approved}.  When no width is given after the @samp{%} character, the
column will be exactly as wide as it needs to be in order to fully display
all values.  The @samp{Approved} column does have a modified title
(@samp{Approved?}, with a question mark).  Summaries will be created for the
@samp{Time_Estimate} column by adding time duration expressions like HH:MM,
and for the @samp{Approved} column, by providing an @samp{[X]} status if all
children have been checked.  The @samp{CLOCKSUM} column is special, it lists
the sum of CLOCK intervals in the subtree.

@node Using column view, カラム表示の保存, Defining columns, Column view
@subsection Using column view

@table @kbd
@tsubheading{Turning column view on and off} @orgcmd{C-c C-x C-c,org-columns}
@vindex org-columns-default-format
Turn on column view.  If the cursor is before the first headline in the
file, column view is turned on for the entire file, using the
@code{#+COLUMNS} definition.  If the cursor is somewhere inside the outline,
this command searches the hierarchy, up from point, for a @code{:COLUMNS:}
property that defines a format.  When one is found, the column view table is
established for the tree starting at the entry that contains the
@code{:COLUMNS:} property.  If no such property is found, the format is
taken from the @code{#+COLUMNS} line or from the variable
@code{org-columns-default-format}, and column view is established for the
current entry and its subtree.  @orgcmd{r,org-columns-redo} Recreate the
column view, to include recent changes made in the buffer.
@orgcmd{g,org-columns-redo} Same as @kbd{r}.  @orgcmd{q,org-columns-quit}
Exit column view.  @tsubheading{Editing values}
@item @key{left} @key{right} @key{up} @key{down}
Move through the column view from field to field.
@kindex S-@key{left}
@kindex S-@key{right}
@item S-@key{left}/@key{right}
Switch to the next/previous allowed value of the field.  For this, you have
to have specified allowed values for a property.
@item 1..9,0
Directly select the Nth allowed value, @kbd{0} selects the 10th value.
@orgcmdkkcc{n,p,org-columns-next-allowed-value,org-columns-previous-allowed-value}
Same as @kbd{S-@key{left}/@key{right}} @orgcmd{e,org-columns-edit-value}
Edit the property at point.  For the special properties, this will invoke
the same interface that you normally use to change that property.  For
example, when editing a TAGS property, the tag completion or fast selection
interface will pop up.  @orgcmd{C-c C-c,org-columns-set-tags-or-toggle} When
there is a checkbox at point, toggle it.  @orgcmd{v,org-columns-show-value}
View the full value of this property.  This is useful if the width of the
column is smaller than that of the value.
@orgcmd{a,org-columns-edit-allowed} Edit the list of allowed values for this
property.  If the list is found in the hierarchy, the modified values is
stored there.  If no list is found, the new value is stored in the first
entry that is part of the current column view.  @tsubheading{Modifying the table structure} @orgcmdkkcc{<,>,org-columns-narrow,org-columns-widen} Make
the column narrower/wider by one character.
@orgcmd{S-M-@key{right},org-columns-new} Insert a new column, to the left of
the current column.  @orgcmd{S-M-@key{left},org-columns-delete} Delete the
current column.
@end table

@node カラム表示の保存, , Using column view, Column view
@subsection カラム表示の保存

Since column view is just an overlay over a buffer, it cannot be exported or
printed directly.  If you want to capture a column view, use a
@code{columnview} dynamic block (@pxref{Dynamic blocks}).  The frame of this
block looks like this:

@cindex #+BEGIN, columnview
@example
* The column view
#+BEGIN: columnview :hlines 1 :id "label"

#+END:
@end example

@noindent This dynamic block has the following parameters:

@table @code
@item :id
This is the most important parameter.  Column view is a feature that is
often localized to a certain (sub)tree, and the capture block might be at a
different location in the file.  To identify the tree whose view to capture,
you can use 4 values:
@cindex property, ID
@example
local     @r{use the tree in which the capture block is located}
global    @r{make a global view, including all headings in the file}
"file:@var{path-to-file}"
          @r{run column view at the top of this file}
"@var{ID}"      @r{call column view in the tree that has an @code{:ID:}}
          @r{property with the value @i{label}.  You can use}
          @r{@kbd{M-x org-id-copy} to create a globally unique ID for}
          @r{the current entry and copy it to the kill-ring.}
@end example
@item :hlines
When @code{t}, insert an hline after every line.  When a number @var{N},
insert an hline before each headline with level @code{<= @var{N}}.
@item :vlines
When set to @code{t}, force column groups to get vertical lines.
@item :maxlevel
When set to a number, don't capture entries below this level.
@item :skip-empty-rows
When set to @code{t}, skip rows where the only non-empty specifier of the
column view is @code{ITEM}.

@end table

@noindent
The following commands insert or update the dynamic block:

@table @kbd
@orgcmd{C-c C-x i,org-insert-columns-dblock} Insert a dynamic block
capturing a column view.  You will be prompted for the scope or ID of the
view.  @orgcmdkkc{C-c C-c,C-c C-x C-u,org-dblock-update} Update dynamic
block at point.  The cursor needs to be in the @code{#+BEGIN} line of the
dynamic block.  @orgcmd{C-u C-c C-x C-u,org-update-all-dblocks} Update all
dynamic blocks (@pxref{Dynamic blocks}).  This is useful if you have several
clock table blocks, column-capturing blocks or other dynamic blocks in a
buffer.
@end table

You can add formulas to the column view table and you may add plotting
instructions in front of the table---these will survive an update of the
block.  If there is a @code{#+TBLFM:} after the table, the table will
actually be recalculated automatically after an update.

An alternative way to capture and process property values into a table is
provided by Eric Schulte's @file{org-collector.el} which is a contributed
package@footnote{Contributed packages are not part of Emacs, but are distributed with the main distribution of Org (visit
@uref{http://orgmode.org}).}.  It provides a general API to collect
properties from entries in a certain scope, and arbitrary Lisp expressions
to process these values before inserting them into a table or a dynamic
block.

@node Property API, , Column view, Properties and Columns
@section The Property API
@cindex プロパティ（API）
@cindex プロパティのためのAPI

There is a full API for accessing and changing properties.  This API can be
used by Emacs Lisp programs to work with properties and to implement
features based on them.  For more information see @ref{Using the property API}.

@node Date and Times, Capture - Refile - Archive, Properties and Columns, Top
@chapter 日付と時刻
@cindex dates
@cindex times
@cindex タイムスタンプ
@cindex date stamp

To assist project planning, TODO items can be labeled with a date and/or a
time.  The specially formatted string carrying the date and time information
is called a @emph{timestamp} in Org-mode.  This may be a little confusing
because timestamp is often used as indicating when something was created or
last changed.  However, in Org-mode this term is used in a much wider sense.

@menu
* Timestamps::               ツリーに時間の割り当て
* Creating timestamps::      タイムスタンプを挿入するコマンド
* Deadlines and scheduling::  作業計画をたてる
* Clocking work time::       タスクに費す時間を追跡する
* Effort estimates::         事前に作業活動を計画する
* Relative timer::           実行中のタイマに関する注意
* カウントダウンタイマ::  タスクのカウントダウンタイマを起動する
@end menu


@node Timestamps, Creating timestamps, Date and Times, Date and Times
@section Timestamps, deadlines, and scheduling
@cindex timestamps
@cindex ranges, time
@cindex date stamps
@cindex deadlines
@cindex scheduling

A timestamp is a specification of a date (possibly with a time or a range of
times) in a special format, either @samp{<2003-09-16 Tue>} or
@samp{<2003-09-16 Tue 09:39>} or @samp{<2003-09-16 Tue 12:00-12:30>}@footnote{This is inspired by the standard ISO 8601 date/time format.  To use an alternative format, see @ref{Custom time format}.}.  A
timestamp can appear anywhere in the headline or body of an Org tree entry.
Its presence causes entries to be shown on specific dates in the agenda
(@pxref{Weekly/daily agenda}).  We distinguish:

@table @var
@item Plain timestamp; Event; Appointment
@cindex タイムスタンプ
A simple timestamp just assigns a date/time to an item.  This is just like
writing down an appointment or event in a paper agenda.  In the timeline and
agenda displays, the headline of an entry associated with a plain timestamp
will be shown exactly on that date.

@example
* Meet Peter at the movies <2006-11-01 Wed 19:15>
* Discussion on climate change <2006-11-02 Thu 20:00-22:00>
@end example

@item Timestamp with repeater interval
@cindex timestamp, with repeater interval
A timestamp may contain a @emph{repeater interval}, indicating that it
applies not only on the given date, but again and again after a certain
interval of N days (d), weeks (w), months (m), or years (y).  The following
will show up in the agenda every Wednesday:

@example
* Pick up Sam at school <2007-05-16 Wed 12:30 +1w>
@end example

@item Diary-style sexp entries
For more complex date specifications, Org-mode supports using the special
sexp diary entries implemented in the Emacs calendar/diary package.  For
example

@example
* The nerd meeting on every 2nd Thursday of the month
  <%%(diary-float t 4 2)>
@end example

@item Time/Date range
@cindex timerange
@cindex date range
Two timestamps connected by @samp{--} denote a range.  The headline will be
shown on the first and last day of the range, and on any dates that are
displayed and fall in the range.  Here is an example:

@example
** Meeting in Amsterdam
   <2004-08-23 Mon>--<2004-08-26 Thu>
@end example

@item Inactive timestamp
@cindex timestamp, inactive
@cindex inactive timestamp
Just like a plain timestamp, but with square brackets instead of angular
ones.  These timestamps are inactive in the sense that they do @emph{not}
trigger an entry to show up in the agenda.

@example
* Gillian comes late for the fifth time [2006-11-01 Wed]
@end example

@end table

@node Creating timestamps, Deadlines and scheduling, Timestamps, Date and Times
@section Creating timestamps
@cindex creating timestamps
@cindex timestamps, creating

For Org-mode to recognize timestamps, they need to be in the specific
format.  All commands listed below produce timestamps in the correct format.

@table @kbd
@c
@c
@orgcmd{C-c .,org-time-stamp} Prompt for a date and insert a corresponding
timestamp.  When the cursor is at an existing timestamp in the buffer, the
command is used to modify this timestamp instead of inserting a new one.
When this command is used twice in succession, a time range is inserted.
@orgcmd{C-c !,org-time-stamp-inactive} Like @kbd{C-c .}, but insert an
inactive timestamp that will not cause an agenda entry.
@kindex C-u C-c .
@kindex C-u C-c !
@item C-u C-c .
@itemx C-u C-c !
@vindex org-time-stamp-rounding-minutes
@c
@c
@c
@c
@c
@c
Like @kbd{C-c .} and @kbd{C-c !}, but use the alternative format which
contains date and time.  The default time can be rounded to multiples of 5
minutes, see the option @code{org-time-stamp-rounding-minutes}.  @orgcmd{C-c <,org-date-from-calendar} Insert a timestamp corresponding to the cursor
date in the Calendar.  @orgcmd{C-c >,org-goto-calendar} Access the Emacs
calendar for the current date.  If there is a timestamp in the current line,
go to the corresponding date instead.  @orgcmd{C-c C-o,org-open-at-point}
Access the agenda for the date given by the timestamp or -range at point
(@pxref{Weekly/daily agenda}).
@orgcmdkkcc{S-@key{left},S-@key{right},org-timestamp-down-day,org-timestamp-up-day}
Change date at cursor by one day.  These key bindings conflict with
shift-selection and related modes (@pxref{Conflicts}).
@orgcmdkkcc{S-@key{up},S-@key{down},org-timestamp-up,org-timestamp-down-down}
Change the item under the cursor in a timestamp.  The cursor can be on a
year, month, day, hour or minute.  When the timestamp contains a time range
like @samp{15:30-16:30}, modifying the first time will also shift the
second, shifting the time block with constant length.  To change the length,
modify the second time.  Note that if the cursor is in a headline and not at
a timestamp, these same keys modify the priority of an item.
(@pxref{Priorities}). The key bindings also conflict with shift-selection
and related modes (@pxref{Conflicts}).  @orgcmd{C-c C-y,org-evaluate-time-range}
@cindex evaluate time range
Evaluate a time range by computing the difference between start and end.
With a prefix argument, insert result after the time range (in a table: into
the following column).
@end table


@menu
* The date/time prompt::     日付と時刻入力のサポート
* Custom time format::       日付を異なる見た目にする
@end menu

@node The date/time prompt, Custom time format, Creating timestamps, Creating timestamps
@subsection The date/time prompt
@cindex date, reading in minibuffer
@cindex time, reading in minibuffer

@vindex org-read-date-prefer-future
When Org-mode prompts for a date/time, the default is shown in default
date/time format, and the prompt therefore seems to ask for a specific
format.  But it will in fact accept any string containing some date and/or
time information, and it is really smart about interpreting your input.  You
can, for example, use @kbd{C-y} to paste a (possibly multi-line) string
copied from an email message.  Org-mode will find whatever information is in
there and derive anything you have not specified from the @emph{default date and time}.  The default is usually the current date and time, but when
modifying an existing timestamp, or when entering the second stamp of a
range, it is taken from the stamp in the buffer.  When filling in
information, Org-mode assumes that most of the time you will want to enter a
date in the future: if you omit the month/year and the given day/month is
@i{before} today, it will assume that you mean a future date@footnote{See the variable @code{org-read-date-prefer-future}.  You may set that variable
to the symbol @code{time} to even make a time before now shift the date to
tomorrow.}.  If the date has been automatically shifted into the future, the
time prompt will show this with @samp{(=>F).}

For example, let's assume that today is @b{June 13, 2006}.  Here is how
various inputs will be interpreted, the items filled in by Org-mode are in
@b{bold}.

@example
3-2-5         @result{} 2003-02-05
2/5/3         @result{} 2003-02-05
14            @result{} @b{2006}-@b{06}-14
12            @result{} @b{2006}-@b{07}-12
2/5           @result{} @b{2007}-02-05
Fri           @result{} nearest Friday (default date or later)
sep 15        @result{} @b{2006}-09-15
feb 15        @result{} @b{2007}-02-15
sep 12 9      @result{} 2009-09-12
12:45         @result{} @b{2006}-@b{06}-@b{13} 12:45
22 sept 0:34  @result{} @b{2006}-09-22 0:34
w4            @result{} ISO week for of the current year @b{2006}
2012 w4 fri   @result{} Friday of ISO week 4 in 2012
2012-w04-5    @result{} Same as above
@end example

Furthermore you can specify a relative date by giving, as the @emph{first}
thing in the input: a plus/minus sign, a number and a letter ([dwmy]) to
indicate change in days, weeks, months, or years.  With a single plus or
minus, the date is always relative to today.  With a double plus or minus,
it is relative to the default date.  If instead of a single letter, you use
the abbreviation of day name, the date will be the Nth such day.  e.g.@:

@example
+0            @result{} today
.             @result{} today
+4d           @result{} four days from today
+4            @result{} same as above
+2w           @result{} two weeks from today
++5           @result{} five days from default date
+2tue         @result{} second Tuesday from now.
@end example

@vindex parse-time-months
@vindex parse-time-weekdays
The function understands English month and weekday abbreviations.  If you
want to use unabbreviated names and/or other languages, configure the
variables @code{parse-time-months} and @code{parse-time-weekdays}.

You can specify a time range by giving start and end times or by giving a
start time and a duration (in HH:MM format). Use `-' or `-@{@}-' as the
separator in the former case and use '+' as the separator in the latter
case. E.g.@:

@example
11am-1:15pm    @result{} 11:00-13:15
11am--1:15pm   @result{} same as above
11am+2:15      @result{} same as above
@end example

@cindex calendar, for selecting date
@vindex org-popup-calendar-for-date-prompt
Parallel to the minibuffer prompt, a calendar is popped up@footnote{If you don't need/want the calendar, configure the variable
@code{org-popup-calendar-for-date-prompt}.}.  When you exit the date prompt,
either by clicking on a date in the calendar, or by pressing @key{RET}, the
date selected in the calendar will be combined with the information entered
at the prompt.  You can control the calendar fully from the minibuffer:

@kindex <
@kindex >
@kindex M-v
@kindex C-v
@kindex mouse-1
@kindex S-@key{right}
@kindex S-@key{left}
@kindex S-@key{down}
@kindex S-@key{up}
@kindex M-S-@key{right}
@kindex M-S-@key{left}
@kindex @key{RET}
@example
@key{RET}           @r{Choose date at cursor in calendar.}
mouse-1        @r{Select date by clicking on it.}
S-@key{right}/@key{left}     @r{One day forward/backward.}
S-@key{down}/@key{up}     @r{One week forward/backward.}
M-S-@key{right}/@key{left}   @r{One month forward/backward.}
> / <          @r{Scroll calendar forward/backward by one month.}
M-v / C-v      @r{Scroll calendar forward/backward by 3 months.}
@end example

@vindex org-read-date-display-live
The actions of the date/time prompt may seem complex, but I assure you they
will grow on you, and you will start getting annoyed by pretty much any
other way of entering a date/time out there.  To help you understand what is
going on, the current interpretation of your input will be displayed live in
the minibuffer@footnote{If you find this distracting, turn the display of with @code{org-read-date-display-live}.}.

@node Custom time format, , The date/time prompt, Creating timestamps
@subsection Custom time format
@cindex custom date/time format
@cindex time format, custom
@cindex date format, custom

@vindex org-display-custom-times
@vindex org-time-stamp-custom-formats
Org-mode uses the standard ISO notation for dates and times as it is defined
in ISO 8601.  If you cannot get used to this and require another
representation of date and time to keep you happy, you can get it by
customizing the variables @code{org-display-custom-times} and
@code{org-time-stamp-custom-formats}.

@table @kbd
@orgcmd{C-c C-x C-t,org-toggle-time-stamp-overlays} Toggle the display of
custom formats for dates and times.
@end table

@noindent
Org-mode needs the default format for scanning, so the custom date/time
format does not @emph{replace} the default format---instead it is put
@emph{over} the default format using text properties.  This has the
following consequences:
@itemize @bullet
@item
You cannot place the cursor onto a timestamp anymore, only before or after.
@item
The @kbd{S-@key{up}/@key{down}} keys can no longer be used to adjust each
component of a timestamp.  If the cursor is at the beginning of the stamp,
@kbd{S-@key{up}/@key{down}} will change the stamp by one day, just like
@kbd{S-@key{left}/@key{right}}.  At the end of the stamp, the time will be
changed by one minute.
@item
If the timestamp contains a range of clock times or a repeater, these will
not be overlaid, but remain in the buffer as they were.
@item
When you delete a timestamp character-by-character, it will only disappear
from the buffer after @emph{all} (invisible) characters belonging to the ISO
timestamp have been removed.
@item
If the custom timestamp format is longer than the default and you are using
dates in tables, table alignment will be messed up.  If the custom format is
shorter, things do work as expected.
@end itemize


@node Deadlines and scheduling, Clocking work time, Creating timestamps, Date and Times
@section Deadlines and scheduling

A timestamp may be preceded by special keywords to facilitate planning:

@table @var
@item DEADLINE
@cindex DEADLINE keyword

Meaning: the task (most likely a TODO item, though not necessarily) is
supposed to be finished on that date.

@vindex org-deadline-warning-days
On the deadline date, the task will be listed in the agenda.  In addition,
the agenda for @emph{today} will carry a warning about the approaching or
missed deadline, starting @code{org-deadline-warning-days} before the due
date, and continuing until the entry is marked DONE.  An example:

@example
*** TODO write article about the Earth for the Guide
    The editor in charge is [[bbdb:Ford Prefect]]
    DEADLINE: <2004-02-29 Sun>
@end example

You can specify a different lead time for warnings for a specific deadlines
using the following syntax.  Here is an example with a warning period of 5
days @code{DEADLINE: <2004-02-29 Sun -5d>}.

@item SCHEDULED
@cindex SCHEDULED keyword

Meaning: you are planning to start working on that task on the given date.

@vindex org-agenda-skip-scheduled-if-done
The headline will be listed under the given date@footnote{It will still be listed on that date after it has been marked DONE.  If you don't like this,
set the variable @code{org-agenda-skip-scheduled-if-done}.}.  In addition, a
reminder that the scheduled date has passed will be present in the
compilation for @emph{today}, until the entry is marked DONE, i.e.@: the
task will automatically be forwarded until completed.

@example
*** TODO Call Trillian for a date on New Years Eve.
    SCHEDULED: <2004-12-25 Sat>
@end example

@noindent
@b{Important:} Scheduling an item in Org-mode should @i{not} be understood
in the same way that we understand @i{scheduling a meeting}.  Setting a date
for a meeting is just a simple appointment, you should mark this entry with
a simple plain timestamp, to get this item shown on the date where it
applies.  This is a frequent misunderstanding by Org users.  In Org-mode,
@i{scheduling} means setting a date when you want to start working on an
action item.
@end table

@c
@c
You may use timestamps with repeaters in scheduling and deadline entries.
Org-mode will issue early and late warnings based on the assumption that the
timestamp represents the @i{nearest instance} of the repeater.  However, the
use of diary sexp entries like @code{<%%(diary-float t 42)>} in scheduling
and deadline timestamps is limited.  Org-mode does not know enough about the
internals of each sexp function to issue early and late warnings.  However,
it will show the item on each day where the sexp entry matches.

@menu
* Inserting deadline/schedule::  計画項目
* Repeated tasks::           何度も現れる項目
@end menu

@node Inserting deadline/schedule, Repeated tasks, Deadlines and scheduling, Deadlines and scheduling
@subsection Inserting deadlines or schedules

The following commands allow you to quickly insert@footnote{The @samp{SCHEDULED} and @samp{DEADLINE} dates are inserted on the line right
below the headline.  Don't put any text between this line and the headline.}
a deadline or to schedule an item:

@table @kbd
@c
@c FIXME Any CLOSED timestamp will be removed.????????
@c
@c
@orgcmd{C-c C-d,org-deadline} Insert @samp{DEADLINE} keyword along with a
stamp.  The insertion will happen in the line directly following the
headline.  When called with a prefix arg, an existing deadline will be
removed from the entry.  Depending on the variable
@code{org-log-redeadline}@footnote{with corresponding @code{#+STARTUP}
keywords @code{logredeadline}, @code{lognoteredeadline}, and
@code{nologredeadline}}, a note will be taken when changing an existing
deadline.  @orgcmd{C-c C-s,org-schedule} Insert @samp{SCHEDULED} keyword
along with a stamp.  The insertion will happen in the line directly
following the headline.  Any CLOSED timestamp will be removed.  When called
with a prefix argument, remove the scheduling date from the entry.
Depending on the variable @code{org-log-reschedule}@footnote{with corresponding @code{#+STARTUP} keywords @code{logreschedule},
@code{lognotereschedule}, and @code{nologreschedule}}, a note will be taken
when changing an existing scheduling time.  @orgcmd{C-c C-x C-k,org-mark-entry-for-agenda-action}
@kindex k a
@kindex k s
@c
Mark the current entry for agenda action.  After you have marked the entry
like this, you can open the agenda or the calendar to find an appropriate
date.  With the cursor on the selected date, press @kbd{k s} or @kbd{k d} to
schedule the marked item.  @orgcmd{C-c / d,org-check-deadlines}
@cindex sparse tree, for deadlines
@vindex org-deadline-warning-days
@c
@c
Create a sparse tree with all deadlines that are either past-due, or which
will become due within @code{org-deadline-warning-days}.  With @kbd{C-u}
prefix, show all deadlines in the file.  With a numeric prefix, check that
many days.  For example, @kbd{C-1 C-c / d} shows all deadlines due
tomorrow.  @orgcmd{C-c / b,org-check-before-date} Sparse tree for deadlines
and scheduled items before a given date.  @orgcmd{C-c / a,org-check-after-date} Sparse tree for deadlines and scheduled items after
a given date.
@end table

@node Repeated tasks, , Inserting deadline/schedule, Deadlines and scheduling
@subsection Repeated tasks
@cindex tasks, repeated
@cindex repeated tasks

Some tasks need to be repeated again and again.  Org-mode helps to organize
such tasks using a so-called repeater in a DEADLINE, SCHEDULED, or plain
timestamp.  In the following example
@example
** TODO Pay the rent
   DEADLINE: <2005-10-01 Sat +1m>
@end example
@noindent
the @code{+1m} is a repeater; the intended interpretation is that the task
has a deadline on <2005-10-01> and repeats itself every (one) month starting
from that time.  If you need both a repeater and a special warning period in
a deadline entry, the repeater should come first and the warning period
last: @code{DEADLINE: <2005-10-01 Sat +1m -3d>}.

@vindex org-todo-repeat-to-state
Deadlines and scheduled items produce entries in the agenda when they are
over-due, so it is important to be able to mark such an entry as completed
once you have done so.  When you mark a DEADLINE or a SCHEDULE with the TODO
keyword DONE, it will no longer produce entries in the agenda.  The problem
with this is, however, that then also the @emph{next} instance of the
repeated entry will not be active.  Org-mode deals with this in the
following way: When you try to mark such an entry DONE (using @kbd{C-c C-t}), it will shift the base date of the repeating timestamp by the
repeater interval, and immediately set the entry state back to
TODO@footnote{In fact, the target state is taken from, in this sequence, the @code{REPEAT_TO_STATE} property or the variable
@code{org-todo-repeat-to-state}.  If neither of these is specified, the
target state defaults to the first state of the TODO state sequence.}.  In
the example above, setting the state to DONE would actually switch the date
like this:

@example
** TODO Pay the rent
   DEADLINE: <2005-11-01 Tue +1m>
@end example

@vindex org-log-repeat
A timestamp@footnote{You can change this using the option @code{org-log-repeat}, or the @code{#+STARTUP} options @code{logrepeat},
@code{lognoterepeat}, and @code{nologrepeat}.  With @code{lognoterepeat},
you will also be prompted for a note.} will be added under the deadline, to
keep a record that you actually acted on the previous instance of this
deadline.

As a consequence of shifting the base date, this entry will no longer be
visible in the agenda when checking past dates, but all future instances
will be visible.

With the @samp{+1m} cookie, the date shift will always be exactly one
month.  So if you have not paid the rent for three months, marking this
entry DONE will still keep it as an overdue deadline.  Depending on the
task, this may not be the best way to handle it.  For example, if you forgot
to call your father for 3 weeks, it does not make sense to call him 3 times
in a single day to make up for it.  Finally, there are tasks like changing
batteries which should always repeat a certain time @i{after} the last time
you did it.  For these tasks, Org-mode has special repeaters @samp{++} and
@samp{.+}.  For example:

@example
** TODO Call Father
   DEADLINE: <2008-02-10 Sun ++1w>
   Marking this DONE will shift the date by at least one week,
   but also by as many weeks as it takes to get this date into
   the future.  However, it stays on a Sunday, even if you called
   and marked it done on Saturday.
** TODO Check the batteries in the smoke detectors
   DEADLINE: <2005-11-01 Tue .+1m>
   Marking this DONE will shift the date to one month after
   today.
@end example

You may have both scheduling and deadline information for a specific
task---just make sure that the repeater intervals on both are the same.

An alternative to using a repeater is to create a number of copies of a task
subtree, with dates shifted in each copy.  The command @kbd{C-c C-x c} was
created for this purpose, it is described in @ref{Structure editing}.


@node Clocking work time, Effort estimates, Deadlines and scheduling, Date and Times
@section Clocking work time
@cindex clocking time
@cindex time clocking

Org-mode allows you to clock the time you spend on specific tasks in a
project.  When you start working on an item, you can start the clock.  When
you stop working on that task, or when you mark the task done, the clock is
stopped and the corresponding time interval is recorded.  It also computes
the total time spent on each subtree of a project.  And it remembers a
history or tasks recently clocked, to that you can jump quickly between a
number of tasks absorbing your time.

To save the clock history across Emacs sessions, use
@lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
@end lisp
When you clock into a new task after resuming Emacs, the incomplete
clock@footnote{To resume the clock under the assumption that you have worked on this task while outside Emacs, use @code{(setq org-clock-persist t)}.}
will be found (@pxref{Resolving idle time}) and you will be prompted about
what to do with it.

@menu
* Clocking commands::        時計の開始と終了
* The clock table::          詳細な報告
* Resolving idle time::      Resolving time when you've been idle
@end menu

@node Clocking commands, The clock table, Clocking work time, Clocking work time
@subsection Clocking commands

@table @kbd
@orgcmd{C-c C-x C-i,org-clock-in}
@vindex org-clock-into-drawer
Start the clock on the current item (clock-in).  This inserts the CLOCK
keyword together with a timestamp.  If this is not the first clocking of
this item, the multiple CLOCK lines will be wrapped into a @code{:LOGBOOK:}
drawer (see also the variable @code{org-clock-into-drawer}).  When called
with a @kbd{C-u} prefix argument, select the task from a list of recently
clocked tasks.  With two @kbd{C-u C-u} prefixes, clock into the task at
point and mark it as the default task.  The default task will always be
available when selecting a clocking task, with letter @kbd{d}.@*
@cindex property: CLOCK_MODELINE_TOTAL
@cindex property: LAST_REPEAT
@vindex org-clock-modeline-total
@c
While the clock is running, the current clocking time is shown in the mode
line, along with the title of the task.  The clock time shown will be all
time ever clocked for this task and its children.  If the task has an effort
estimate (@pxref{Effort estimates}), the mode line displays the current
clocking time against it@footnote{To add an effort estimate ``on the fly'', hook a function doing this to @code{org-clock-in-prepare-hook}.} If the task
is a repeating one (@pxref{Repeated tasks}), only the time since the last
reset of the task @footnote{as recorded by the @code{LAST_REPEAT} property}
will be shown.  More control over what time is shown can be exercised with
the @code{CLOCK_MODELINE_TOTAL} property.  It may have the values
@code{current} to show only the current clocking instance, @code{today} to
show all time clocked on this tasks today (see also the variable
@code{org-extend-today-until}), @code{all} to include all time, or
@code{auto} which is the default@footnote{See also the variable @code{org-clock-modeline-total}.}.@* Clicking with @kbd{mouse-1} onto the
mode line entry will pop up a menu with clocking options.  @orgcmd{C-c C-x C-o,org-clock-out}
@vindex org-log-note-clock-out
Stop the clock (clock-out).  This inserts another timestamp at the same
location where the clock was last started.  It also directly computes the
resulting time in inserts it after the time range as @samp{=> HH:MM}.  See
the variable @code{org-log-note-clock-out} for the possibility to record an
additional note together with the clock-out timestamp@footnote{The corresponding in-buffer setting is: @code{#+STARTUP: lognoteclock-out}}.
@orgcmd{C-c C-x C-e,org-clock-modify-effort-estimate} Update the effort
estimate for the current clock task.
@kindex C-c C-y
@kindex C-c C-c
@orgcmdkkc{C-c C-c,C-c C-y,org-evaluate-time-range} Recompute the time
interval after changing one of the timestamps.  This is only necessary if
you edit the timestamps directly.  If you change them with
@kbd{S-@key{cursor}} keys, the update is automatic.  @orgcmd{C-c C-t,org-todo} Changing the TODO state of an item to DONE automatically stops
the clock if it is running in this same item.  @orgcmd{C-c C-x C-x,org-clock-cancel} Cancel the current clock.  This is useful if a clock
was started by mistake, or if you ended up working on something else.
@orgcmd{C-c C-x C-j,org-clock-goto} Jump to the headline of the currently
clocked in task.  With a @kbd{C-u} prefix arg, select the target task from a
list of recently clocked tasks.  @orgcmd{C-c C-x C-d,org-clock-display}
@vindex org-remove-highlights-with-change
Display time summaries for each subtree in the current buffer.  This puts
overlays at the end of each headline, showing the total time recorded under
that heading, including the time of any subheadings. You can use visibility
cycling to study the tree, but the overlays disappear when you change the
buffer (see variable @code{org-remove-highlights-with-change}) or press
@kbd{C-c C-c}.
@end table

The @kbd{l} key may be used in the timeline (@pxref{Timeline}) and in the
agenda (@pxref{Weekly/daily agenda}) to show which tasks have been worked on
or closed during a day.

@node The clock table, Resolving idle time, Clocking commands, Clocking work time
@subsection The clock table
@cindex clocktable, dynamic block
@cindex report, of clocked time

Org mode can produce quite complex reports based on the time clocking
information.  Such a report is called a @emph{clock table}, because it is
formatted as one or several Org tables.

@table @kbd
@orgcmd{C-c C-x C-r,org-clock-report} Insert a dynamic block (@pxref{Dynamic blocks}) containing a clock report as an Org-mode table into the current
file.  When the cursor is at an existing clock table, just update it.  When
called with a prefix argument, jump to the first clock report in the current
document and update it.  @orgcmdkkc{C-c C-c,C-c C-x C-u,org-dblock-update}
Update dynamic block at point.  The cursor needs to be in the @code{#+BEGIN}
line of the dynamic block.  @orgkey{C-u C-c C-x C-u} Update all dynamic
blocks (@pxref{Dynamic blocks}).  This is useful if you have several clock
table blocks in a buffer.
@orgcmdkxkc{S-@key{left},S-@key{right},org-clocktable-try-shift} Shift the
current @code{:block} interval and update the table.  The cursor needs to be
in the @code{#+BEGIN: clocktable} line for this command.  If @code{:block}
is @code{today}, it will be shifted to @code{today-1} etc.
@end table


Here is an example of the frame for a clock table as it is inserted into the
buffer with the @kbd{C-c C-x C-r} command:

@cindex #+BEGIN, clocktable
@example
#+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
#+END: clocktable
@end example
@noindent
@vindex org-clocktable-defaults
The @samp{BEGIN} line and specify a number of options to define the scope,
structure, and formatting of the report.  Defaults for all these options can
be configured in the variable @code{org-clocktable-defaults}.

@noindent First there are options that determine which clock entries are to
be selected:
@example
:maxlevel    @r{Maximum level depth to which times are listed in the table.}
             @r{Clocks at deeper levels will be summed into the upper level.}
:scope       @r{The scope to consider.  This can be any of the following:}
             nil        @r{the current buffer or narrowed region}
             file       @r{the full current buffer}
             subtree    @r{the subtree where the clocktable is located}
             tree@var{N}      @r{the surrounding level @var{N} tree, for example @code{tree3}}
             tree       @r{the surrounding level 1 tree}
             agenda     @r{all agenda files}
             ("file"..) @r{scan these files}
             file-with-archives    @r{current file and its archives}
             agenda-with-archives  @r{all agenda files, including archives}
:block       @r{The time block to consider.  This block is specified either}
             @r{absolute, or relative to the current time and may be any of}
             @r{these formats:}
             2007-12-31    @r{New year eve 2007}
             2007-12       @r{December 2007}
             2007-W50      @r{ISO-week 50 in 2007}
             2007-Q2       @r{2nd quarter in 2007}
             2007          @r{the year 2007}
             today, yesterday, today-@var{N}          @r{a relative day}
             thisweek, lastweek, thisweek-@var{N}     @r{a relative week}
             thismonth, lastmonth, thismonth-@var{N}  @r{a relative month}
             thisyear, lastyear, thisyear-@var{N}     @r{a relative year}
             @r{Use @kbd{S-@key{left}/@key{right}} keys to shift the time interval.}
:tstart      @r{A time string specifying when to start considering times.}
:tend        @r{A time string specifying when to stop considering times.}
:step        @r{@code{week} or @code{day}, to split the table into chunks.}
             @r{To use this, @code{:block} or @code{:tstart}, @code{:tend} are needed.}
:stepskip0   @r{Do not show steps that have zero time.}
:fileskip0   @r{Do not show table sections from files which did not contribute.}
:tags        @r{A tags match to select entries that should contribute}.
@end example

Then there are options which determine the formatting of the table.  There
options are interpreted by the function @code{org-clocktable-write-default},
but you can specify your own function using the @code{:formatter} parameter.
@example
:emphasize   @r{When @code{t}, emphasize level one and level two items.}
:lang        @r{Language@footnote{Language terms can be set through the variable @code{org-clock-clocktable-language-setup}.} to use for descriptive cells like "Task".}
:link        @r{Link the item headlines in the table to their origins.}
:narrow      @r{An integer to limit the width of the headline column in}
             @r{the org table.  If you write it like @samp{50!}, then the}
             @r{headline will also be shortened in export.}
:indent      @r{Indent each headline field according to its level.}
:tcolumns    @r{Number of columns to be used for times.  If this is smaller}
             @r{than @code{:maxlevel}, lower levels will be lumped into one column.}
:level       @r{Should a level number column be included?}
:compact     @r{Abbreviation for @code{:level nil :indent t :narrow 40! :tcolumns 1}}
             @r{All are overwritten except if there is an explicit @code{:narrow}}
:timestamp   @r{A timestamp for the entry, when available.  Look for SCHEDULED,}
             @r{DEADLINE, TIMESTAMP and TIMESTAMP_IA, in this order.}
:formula     @r{Content of a @code{#+TBLFM} line to be added and evaluated.}
             @r{As a special case, @samp{:formula %} adds a column with % time.}
             @r{If you do not specify a formula here, any existing formula}
             @r{below the clock table will survive updates and be evaluated.}
:formatter   @r{A function to format clock data and insert it into the buffer.}
@end example
To get a clock summary of the current level 1 tree, for the current day, you
could write
@example
#+BEGIN: clocktable :maxlevel 2 :block today :scope tree1 :link t
#+END: clocktable
@end example
@noindent
and to use a specific time range you could write@footnote{Note that all parameters must be specified in a single line---the line is broken here only
to fit it into the manual.}
@example
#+BEGIN: clocktable :tstart "<2006-08-10 Thu 10:00>"
                    :tend "<2006-08-10 Thu 12:00>"
#+END: clocktable
@end example
A summary of the current subtree with % times would be
@example
#+BEGIN: clocktable :scope subtree :link t :formula %
#+END: clocktable
@end example
A horizontally compact representation of everything clocked during last week
would be
@example
#+BEGIN: clocktable :scope agenda :block lastweek :compact t
#+END: clocktable
@end example

@node Resolving idle time, , The clock table, Clocking work time
@subsection Resolving idle time
@cindex resolve idle time

@cindex idle, resolve, dangling
If you clock in on a work item, and then walk away from your
computer---perhaps to take a phone call---you often need to ``resolve'' the
time you were away by either subtracting it from the current clock, or
applying it to another one.

@vindex org-clock-idle-time
By customizing the variable @code{org-clock-idle-time} to some integer, such
as 10 or 15, Emacs can alert you when you get back to your computer after
being idle for that many minutes@footnote{On computers using Mac OS X, idleness is based on actual user idleness, not just Emacs' idle time.  For
X11, you can install a utility program @file{x11idle.c}, available in the
UTILITIES directory of the Org git distribution, to get the same general
treatment of idleness.  On other systems, idle time refers to Emacs idle
time only.}, and ask what you want to do with the idle time.  There will be
a question waiting for you when you get back, indicating how much idle time
has passed (constantly updated with the current amount), as well as a set of
choices to correct the discrepancy:

@table @kbd
@item k
To keep some or all of the minutes and stay clocked in, press @kbd{k}.  Org
will ask how many of the minutes to keep.  Press @key{RET} to keep them all,
effectively changing nothing, or enter a number to keep that many minutes.
@item K
If you use the shift key and press @kbd{K}, it will keep however many
minutes you request and then immediately clock out of that task.  If you
keep all of the minutes, this is the same as just clocking out of the
current task.
@item s
To keep none of the minutes, use @kbd{s} to subtract all the away time from
the clock, and then check back in from the moment you returned.
@item S
To keep none of the minutes and just clock out at the start of the away
time, use the shift key and press @kbd{S}.  Remember that using shift will
always leave you clocked out, no matter which option you choose.
@item C
To cancel the clock altogether, use @kbd{C}.  Note that if instead of
canceling you subtract the away time, and the resulting clock amount is less
than a minute, the clock will still be canceled rather than clutter up the
log with an empty entry.
@end table

What if you subtracted those away minutes from the current clock, and now
want to apply them to a new clock? Simply clock in to any task immediately
after the subtraction.  Org will notice that you have subtracted time ``on
the books'', so to speak, and will ask if you want to apply those minutes to
the next task you clock in on.

There is one other instance when this clock resolution magic occurs.  Say
you were clocked in and hacking away, and suddenly your cat chased a mouse
who scared a hamster that crashed into your UPS's power button! You suddenly
lose all your buffers, but thanks to auto-save you still have your recent
Org mode changes, including your last clock in.

If you restart Emacs and clock into any task, Org will notice that you have
a dangling clock which was never clocked out from your last session.  Using
that clock's starting time as the beginning of the unaccounted-for period,
Org will ask how you want to resolve that time.  The logic and behavior is
identical to dealing with away time due to idleness; it's just happening due
to a recovery event rather than a set amount of idle time.

You can also check all the files visited by your Org agenda for dangling
clocks at any time using @kbd{M-x org-resolve-clocks}.

@node Effort estimates, Relative timer, Clocking work time, Date and Times
@section Effort estimates
@cindex effort estimates

@cindex property, Effort
@vindex org-effort-property
If you want to plan your work in a very detailed way, or if you need to
produce offers with quotations of the estimated work effort, you may want to
assign effort estimates to entries.  If you are also clocking your work, you
may later want to compare the planned effort with the actual working time, a
great way to improve planning estimates.  Effort estimates are stored in a
special property @samp{Effort}@footnote{You may change the property being used with the variable @code{org-effort-property}.}.  You can set the effort
for an entry with the following commands:

@table @kbd
@orgcmd{C-c C-x e,org-set-effort} Set the effort estimate for the current
entry.  With a numeric prefix argument, set it to the Nth allowed value (see
below).  This command is also accessible from the agenda with the @kbd{e}
key.  @orgcmd{C-c C-x C-e,org-clock-modify-effort-estimate} Modify the
effort estimate of the item currently being clocked.
@end table

Clearly the best way to work with effort estimates is through column view
(@pxref{Column view}).  You should start by setting up discrete values for
effort estimates, and a @code{COLUMNS} format that displays these values
together with clock sums (if you want to clock your time).  For a specific
buffer you can use

@example
#+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00
#+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort)@{:@} %CLOCKSUM
@end example

@noindent
@vindex org-global-properties
@vindex org-columns-default-format
or, even better, you can set up these values globally by customizing the
variables @code{org-global-properties} and
@code{org-columns-default-format}.  In particular if you want to use this
setup also in the agenda, a global setup may be advised.

The way to assign estimates to individual items is then to switch to column
mode, and to use @kbd{S-@key{right}} and @kbd{S-@key{left}} to change the
value.  The values you enter will immediately be summed up in the
hierarchy.  In the column next to it, any clocked time will be displayed.

@vindex org-agenda-columns-add-appointments-to-effort-sum
If you switch to column view in the daily/weekly agenda, the effort column
will summarize the estimated work effort for each day@footnote{Please note the pitfalls of summing hierarchical data in a flat list (@pxref{Agenda column view}).}, and you can use this to find space in your schedule.  To
get an overview of the entire part of the day that is committed, you can set
the option @code{org-agenda-columns-add-appointments-to-effort-sum}.  The
appointments on a day that take place over a specified time interval will
then also be added to the load estimate of the day.

Effort estimates can be used in secondary agenda filtering that is triggered
with the @kbd{/} key in the agenda (@pxref{Agenda commands}).  If you have
these estimates defined consistently, two or three key presses will narrow
down the list to stuff that fits into an available time slot.

@node Relative timer, カウントダウンタイマ, Effort estimates, Date and Times
@section Taking notes with a relative timer
@cindex relative timer

When taking notes during, for example, a meeting or a video viewing, it can
be useful to have access to times relative to a starting time.  Org provides
such a relative timer and make it easy to create timed notes.

@table @kbd
@c for key sequences with a comma, command name macros fail :(
@orgcmd{C-c C-x .,org-timer} Insert a relative time into the buffer.  The
first time you use this, the timer will be started.  When called with a
prefix argument, the timer is restarted.  @orgcmd{C-c C-x -,org-timer-item}
Insert a description list item with the current relative time.  With a
prefix argument, first reset the timer to 0.
@orgcmd{M-@key{RET},org-insert-heading} Once the timer list is started, you
can also use @kbd{M-@key{RET}} to insert new timer items.
@kindex C-c C-x ,
@item C-c C-x ,
@c removed the sentence because it is redundant to the following item
Pause the timer, or continue it if it is already paused
(@command{org-timer-pause-or-continue}).
@kindex C-u C-c C-x ,
@item C-u C-c C-x ,
Stop the timer.  After this, you can only start a new timer, not continue
the old one.  This command also removes the timer from the mode line.
@orgcmd{C-c C-x 0,org-timer-start} Reset the timer without inserting
anything into the buffer.  By default, the timer is reset to 0.  When called
with a @kbd{C-u} prefix, reset the timer to specific starting offset.  The
user is prompted for the offset, with a default taken from a timer string at
point, if any, So this can be used to restart taking notes after a break in
the process.  When called with a double prefix argument @kbd{C-u C-u},
change all timer strings in the active region by a certain amount.  This can
be used to fix timer strings if the timer was not started at exactly the
right moment.
@end table

@node カウントダウンタイマ, , Relative timer, Date and Times
@section カウントダウンタイマ
@cindex カウントダウンタイマ
@kindex C-c C-x ;
@kindex ;

Calling @code{org-timer-set-timer} from an Org-mode buffer runs a countdown
timer.  Use @key{;} from agenda buffers, @key{C-c C-x ;} everwhere else.

@code{org-timer-set-timer} prompts the user for a duration and displays a
countdown timer in the modeline.  @code{org-timer-default-timer} sets the
default countdown value.  Giving a prefix numeric argument overrides this
default value.

@node Capture - Refile - Archive, Agenda Views, Date and Times, Top
@chapter Capture - Refile - Archive
@cindex キャプチャ

An important part of any organization system is the ability to quickly
capture new ideas and tasks, and to associate reference material with them.
Org does this using a process called @i{capture}.  It also can store files
related to a task (@i{attachments}) in a special directory.  Once in the
system, tasks and projects need to be moved around.  Moving completed
project trees to an archive file keeps the system compact and fast.

@menu
* Capture::                  新しいものをキャプチャする
* Attachments::              タスクにファイルを追加する
* RSS Feeds::                RSSフィードから取り込む
* Protocols::                外部（e.g. @: 
                               ブラウザ）からEmacsとOrg-modeにアクセスする
* Refiling notes::           別な場所にツリーを移動する
* Archiving::                完了したプロジェクトの扱い方
@end menu

@node Capture, Attachments, Capture - Refile - Archive, Capture - Refile - Archive
@section Capture
@cindex キャプチャ

Org's method for capturing new items is heavily inspired by John Wiegley
excellent remember package.  Up to version 6.36 Org used a special setup for
@file{remember.el}.  @file{org-remember.el} is still part of Org-mode for
backward compatibility with existing setups.  You can find the documentation
for org-remember at @url{http://orgmode.org/org-remember.pdf}.

The new capturing setup described here is preferred and should be used by
new users.  To convert your @code{org-remember-templates}, run the command
@example
@kbd{M-x org-capture-import-remember-templates @key{RET}}
@end example
@noindent and then customize the new variable with @kbd{M-x customize-variable org-capture-templates}, check the result, and save the
customization.  You can then use both remember and capture until you are
familiar with the new mechanism.

Capture lets you quickly store notes with little interruption of your work
flow.  The basic process of capturing is very similar to remember, but Org
does enhance it with templates and more.

@menu
* Setting up capture::       キャプチャされたノートが保存される場所
* Using capture::            キャプチャの実行と中止コマンド
* Capture templates::        異なるタイプのテンプレートを定義する
@end menu

@node Setting up capture, Using capture, Capture, Capture
@subsection Setting up capture

The following customization sets a default target file for notes, and
defines a global key@footnote{Please select your own key, @kbd{C-c c} is
only a suggestion.} for capturing new material.

@vindex org-default-notes-file
@example
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
@end example

@node Using capture, Capture templates, Setting up capture, Capture
@subsection Using capture

@table @kbd
@orgcmd{C-c c,org-capture} Call the command @code{org-capture}.  Note that
this keybinding is global and not active by default - you need to install
it.  If you have templates
@cindex date tree
defined @pxref{Capture templates}, it will offer these templates for
selection or use a new Org outline node as the default template.  It will
insert the template into the target file and switch to an indirect buffer
narrowed to this new node.  You may then insert the information you want.

@orgcmd{C-c C-c,org-capture-finalize} Once you have finished entering
information into the capture buffer, @kbd{C-c C-c} will return you to the
window configuration before the capture process, so that you can resume your
work without further distraction.  When called with a prefix arg, finalize
and then jump to the captured item.

@orgcmd{C-c C-w,org-capture-refile} Finalize the capture process by refiling
(@pxref{Refiling notes}) the note to a different place.  Please realize that
this is a normal refiling command that will be executed---so the cursor
position at the moment you run this command is important.  If you have
inserted a tree with a parent and children, first move the cursor back to
the parent.  Any prefix argument given to this command will be passed on to
the @code{org-refile} command.

@orgcmd{C-c C-k,org-capture-kill} Abort the capture process and return to
the previous state.

@end table

You can also call @code{org-capture} in a special way from the agenda, using
the @kbd{k c} key combination.  With this access, any timestamps inserted by
the selected capture template will default to the cursor date in the agenda,
rather than to the current date.

To find the locations of the last stored capture, use @code{org-capture}
with prefix commands:

@table @kbd
@orgkey{C-u C-c c} Visit the target location of a cpature template.  You get
to select the template in the usual way.  @orgkey{C-u C-u C-c c} Visit the
last stored capture item in its buffer.
@end table

@node Capture templates, , Using capture, Capture
@subsection Capture templates
@cindex templates, for Capture

You can use templates for different types of capture items, and for
different target locations.  The easiest way to create such templates is
through the customize interface.

@table @kbd
@orgkey{C-c c C} Customize the variable @code{org-capture-templates}.
@end table

Before we give the formal description of template definitions, let's look at
an example.  Say you would like to use one template to create general TODO
entries, and you want to put these entries under the heading @samp{Tasks} in
your file @file{~/org/gtd.org}.  Also, a date tree in the file
@file{journal.org} should capture journal entries.  A possible configuration
would look like:

@example
(setq org-capture-templates
 '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
        "* TODO %?\n  %i\n  %a")
   ("j" "Journal" entry (file+datetree "~/org/journal.org")
        "* %?\nEntered on %U\n  %i\n  %a")))
@end example

@noindent If you then press @kbd{C-c c t}, Org will prepare the template
for you like this:
@example
* TODO
  [[file:@var{link to where you initiated capture}]]
@end example

@noindent
During expansion of the template, @code{%a} has been replaced by a link to
the location from where you called the capture command.  This can be
extremely useful for deriving tasks from emails, for example.  You fill in
the task definition, press @code{C-c C-c} and Org returns you to the same
place where you started the capture process.

To define special keys to capture to a particular template without going
through the interactive template selection, you can create your key binding
like this:

@lisp
(define-key global-map "\C-cx"
   (lambda () (interactive) (org-capture nil "x")))
@end lisp

@menu
* Template elements::        完全なテンプレート入力のために必要なこと
* テンプレートの拡張::  時刻と条件についての情報を書き込む
@end menu

@node Template elements, テンプレートの拡張, Capture templates, Capture templates
@subsubsection Template elements

Now lets look at the elements of a template definition.  Each entry in
@code{org-capture-templates} is a list with the following items: 

@table @var
@item keys
The keys that will select the template, as a string, characters only, for
example @code{"a"} for a template to be selected with a single key, or
@code{"bt"} for selection with two keys.  When using several keys, keys
using the same prefix key must be sequential in the list and preceded by a
2-element entry explaining the prefix key, for example
@example
         ("b" "Templates for marking stuff to buy")
@end example
@noindent If you do not define a template for the @kbd{C} key, this key will
be used to open the customize buffer for this complex variable.

@item description
A short string describing the template, which will be shown during
selection.

@item type
The type of entry, a symbol.  Valid values are:
@table @code
@item entry
An Org-mode node, with a headline. Will be filed as the child of the target
entry or as a top-level entry.  The target file should be an Org-mode file.
@item item
A plain list item, placed in the first plain list at the target location.
Again the target file should be an Org file.
@item checkitem
A checkbox item.  This only differs from the plain list item by the default
template.
@item table-line
a new line in the first table at the target location.  Where exactly the
line will be inserted depends on the properties @code{:prepend} and
@code{:table-line-pos} (see below).
@item plain
Text to be inserted as it is.
@end table

@item target
@vindex org-default-notes-file
Specification of where the captured item should be placed.  In Org-mode
files, targets usually define a node.  Entries will become children of this
node.  Other types will be added to the table or list in the body of this
node.  Most target specifications contain a file name.  If that file name is
the empty string, it defaults to @code{org-default-notes-file}.  A file can
also be given as a variable, function, or Emacs Lisp form.

Valid values are:
@table @code
@item (file "path/to/file")
Text will be placed at the beginning or end of that file.

@item (id "id of existing org entry")
Filing as child of this entry, or in the body of the entry.

@item (file+headline "path/to/file" "node headline")
Fast configuration if the target heading is unique in the file.

@item (file+olp "path/to/file" "Level 1 heading" "Level 2" ...)
For non-unique headings, the full path is safer.

@item (file+regexp  "path/to/file" "regexp to find location")
Use a regular expression to position the cursor.

@item (file+datetree "path/to/file")
Will create a heading in a date tree for today's date.

@item (file+datetree+prompt "path/to/file")
Will create a heading in a date tree, but will prompt for the date.

@item (file+function "path/to/file" function-finding-location)
A function to find the right location in the file.

@item (clock)
File to the entry that is currently being clocked.

@item (function function-finding-location)
Most general way, write your own function to find both file and location.
@end table

@item template
The template for creating the capture item.  If you leave this empty, an
appropriate default template will be used.  Otherwise this is a string with
escape codes, which will be replaced depending on time and context of the
capture call.  The string with escapes may be loaded from a template file,
using the special syntax @code{(file "path/to/template")}.  See below for
more details.

@item properties
The rest of the entry is a property list of additional options.  Recognized
properties are:
@table @code
@item :prepend
Normally new captured information will be appended at the target location
(last child, last table line, last list item...).  Setting this property
will change that.

@item :immediate-finish
When set, do not offer to edit the information, just file it away
immediately.  This makes sense if the template only needs information that
can be added automatically.

@item :empty-lines
Set this to the number of lines to insert before and after the new item.
Default 0, only common other value is 1.

@item :clock-in
Start the clock in this item.

@item :clock-keep
Keep the clock running when filing the captured entry.

@item :clock-resume
If starting the capture interrupted a clock, restart that clock when
finished with the capture.  Note that @code{:clock-keep} has precedence over
@code{:clock-resume}.  When setting both to @code{t}, the current clock will
run and the previous one will not be resumed.

@item :unnarrowed
Do not narrow the target buffer, simply show the full buffer.  Default is to
narrow it so that you only see the new material.

@item :kill-buffer
If the target file was not yet visited when capture was invoked, kill the
buffer again after capture is completed.
@end table
@end table

@node テンプレートの拡張, , Template elements, Capture templates
@subsubsection テンプレートの拡張

In the template itself, special @kbd{%}-escapes@footnote{If you need one of these sequences literally, escape the @kbd{%} with a backslash.} allow
dynamic insertion of content:

@comment SJE: should these sentences terminate in period?
@smallexample
%^@{@var{prompt}@}  @r{prompt the user for a string and replace this sequence with it.}
            @r{You may specify a default value and a completion table with}
            @r{%^@{prompt|default|completion2|completion3...@}}
            @r{The arrow keys access a prompt-specific history.}
%a          @r{annotation, normally the link created with @code{org-store-link}}
%A          @r{like @code{%a}, but prompt for the description part}
%i          @r{initial content, the region when capture is called while the}
            @r{region is active.}
            @r{The entire text will be indented like @code{%i} itself.}
%t          @r{timestamp, date only}
%T          @r{timestamp with date and time}
%u, %U      @r{like the above, but inactive timestamps}
%^t         @r{like @code{%t}, but prompt for date.  Similarly @code{%^T}, @code{%^u}, @code{%^U}}
            @r{You may define a prompt like @code{%^@{Birthday@}t}}
%n          @r{user name (taken from @code{user-full-name})}
%c          @r{Current kill ring head.}
%x          @r{Content of the X clipboard.}
%^C         @r{Interactive selection of which kill or clip to use.}
%^L         @r{Like @code{%^C}, but insert as link.}
%k          @r{title of the currently clocked task}
%K          @r{link to the currently clocked task}
%f          @r{file visited by current buffer when org-capture was called}
%F          @r{like @code{%f}, but include full path}
%^g         @r{prompt for tags, with completion on tags in target file.}
%^G         @r{prompt for tags, with completion all tags in all agenda files.}
%^@{@var{prop}@}p   @r{Prompt the user for a value for property @var{prop}}
%:keyword   @r{specific information for certain link types, see below}
%[@var{file}]     @r{insert the contents of the file given by @var{file}}
%(@var{sexp})     @r{evaluate Elisp @var{sexp} and replace with the result}
@end smallexample

@noindent
For specific link types, the following keywords will be defined@footnote{If you define your own link types (@pxref{Adding hyperlink types}), any
property you store with @code{org-store-link-props} can be accessed in
capture templates in a similar way.}:

@vindex org-from-is-user-regexp
@smallexample
Link type          |  Available keywords
-------------------+----------------------------------------------
bbdb                    |  %:name %:company
irc                     |  %:server %:port %:nick
vm, wl, mh, mew, rmail  |  %:type %:subject %:message-id
                        |  %:from %:fromname %:fromaddress
                        |  %:to   %:toname   %:toaddress
                        |  %:date @r{(message date header field)}
                        |  %:date-timestamp @r{(date as active timestamp)}
                        |  %:date-timestamp-inactive @r{(date as inactive timestamp)}
                        |  %:fromto @r{(either "to NAME" or "from NAME")@footnote{This will always be the other, not the user.  See the variable @code{org-from-is-user-regexp}.}}
gnus                    |  %:group, @r{for messages also all email fields}
w3, w3m                 |  %:url
info                    |  %:file %:node
calendar                |  %:date
@end smallexample

@noindent
To place the cursor after template expansion use:

@smallexample
%?          @r{After completing the template, position cursor here.}
@end smallexample


@node Attachments, RSS Feeds, Capture, Capture - Refile - Archive
@section Attachments
@cindex attachments

@vindex org-attach-directory
It is often useful to associate reference material with an outline
node/task.  Small chunks of plain text can simply be stored in the subtree
of a project.  Hyperlinks (@pxref{Hyperlinks}) can establish associations
with files that live elsewhere on your computer or in the cloud, like emails
or source code files belonging to a project.  Another method is
@i{attachments}, which are files located in a directory belonging to an
outline node.  Org uses directories named by the unique ID of each entry.
These directories are located in the @file{data} directory which lives in
the same directory where your Org file lives@footnote{If you move entries or Org files from one directory to another, you may want to configure
@code{org-attach-directory} to contain an absolute path.}.  If you
initialize this directory with @code{git init}, Org will automatically
commit changes when it sees them.  The attachment system has been
contributed to Org by John Wiegley.

In cases where it seems better to do so, you can also attach a directory of
your choice to an entry.  You can also make children inherit the attachment
directory from a parent, so that an entire subtree uses the same attached
directory.

@noindent The following commands deal with attachments:

@table @kbd

@orgcmd{C-c C-a,org-attach} The dispatcher for commands related to the
attachment system.  After these keys, a list of commands is displayed and
you must press an additional key to select a command:

@table @kbd
@orgcmdtkc{a,C-c C-a a,org-attach-attach}
@vindex org-attach-method
Select a file and move it into the task's attachment directory.  The file
will be copied, moved, or linked, depending on @code{org-attach-method}.
Note that hard links are not supported on all systems.

@kindex C-c C-a c
@kindex C-c C-a m
@kindex C-c C-a l
@item c/m/l
Attach a file using the copy/move/link method.  Note that hard links are not
supported on all systems.

@orgcmdtkc{n,C-c C-a n,org-attach-new} Create a new attachment as an Emacs
buffer.

@orgcmdtkc{z,C-c C-a z,org-attach-sync} Synchronize the current task with
its attachment directory, in case you added attachments yourself.

@orgcmdtkc{o,C-c C-a o,org-attach-open}
@vindex org-file-apps
Open current task's attachment.  If there is more than one, prompt for a
file name first.  Opening will follow the rules set by
@code{org-file-apps}.  For more details, see the information on following
hyperlinks (@pxref{Handling links}).

@orgcmdtkc{O,C-c C-a O,org-attach-open-in-emacs} Also open the attachment,
but force opening the file in Emacs.

@orgcmdtkc{f,C-c C-a f,org-attach-reveal} Open the current task's attachment
directory.

@orgcmdtkc{F,C-c C-a F,org-attach-reveal-in-emacs} Also open the directory,
but force using @command{dired} in Emacs.

@orgcmdtkc{d,C-c C-a d,org-attach-delete-one} Select and delete a single
attachment.

@orgcmdtkc{D,C-c C-a D,org-attach-delete-all} Delete all of a task's
attachments.  A safer way is to open the directory in @command{dired} and
delete from there.

@orgcmdtkc{s,C-c C-a s,org-attach-set-directory}
@cindex property, ATTACH_DIR
Set a specific directory as the entry's attachment directory.  This works by
putting the directory path into the @code{ATTACH_DIR} property.

@orgcmdtkc{i,C-c C-a i,org-attach-set-inherit}
@cindex property, ATTACH_DIR_INHERIT
Set the @code{ATTACH_DIR_INHERIT} property, so that children will use the
same directory for attachments as the parent does.
@end table
@end table

@node RSS Feeds, Protocols, Attachments, Capture - Refile - Archive
@section RSSフィード
@cindex RSSフィード
@cindex Atom feeds

Org can add and change entries based on information found in RSS feeds and
Atom feeds.  You could use this to make a task out of each new podcast in a
podcast feed.  Or you could use a phone-based note-creating service on the
web to import tasks into Org.  To access feeds, configure the variable
@code{org-feed-alist}.  The docstring of this variable has detailed
information.  Here is just an example:

@example
(setq org-feed-alist
     '(("Slashdot"
         "http://rss.slashdot.org/Slashdot/slashdot"
         "~/txt/org/feeds.org" "Slashdot Entries")))
@end example

@noindent
will configure that new items from the feed provided by
@code{rss.slashdot.org} will result in new entries in the file
@file{~/org/feeds.org} under the heading @samp{Slashdot Entries}, whenever
the following command is used:

@table @kbd
@orgcmd{C-c C-x g,org-feed-update-all}
@item C-c C-x g
Collect items from the feeds configured in @code{org-feed-alist} and act
upon them.  @orgcmd{C-c C-x G,org-feed-goto-inbox} Prompt for a feed name
and go to the inbox configured for this feed.
@end table

Under the same headline, Org will create a drawer @samp{FEEDSTATUS} in which
it will store information about the status of items in the feed, to avoid
adding the same item several times.  You should add @samp{FEEDSTATUS} to the
list of drawers in that file:

@example
#+DRAWERS: LOGBOOK PROPERTIES FEEDSTATUS
@end example

For more information, including how to read atom feeds, see
@file{org-feed.el} and the docstring of @code{org-feed-alist}.

@node Protocols, Refiling notes, RSS Feeds, Capture - Refile - Archive
@section Protocols for external access
@cindex protocols, for external access
@cindex emacsserver

You can set up Org for handling protocol calls from outside applications
that are passed to Emacs through the @file{emacsserver}.  For example, you
can configure bookmarks in your web browser to send a link to the current
page to Org and create a note from it using capture (@pxref{Capture}).  Or
you could create a bookmark that will tell Emacs to open the local source
file of a remote website you are looking at with the browser.  See
@uref{http://orgmode.org/worg/org-contrib/org-protocol.php} for detailed
documentation and setup instructions.

@node Refiling notes, Archiving, Protocols, Capture - Refile - Archive
@section Refiling notes
@cindex refiling notes

When reviewing the captured data, you may want to refile some of the entries
into a different list, for example into a project.  Cutting, finding the
right location, and then pasting the note is cumbersome.  To simplify this
process, you can use the following special command:

@table @kbd
@orgcmd{C-c C-w,org-refile}
@vindex org-reverse-note-order
@vindex org-refile-targets
@vindex org-refile-use-outline-path
@vindex org-outline-path-complete-in-steps
@vindex org-refile-allow-creating-parent-nodes
@vindex org-log-refile
@vindex org-refile-use-cache
Refile the entry or region at point.  This command offers possible locations
for refiling the entry and lets you select one with completion.  The item
(or all items in the region) is filed below the target heading as a
subitem.  Depending on @code{org-reverse-note-order}, it will be either the
first or last subitem.@* By default, all level 1 headlines in the current
buffer are considered to be targets, but you can have more complex
definitions across a number of files.  See the variable
@code{org-refile-targets} for details.  If you would like to select a
location via a file-path-like completion along the outline path, see the
variables @code{org-refile-use-outline-path} and
@code{org-outline-path-complete-in-steps}.  If you would like to be able to
create new nodes as new parents for refiling on the fly, check the variable
@code{org-refile-allow-creating-parent-nodes}.  When the variable
@code{org-log-refile}@footnote{with corresponding @code{#+STARTUP} keywords
@code{logrefile}, @code{lognoterefile}, and @code{nologrefile}} is set, a
timestamp or a note will be recorded when an entry has been refiled.
@orgkey{C-u C-c C-w} Use the refile interface to jump to a heading.
@orgcmd{C-u C-u C-c C-w,org-refile-goto-last-stored} Jump to the location
where @code{org-refile} last moved a tree to.
@item C-2 C-c C-w
Refile as the child of the item currently being clocked.
@item C-0 C-c C-w @ @r{or} @ C-u C-u C-u C-c C-w

@orgcmdtkc{C-0 C-c C-w @ @r{or} @ C-u C-u C-u C-c C-w,C-0 C-c
C-w,org-refile-cache-clear}

Clear the target cache.  Caching of refile targets can be turned on by
setting @code{org-refile-use-cache}.  To make the command see new possible
targets, you have to clear the cache with this command.
@end table

@node Archiving, , Refiling notes, Capture - Refile - Archive
@section Archiving
@cindex archiving

When a project represented by a (sub)tree is finished, you may want to move
the tree out of the way and to stop it from contributing to the agenda.
Archiving is important to keep your working files compact and global
searches like the construction of agenda views fast.

@table @kbd
@orgcmd{C-c C-x C-a,org-archive-subtree-default}
@vindex org-archive-default-command
Archive the current entry using the command specified in the variable
@code{org-archive-default-command}.
@end table

@menu
* Moving subtrees::          アーカイブファイルにツリーを移動する
* ファイル内部でのアーカイブ::  アーカイブタグを付けてファイル内に残す
@end menu

@node Moving subtrees, ファイル内部でのアーカイブ, Archiving, Archiving
@subsection Moving a tree to the archive file
@cindex external archiving

The most common archiving action is to move a project tree to another file,
the archive file.

@table @kbd
@orgcmdkskc{C-c C-x C-s,C-c $,org-archive-subtree}
@vindex org-archive-location
Archive the subtree starting at the cursor position to the location given by
@code{org-archive-location}.  @orgkey{C-u C-c C-x C-s} Check if any direct
children of the current headline could be moved to the archive.  To do this,
each subtree is checked for open TODO entries.  If none are found, the
command offers to move it to the archive location.  If the cursor is
@emph{not} on a headline when this command is invoked, the level 1 trees
will be checked.
@end table

@cindex archive locations
The default archive location is a file in the same directory as the current
file, with the name derived by appending @file{_archive} to the current file
name.  For information and examples on how to change this, see the
documentation string of the variable @code{org-archive-location}.  There is
also an in-buffer option for setting this variable, for example@footnote{For backward compatibility, the following also works: If there are several such
lines in a file, each specifies the archive location for the text below it.
The first such line also applies to any text before its definition.
However, using this method is @emph{strongly} deprecated as it is
incompatible with the outline structure of the document.  The correct method
for setting multiple archive locations in a buffer is using properties.}:

@cindex #+ARCHIVE
@example
#+ARCHIVE: %s_done::
@end example

@cindex プロパティ（ARCHIVE）
@noindent
If you would like to have a special ARCHIVE location for a single entry or a
(sub)tree, give the entry an @code{:ARCHIVE:} property with the location as
the value (@pxref{Properties and Columns}).

@vindex org-archive-save-context-info
When a subtree is moved, it receives a number of special properties that
record context information like the file from where the entry came, its
outline path the archiving time etc.  Configure the variable
@code{org-archive-save-context-info} to adjust the amount of information
added.


@node ファイル内部でのアーカイブ, , Moving subtrees, Archiving
@subsection ファイル内部でのアーカイブ

If you want to just switch off (for agenda views) certain subtrees without
moving them to a different file, you can use the @code{ARCHIVE tag}.

A headline that is marked with the ARCHIVE tag (@pxref{Tags}) stays at its
location in the outline tree, but behaves in the following way:
@itemize @minus
@item
@vindex org-cycle-open-archived-trees
It does not open when you attempt to do so with a visibility cycling command
(@pxref{Visibility cycling}).  You can force cycling archived subtrees with
@kbd{C-@key{TAB}}, or by setting the option
@code{org-cycle-open-archived-trees}.  Also normal outline commands like
@code{show-all} will open archived subtrees.
@item
@vindex org-sparse-tree-open-archived-trees
During sparse tree construction (@pxref{Sparse trees}), matches in archived
subtrees are not exposed, unless you configure the option
@code{org-sparse-tree-open-archived-trees}.
@item
@vindex org-agenda-skip-archived-trees
During agenda view construction (@pxref{Agenda Views}), the content of
archived trees is ignored unless you configure the option
@code{org-agenda-skip-archived-trees}, in which case these trees will always
be included.  In the agenda you can press @kbd{v a} to get archives
temporarily included.
@item
@vindex org-export-with-archived-trees
Archived trees are not exported (@pxref{Exporting}), only the headline is.
Configure the details using the variable
@code{org-export-with-archived-trees}.
@item
@vindex org-columns-skip-archived-trees
Archived trees are excluded from column view unless the variable
@code{org-columns-skip-archived-trees} is configured to @code{nil}.
@end itemize

The following commands help manage the ARCHIVE tag:

@table @kbd
@orgcmd{C-c C-x a,org-toggle-archive-tag} Toggle the ARCHIVE tag for the
current headline.  When the tag is set, the headline changes to a shadowed
face, and the subtree below it is hidden.  @orgkey{C-u C-c C-x a} Check if
any direct children of the current headline should be archived.  To do this,
each subtree is checked for open TODO entries.  If none are found, the
command offers to set the ARCHIVE tag for the child.  If the cursor is
@emph{not} on a headline when this command is invoked, the level 1 trees
will be checked.  @orgcmd{C-@kbd{TAB},org-force-cycle-archived} Cycle a tree
even if it is tagged with ARCHIVE.  @orgcmd{C-c C-x A,org-archive-to-archive-sibling} Move the current entry to the
@emph{Archive Sibling}.  This is a sibling of the entry with the heading
@samp{Archive} and the tag @samp{ARCHIVE}.  The entry becomes a child of
that sibling and in this way retains a lot of its original context,
including inherited tags and approximate position in the outline.
@end table


@node Agenda Views, Markup, Capture - Refile - Archive, Top
@chapter アジェンダビュー
@cindex アジェンダビュー

Org-modeで作業した結果、TODOアイテム、タイムスタンプのついたアイテム、タグの
付いた見出しなどが、1つのファイル、あるいはいくつものファイルにまたがって、撒
き散らされることとなります。ある特定の日に重要な、実際に動いているアイテムや
イベントの全体像を把握するためには、ひとつの管理された方法で、これらの情報を
集めたり、並び替えたりしながら、表示することが必要です。

Org-modeでは、いろいろな基準によってアイテムを選択することが可能であり、独立
したバッファにそれらのアイテムを表示させることができます。７つの異なるビュー
のタイプが用意されています。：

@itemize @bullet
@item
@emph{アジェンダ}　カレンダーのように指定した日付の情報を表示します、
@item
@emph{TODOリスト}　未完了のアクションアイテムをカバーします、
@item
@emph{マッチビュー}　関連づけられているタグやプロパティ、TODOの状態に基づいて見出
しを表示します、
@item
@emph{タイムラインビュー}　1つのOrg-modeのファイルの中に含まれている全てのイベント
を時間順のビューに表示します、
@item
a @emph{テキストの検索ビュー}　複数のファイルの中かから、指定したキーワードを含ん
でいるすべてのエントリーを表示します、
@item
a @emph{詳細が未決定のプロジェクトビュー}　現在作業が進んでいないプロジェクトを表
示します。そして、
@item
@emph{カスタムビュー}　特別な検索や異なるビューの組合せによるビューです。
@end itemize

@noindent
抽出された情報は特別な@emph{アジェンダバッファ}に表示されます。このバッファはリー
ドオンリーですが、オリジナルのOrg-modeファイルにジャンプしたり、オリジナルの
ファイルを間接的に編集することができます。  

@vindex org-agenda-window-setup
@vindex org-agenda-restore-windows-after-quit
２つの変数によって、アジェンダバッファをどのように表示するか、アジェンダが存
在したときに、ウインドウの設定を元に戻すかどうかをコントロールします。；@code{org-agenda-window-setup}と
@code{org-agenda-restore-windows-after-quit}.

@menu
* Agenda files::             アジェンダ生成のために探索されるファイル
* Agenda dispatcher::        アジェンダビューへのキーボードアクセス
* Built-in agenda views::    すぐに使える機能に何があるでしょう？
* Presentation and sorting::  表示のためにどのようにアジェンダ項目が準備され
るのか
* Agenda commands::          タスクツリーのリモート編集
* Custom agenda views::      特別な検索とビューを定義する
* Exporting Agenda Views::   ビューをファイルに書き出す
* Agenda column view::       収集したエントリーのためにコラムビューを使用する
@end menu

@node Agenda files, Agenda dispatcher, Agenda Views, Agenda Views
@section Agenda files
@cindex アジェンダファイル
@cindex アジェンダ用のファイル

@vindex org-agenda-files
表示される情報は、通常すべての@emph{アジェンダファイル}から収集されます。アジェン
ダファイルは@code{org-agenda-files}
@footnote{もしもその変数の値がリストではなく、単独のファイル名の場合には、その外部ファイルの中に記載されているアジェンダファイルの名前となります。}変
数にリスト化されたファイルが対象となります。もしもこのリストの中にディレクト
リ名が記載されていたら、
そのディレクトリの中にある@file{.org}という拡張子がついた全てのファイルが、アジェ
ンダファイルの対象となります。

したがって、たとえあなたが1つのOrg-modeファイルでしか作業をしていなくても、こ
のファイルをそのリスト
@footnote{コマンド選択画面を使用しているときに、コマンドを選択する前に、@kbd{<}を押すと、編集中のファイルに対するコマンドが制限されて、次のコマンド選択画面でコマンドが入力されるまで、@code{org-agenda-files}は無視されます。}に
記載したことになるでしょう。@code{org-agenda-files}をカスタマイズすることが可能で
、しかも以下に述べるコマンドを通して簡単な方法で維持することができます。

@cindex ファイル、アジェンダリストに追加する
@table @kbd
@orgcmd{C-c [,org-agenda-file-to-front}　アジェンダファイルのリストに編集中のファイ
ルを追加する。そのファイルは、リストの先頭に追加される。もしも既にリストに存
在していたら、先頭に移動する。前置引数をつけることで、リストの最後に追加／移
動する。@orgcmd{C-c ],org-remove-file}　編集中のファイルをアジェンダファイルのリスト
から削除する。
@kindex C-,
@orgcmd{C-',org-cycle-agenda-files}
@itemx C-,
アジェンダファイルのリストに従って、1つのファイルから次のファイルへと切り替え
る。
@kindex M-x org-iswitchb
@item M-x org-iswitchb
@code{iswitchb}と似たようなインターフェースでOrg-modeのバッファの間を切り替えるコマンド。
@end table

@noindent
Org-modeメニューには、現時点のファイルのリストが含まれており、その中のファイ
ルに移動するのに役立ちます。

もしもこのリストに載っているファイルではなく、作業中のアジェンダファイルに焦
点をあてたかったり、リストにあるファイルのまさにひとつのファイルに焦点をあて
たかったり、はたまたあるファイルの中のあるサブツリーに焦点をあてたかったりし
たいときは、いくつかの方法が用意されています。単一のアジェンダコマンドとして
、コマンド選択画面上
(@pxref{Agenda dispatcher})で@kbd{<}を1回ないし数回押すとよいのです。アジェンダの対象を
ある限定した期間に絞り込むために以下のコマンドが用意されています。：

@table @kbd
@orgcmd{C-c C-x <,org-agenda-set-restriction-lock}アジェンダの対象を現在カーソルが置
かれているサブツリーに固定的に制限します。前置引数をつけたり、ファイルの最初
の見出しよりも前にカーソルが置かれているときには、アジェンダの対象範囲はファ
イル全体になります。この制約は@kbd{C-c C-x
>}を実行して取り除くか、@kbd{<}または@kbd{>}をアジェンダのコマンド選択画面上で入力す
るまでは維持します。もしもウインドウ上にアジェンダビューが表示されているなら
ば、あたらしい制約が即座に効果を及ぼします。@orgcmd{C-c C-x >,org-agenda-remove-restriction-lock}@kbd{C-c C-x <}で
作成された固定する制限を削除します。
@end table

@noindent
@file{speedbar.el}を併用しているときは、Speedbarのフレームの中で以下のコマンドを使
用することができます。
@table @kbd
@orgcmdtkc{< @r{in the speedbar frame},<,org-speedbar-set-agenda-restriction}　Speedbarのフレ
ームの中で、1つのOrg-modeファイルか、そのファイルのサブツリーの一つか、カーソ
ルの置かれているアイテムに対応してアジェンダを恒久的に限定します。もしもアジ
ェンダビューが表示されているウインドウがあるならば、限定箇所が変更されると即
座に反映する。@orgcmdtkc{> @r{in the speedbar frame},>,org-agenda-remove-restriction-lock}　制
限をふたたび解除する。
@end table

@node Agenda dispatcher, Built-in agenda views, Agenda files, Agenda Views
@section アジェンダのコマンド選択画面
@cindex アジェンダのコマンド選択画面
@cindex アジェンダのコマンドを選択する
グローバルなキーと結びついている、コマンド選択画面を通してそのビューは作成さ
れます。---例えば、@kbd{C-c a}
(@pxref{Installation})のように。以下のように、コマンド選択画面にアクセスする方法と
して@kbd{C-c a}を想定しており、キーボードでコマンドにアクセスするためのリストが表
示されています。@kbd{C-c a}を入力した後、コマンドを実行するために、次に入力する文
字を要求します。コマンド選択画面では以下に記載するデフォルトのコマンドが提供
されています。
@table @kbd
@item a
カレンダーのようなアジェンダを作成します。(@pxref{Weekly/daily agenda})
@item t @r{/} T
すべてのTODOアイテムのリストを作成します。 (@pxref{Global TODO list})
@item m @r{/} M
タグの表記にマッチした見出しのリストを作成します。(@pxref{Matching tags and properties})
@item L
カレントバッファ用のタイムラインのビューを作成します。(@pxref{Timeline})
@item s
そのエントリーに存在するしないにかかわらず、and/orという正規表現によるキーワ
ードの論理式で選択したエントリのリストを作成します。
@item /
@vindex org-agenda-text-search-extra-files
すべてのアジェンダファイルと@code{org-agenda-text-search-extra-files}の中でリスト
化かれているファイルの中から正規表現を用いて検索します。これはEmacsの@code{multi-occur}と
いうコマンドを使用します。前置引数をつけると、それぞれのマッチした行の状況の
数をしていすることができます。デフォルトは1となっています。
@item # @r{/} !
詳細が未決定のプロジェクトのリストを作成します。(@pxref{Stuck projects})
@item <
カレントバッファ
@footnote{逆の互換性として、@kbd{1}をカレントバッファを制限するために入力することもできます。}に対してアジェンダコマンドを制限します。@kbd{<}を入
力したあと、コマンドを選択するために文字を入力する必要があります。
@item < <
もしもアクティブなリージョンがあるときは、以下のようなアジェンダコマンドがそ
のリージョンに限定されます。一方、カレントのサブツリー
@footnote{逆の互換性として、カレントリージョンまたはカレントサブツリーに限定するために@kbd{0}を入力することもできます。.}に
限定することもできます。@kbd{< <}を入力したあと、コマンドを選択する文字を入力する
必要があります。
@end table

あなたは、あたかもデフォルトのコマンドのように、コマンド選択画面でアクセスす
るカスタムコマンドを定義することもできます。複数のブロックを同時に含めた拡張
されたアジェンダバッファを作成する可能性を含んでいます。例えば週のアジェンダ
、グローバルなTODOリスト、そして多数の特定タグの検索など。@xref{Custom agenda views}.

@node Built-in agenda views, Presentation and sorting, Agenda dispatcher, Agenda Views
@section agendaに組み込まれているビュー

このセクションではビルトインビューについて説明します。

@menu
* Weekly/daily agenda::      現在のタスクが表示されたカレンダーのページ
* Global TODO list::         全ての未完了アクション項目
* Matching tags and properties::  微調整された検索での構造化された情報
* Timeline::                 単一ファイルでの時間順のビュー
* Search view::              文章の中を検索してエントリーを見つける
* Stuck projects::           レビューが必要なプロジェクトを見つける
@end menu

@node Weekly/daily agenda, Global TODO list, Built-in agenda views, Built-in agenda views
@subsection 1週間／1日のアジェンダ
@cindex アジェンダ
@cindex 1週間のアジェンダ
@cindex 1日のアジェンダ

1週間の／1日の@emph{アジェンダ}の目的は、その週あるいはその日のタスクをすべて表示
して、紙のアジェンダのページのように、実行に移すことです。

@table @kbd
@cindex org-agenda, command
@orgcmd{C-c a a,org-agenda-list}　Org-modeのファイルのリストの中からその週の予定を収
集するものです。予定はそれぞれの日に表示されます。（@kbd{C-u 2 1 C-c a
a}のように)前置引数に数字をつけて
@footnote{逆方向の互換性のために、普遍的な前置引数@kbd{C-u}をつけることでアジェンダ（予定表）より上に、TODOリストを書き出すことができます。この機能は軽視されており、専用のTODOリストやブロックアジェンダ(@pxref{Block agenda}).をその代わりに利用することが多いです。}表
示する日数を設定することができます。
@end table

@vindex org-agenda-span
@vindex org-agenda-ndays
表示されるデフォルトの日数は、@code{org-agenda-span}(あるいは古くさくなってしまい
ましたが@code{org-agenda-ndays})という変数で設定します。この変数は、アジェンダの中
でデフォルトとして確認したい日数、あるいは、期間を示す@code{day}、@code{week}、@code{month}や
@code{year}といった期間を示す名前をつけて設定します。

アジェンダバッファからリモートで編集するとは、例えば、アジェンダバッファの中
でデッドラインやアポイントメントの日付を変更することができるという意味です。
アジェンダバッファの中で利用できるコマンドは、@ref{Agenda commands}の中で一覧表に
しています。

@subsubheading カレンダー／日記の統合
@cindex カレンダーの統合
@cindex 日記の統合

Emacsには、Edward
M.
Reingoldによって開発されたカレンダーと日記の機能があります。カレンダーでは、
国や文化の異なる祝祭日を備えた3ヵ月分のカレンダーが表示されます。日記には記念
日、月の満ち欠け、日の出日の入り、繰り返しの予定（隔週、隔月）などを記録して
おくことができます。このような機能は、Org-modeに対して大変補完的な関係にあり
ます。日記とOrg-modeの出力を結びつけることは大変有益です。

Emacsの日記からOrg-modeのアジェンダに項目を落とし込むために、あなたは次のよう
に変数を設定するだけです。

@lisp
(setq org-agenda-include-diary t)
@end lisp

@noindent After that, everything will happen automatically.  All diary
祝祭日や記念日などを含むすべての項目は、Org-modeで作成されるジェンダバッファ
に取り込むことができます。日記に記録されている項目を編集するために、アジェン
ダバッファ上で@key{SPC}、
@key{TAB}、及び
@key{RET}を入力することで、日記のファイルにジャンプすることができます。その日に新
しいエントリーを挿入する@kbd{i}というコマンドはアジェンダバッファ上で動作します。
あたかも、日の出日の入りの時刻を表示したり、月の満ち欠けの状態を表示したり、
他の暦に変換するための、@kbd{S}、@kbd{M}、および@kbd{C}というコマンドと同様です。
@kbd{c}はカレンダーとアジェンダの間を行ったり来たりすることができます。

もしもあなたが日記をS式項目と祝祭日だけで使用しているのならば、上のような設定
をするよりも、Org-modeファイルに直接コピーしたり移動したりしたほうが手っ取り
早いです。Org-modeは日記形式のS式項目を評価し、しかもより早く、というのは、最
初にカレンダーを表示するという負荷がかからないからです。S式項目は左端から記述
し、式の前にスペースが入ってはいけないことに注意してください。たとえば、ある
Org-modeファイルについての、以下にのべるセグメントが処理され、項目がアジェン
ダの中に作成されます。

@example
* Birthdays and similar stuff
#+CATEGORY: Holiday
%%(org-calendar-holiday)   ; special function for holiday names
#+CATEGORY: Ann
%%(diary-anniversary  5 14 1956)@footnote{Note that the order of the arguments (month, day, year) depends on the setting of @code{calendar-date-style}.} Arthur Dent is %d years old
%%(diary-anniversary 10  2 1869) Mahatma Gandhi would be %d years old
@end example

@subsubheading Anniversaries from BBDB
@cindex BBDB, anniversaries
@cindex anniversaries, from BBDB

もしもBig Brothers
Databaseを使用して連絡先を管理しているのならば、あなたは先に述べたのと同様に
、独立したOrg-modeのファイルや日記のファイルに登録するよりも、BBDBの中に記念
日を登録したいと考えるでしょう。Org-modeはこれもサポートしており、アジェンダ
の一部としてBBDBの記念日を表示することができます。そのために必要なことは、以
下のような記述をアジェンダファイルに行うことです。

@example
* Anniversaries
  :PROPERTIES:
  :CATEGORY: Anniv
  :END:
%%(org-bbdb-anniversaries)
@end example

それからBBDBのデータレコードのための記念日の定義に取り掛かることができます。
基本的には、BBDBのレコードの中にカーソルを置いて、@kbd{C-o anniversary
@key{RET}}を実行し、それから日付を@code{YYYY-MM-DD}または@code{MM-DD}の形式で記入し、半角ス
ペースに続けて記念日の種類(@samp{birthday}、@samp{wedding}、または定型句)のクラスを記入
します。もしもクラスを省略した場合は、デフォルトでは@samp{birthday}であるとみなし
ます。いくつかの例を書いてみました。@file{org-bbdb.el}ファイルの先頭のところにもう
少し詳しい説明が書いてあります。

@example
1973-06-22
06-22
1955-08-02 wedding
2008-04-14 %s released version 6.01 of org-mode, %d years ago
@end example

BBDBを変更したり、Emacsのセッションで最初にアジェンダを表示したとき後は、アジ
ェンダの表示が少し遅くなるかもしれません。というのはOrg-modeが記念日のハッシ
ュデータを更新するからです。しかしながら、そのことについていうと非常に早いと
いえます。実際Org-modeの日記ファイルに@samp{%%(diary-anniversary)}のエントリーを長
々と書き連ねた場合よりもずっと早いと言えるでしょう。

@subsubheading Appointment reminders
@cindex @file{appt.el}
@cindex appointment reminders

Org-modeはEmacsの予定を通知する機能と連携しています。あなたのアジェンダファイ
ルに含まれているすべてのアポイントを追加するために、@code{org-agenda-to-appt}コマ
ンドを使います。このコマンドはあなたの予定のリストにフィルターをかけ、特別な
カテゴリーに属しているものや正規表現の検索に合致したものを追加します。詳細は
ドキュメント文字列を参照してください。

@node Global TODO list, Matching tags and properties, Weekly/daily agenda, Built-in agenda views
@subsection The global TODO list
@cindex global TODO list
@cindex TODO list, global

グローバルなTODOリストには、形式を整えられ、1つの場所に集められたすべての未完
了のTODOアイテムが含まれています。

@table @kbd
@orgcmd{C-c a t,org-todo-list}　グローバルなTODOリストを表示します。これはすべてのア
ジェンダファイル(@pxref{Agenda Views})からTODOアイテムを１つのバッファに集約します
。デフォルトでは、このアイテムのリストはDONEという状態ではないアイテムです。
そのバッファは@code{agenda-mode}となり、そのバッファからTODOアイテムを直接調べたり
操作したりするコマンドが用意されています(@pxref{Agenda commands})。
@cindex TODO keyword matching
@vindex org-todo-keywords
上と似ていますが、指定したTODOキーワードと合致したものを表示します。同じこと
を前置引数をつけて@kbd{C-c a t}を実行することでも指定できます。キーワードの入力を
促す指示が表示され、そして複数のキーワードを論理式ORという意味で@samp{|}で区切って
指定することができます。数字付きの前置引数をつけると@code{org-todo-keywords}の中の
N番目のキーワードを選択することができます。
@kindex r
@kbd{r}キーをアジェンダバッファで使用するとバッファの再構成が行われます。たとえば
@kbd{3 r}というように、前置引数をつけてこのコマンドを実行すると選択したTODOキーワ
ードが変更することができます。もしも特定のキーワードを使って検索することが多
い場合は、カスタムコマンドを定義することもできます(@pxref{Agenda dispatcher})。
@*特定のTODOキーワードと合致するものを検索するのは、タグ検索の１機能として行うこともできます(@pxref{Tag searches})。
@end table

リモートでTODOアイテムを編集するということの意味は、1つのキーを入力することで
TODOエントリーの状態を変更できるということです。TODOリストの中で利用できるコ
マンドは@ref{Agenda commands}の記述を参考にしてください。

@cindex sublevels, inclusion into TODO list
通常グローバルなTODOリストには、TODOキーワードのついたすべて見出しが表示され
ます。このリストは大変長いものになる場合もあります。それをコンパクトにするに
は２つの方法があります。
@itemize @minus
@item
@vindex org-agenda-todo-ignore-scheduled
@vindex org-agenda-todo-ignore-deadlines
@vindex org-agenda-todo-ignore-timestamp
@vindex org-agenda-todo-ignore-with-date
TODOアイテムが、実行するために@emph{scheduled}となっている、あるいは、もはや@emph{open}と
なっている@emph{deadline}(@pxref{Timestamps})を持っているかどうかを確認したい人もいるで
しょう。@code{org-agenda-todo-ignore-scheduled}、@code{org-agenda-todo-ignore-deadlines}、
@code{org-agenda-todo-ignore-timestamp}
および／または@code{org-agenda-todo-ignore-with-date}という変数を設定し、グローバ
ルなTODOリストから取り除くことができます。
@item
@vindex org-agenda-todo-list-sublevels
TODOアイテムがサブタスクにブレイクダウンされた下位のレベルを持っているかもし
れません。そういった場合は、最上位のTODOの見出しを表示すれば十分で、グローバ
ルなリストからは下位のレベルの項目は省略してもよい場合があります。そういった
ときは@code{org-agenda-todo-list-sublevels}変数を設定することで可能となります
@end itemize

@node Matching tags and properties, Timeline, Global TODO list, Built-in agenda views
@subsection Matching tags and properties
@cindex matching, of tags
@cindex matching, of properties
@cindex tags view
@cindex match view

アジェンダファイルの中の見出しに@emph{tags}(@pxref{Tags})がついていたり、あるいは属性(@pxref{Properties and
Columns})がついていたときは、このメタデータに基づいて見出しを選択し、アジェン
ダバッファに収集することができます。この項で述べている検索構文は@kbd{C-c / m}を用
いたツリーの抽出を行うときも適用できます。

@table @kbd
@orgcmd{C-c a m,org-tags-view}　一組のタグのセットに合致したすべての見出しのリストを
作成します。選択の基準の入力を指示するコマンドでタグのついた論理式による表現
で記入します。例えば、@samp{+work+urgent-withboss}あるいは@samp{work|home}
というように(@pxref{Tags})。もしも特定の検索をよく行うならばそのためのカスタムコマ
ンドを定義することができます(@pxref{Agenda dispatcher})。@orgcmd{C-c a M,org-tags-view}
@vindex org-tags-match-list-sublevels
@vindex org-agenda-tags-todo-honor-ignore-options
@kbd{C-c a m}と似ていますが、not-DONEの状態にあるTODOアイテムの見出しから選択する
もので、自動的にサブアイテムもチェックします(@code{org-tags-match-list-sublevels}変
数参照)。予定／期限のついたアイテムを除外するには@code{org-agenda-tags-todo-honor-ignore-options}の
変数を参照してください。特定のTODOキーワードをタグの一致と一緒に指定すること
も可能です。@ref{Tag searches}を参照してください。
@end table

タグのリストで利用できるコマンドは@ref{Agenda commands}のところで説明しています。

@subsubheading Match syntax

@cindex Boolean logic, for tag/property searches
検索文字列ではANDの意味で@samp{&}、ORの意味で@samp{|}という論理式を使うことができます。
@samp{&}は@samp{|}よりも強く結びつけます。括弧（
）は現在準備されていません。検索のどの要素も、タグそのものか、正規表現でマッ
チしたタグか、あるいは@code{PROPERTY OPERATOR VALUE}のような属性値にアクセスして比
較操作のできる値のいずれかになります。どの要素も@samp{-}を先頭につけてそれ以外のも
のを表現するか、@samp{+}を先頭につけてポジティブな選択を行う、というような糖衣構文
（簡便な構文）で表現します。@samp{&}でANDを取り扱うことは@samp{+}、@samp{-}で表現できるもの
のオプションです。下にタグだけをつかったいくつかの例を挙げておきました。

@table @samp
@item +work-boss
@samp{:work:}というタグがついているが、@samp{:boss:}というタグがついていない見出しを選
択します。
@item work|laptop
@samp{:work:}または@samp{:laptop:}というタグがついたものを選択します。
@item work|laptop+night
前の文と同じですが、@samp{:laptop:}の行には、同時に@samp{:night:}というタグが付いている
必要があります。
@end table

@cindex regular expressions, with tags search
タグの代わりに、大括弧でくくられた正規表現により指定をすることもできます。例
えば、
@samp{work+@{^boss.*@}}と指定すると、@samp{:work:}というタグのついた見出しで@samp{boss}という単語で@i{starting}するタグがついているものに一致します。

@cindex TODO keyword matching, with tags search
@cindex level, require for tags/property match
@cindex category, require for tags/property match
@vindex org-odd-levels-only
タグとマッチするものを探すと同時に属性(@pxref{Properties and Columns})の検索をする
ことも可能です。属性としては実際の属性のほかに、他のメタデータで表現された特
別な属性(@pxref{Special properties})にも対応しています。例えば、そのエントリーの中
のTODOキーワードで表現された@code{TODO}という「属性」。あるいは、そのエントリーの
階層を示す@code{LEVEL}という「属性」などです。そのため、@samp{+LEVEL=3+boss-TODO="DONE"}と
いう検索式は、第3階層のすべての見出しの中で、@samp{boss}というタグがついており、TODOキ
ーワードがDONEでは@samp{ない}もののリストを表示します。@code{org-odd-levels-only}という
設定がなされているバッファでは@samp{LEVEL}は＊の数を数えるのではなく、@samp{LEVEL=2}（
2番目）
の階層は＊が３つある階層が該当します。

いくつかの例を紹介します。
@table @samp
@item work+TODO="WAITING"
@samp{:work:}というタグがあるTODO行のうち、特にTODOキーワードが@samp{WAITING}となってい
る行を選択します。
@item work+TODO="WAITING"|home+TODO="WAITING"
workとhomeというタグがついているWaitingとなっているタスク
@end table

属性の検索では、多数の異なる操作で属性の値をテストすることができます。複雑な
例を挙げます。

@example
+work-boss+PRIORITY="A"+Coffee="unlimited"+Effort<2         \
         +With=@{Sarah\|Denny@}+SCHEDULED>="<2008-10-11>"
@end example

@noindent
比較のタイプは比較の値がどのように書かれているかによります。
@itemize @minus
@item
比較する値が普通の数字ならば、数値の比較が行われ、@samp{<}、@samp{=}、@samp{>}、@samp{<=}、@samp{>=}、
および@samp{<>}という操作が可能です。
@item
比較する対象がダブルクォーテーションで囲まれている場合は、文字列の比較が行わ
れ、前項と同じ操作が可能です。
@item
もしも比較対象が、(@samp{DEADLINE<="<2008-12-24 18:30>"}のように)、ダブルクォーテ
ーション@emph{および}角括弧<>で囲まれていた場合は、両方の値がOrg-mode流の標準的な
日付・時刻の指定であると仮定し、それにそって比較を行います。いくつかの特別な
値があります。@code{"<now>"}は（時刻も含めた）現在を示し、@code{"<today>"}、@code{"<tomorrow>"}は
それらの日の0:00つまり、
@:時刻の指定がないことを表します。同様に、@code{"<+5d>"}または@code{"<-2m>"}というような文字列は、それぞれ日、週、月、年を示す、@code{d}、@code{w}、@code{m}、@code{y}という単位がついているものとして使用されます。
@item
もしも比較対象が中括弧｛｝でくくられていて、正規表現での比較がなされるときは
、@samp{=}は一致していることを示し、@samp{<>}は一致していないことを示します。
@end itemize

そのため、例に掲げた検索文字列の意味は、@samp{:work:}というタグがつけられているが
、@samp{:boss:}というタグはついておらず、また、優先順位の値が@samp{A}であり、@samp{:Coffee:}が
@samp{unlimited}という値であり、@samp{Effort}
属性が数値で２より小さく、@samp{:With:}の値が@samp{Sarah\|Denny}であり、スケジュールが
2008年10月11日もしくはそれ以降に予約されたものを示しています。

TODO、LEVEL、CATEGORYを検索するときは短時間ですみます。それ以外の属性を検索す
るときはいささか時間がかかります。しかしながら、一度高い代償を払って1つのプロ
パティを検索したら、他の属性を追加して再び検索するときは安くあがります。

検索の際にOrg-modeで属性の継承という機能を使用するように設定することができま
すが、相当検索スピードが落ちることを覚悟してください。詳細は@ref{Property inheritance}参
照。

逆互換として、さらにまたタイプのスピードを上げるために、検索においてTODOの状
態をテストする別の方法があります。このためには、検索文字列（それは@samp{|}で結合さ
れた複数の用語が含まれていると思いますが）のタグ・属性検索の部分を@samp{/}を使って
終了させ、TODOキーワードを論理式で結んで指定します。その構文はタグの検索で使
用したのと似ていますが、よく考えて適用する必要があります。例えば、複数のTODOキ
ーワードが存在することを検索するには論理式のANDで結びつけても意味がありません
。しかしながら、@emph{negative selection}（存在しないことを選択する場合）では「AND」
で結合することは意味を持ちます。これを確かめるには、実際にいくつかのTODOキー
ワードで、@kbd{C-c a
M}を用いて確認するだけです（そのほうがスピードアップできます）。あるいはスラ
ッシュのあとに@samp{!}を記入して同時にTODOの部分を開始します。@kbd{C-c a M}または@samp{/!}を
使用したときは、DONEの状態にあるTODOキーワードを検索することはできません。例
えば、

@table @samp
@item work/WAITING
@samp{work+TODO="WAITING"}と同じ
@item work/!-WAITING-NEXT
@samp{:work:}を選択。ただしTODO行では@samp{WAITING}と@samp{NEXT}のどちらのタグもついていない
もの
@item work/!+WAITING|+NEXT
@samp{:work:}を選択。TODO行に@samp{WAITING}か@samp{NEXT}かどちらかのタグがついているもの。
@end table

@node Timeline, Search view, Matching tags and properties, Built-in agenda views
@subsection Timeline for a single file
@cindex timeline, single file
@cindex 時間順に並べたビュー

タイムラインはひとつのOrg-modeファイルの中から@emph{time-sorted view}（時間順のビ
ュー）ですべてのタイムスタンプのついたアイテムをまとめてて表示します。このコ
マンドの主な目的は、あるプロジェクトに含まれているイベント全体の概要をつかむ
ためにあります。

@table @kbd
@orgcmd{C-c a L,org-timeline}すべてのタイムスタンプの付いたアイテムについて、Org-modeフ
ァイルの中で時間順のビューを提供します。@kbd{C-u}という前置引数をつけて呼び出した
ときは、現在の日付の時点で、すべての未完了のTODOエントリー（予約されているも
のも、そうでないものも）を一覧にします。
@end table

@noindent
タイムラインのバッファで利用できるコマンドは、@ref{Agenda commands}にリスト化され
ています。

@node Search view, Stuck projects, Timeline, Built-in agenda views
@subsection Search view
@cindex 検索ビュー
@cindex text search
@cindex searching, for text

アジェンダのビューではOrg-modeのエントリーに対する一般的なテキスト検索機能を
持っています。これはノートを探すのに特に役に立ちます。

@table @kbd
@orgcmd{C-c a s,org-search-view}　このコマンドは特別な検索のためのもので、論理式を使
って、文字列または特定の単語に合致するエントリーを選択します。
@end table
例えば、@samp{computer equipment}という検索文字列は、@samp{computer equipment}という1つ
の文字列が含まれているエントリーを検索するでしょう。もしも、２つの単語が、1つ
以上のスペースまたは改行で分かれていても、依然として一致するものを検索するで
しょう。検索ビューでは、エントリーの中にある特別なキーワードについて論理式を
使って検索することもできます。@samp{+computer +wifi -ethernet
-@{8\.11[bg]@}}という検索文字列では、次のようなノートエントリーを検索します。
@code{computer}と@code{wifi}というキーワードを含んでおり、@code{ethernet}というキーワードは
含まれておらず、@code{8\.11[bg]}という正規表現を含んでいない、すなわち8.11bおよび
8.11gともに含まれていないという意味ですが、エントリーを検索します。最初の@samp{+}は
単語検索を開始するために必要ですが、ほかの@samp{+}はオプションです。詳しく知りたい
場合は、@code{org-search-view}というコマンドのドキュメント文字列を参照してください
。

@vindex org-agenda-text-search-extra-files
アジェンダファイルに加えて、このコマンドは@code{org-agenda-text-search-extra-files}の
中で一覧になっているファイルもまた検索するということに注意してください。

@node Stuck projects, , Search view, Built-in agenda views
@subsection Stuck projects
@pindex GTD, Getting Things Done

もしもあなたが、以下に述べるようなDavid
Allen氏のGTDのようなシステムであなたの仕事を管理しているならば、あなたが抱え
ている「義務」のひとつは、すべてのプロジェクトが進んでいるかを明確にするため
に、レビューを定期的に行うことです。@emph{詳細が未決定}のプロジェクトは、次の行動
が何も定義がされていないため、Org-modeが提示するTODOリストに、全く何も表示さ
れることがないのです。レビューをする際に、そういったプロジェクトを明確にし、
それらのプロジェクトための次の行動を定義することが必要です。

@table @kbd
@orgcmd{C-c a #,org-agenda-list-stuck-projects}　詳細が未決定のプロジェクトリスト
@kindex C-c a !
@item C-c a !
@vindex org-stuck-projects
@code{org-stuck-projects}の変数をカスタマイズすることで何が詳細が未決定のプロジェクトで、どうやったらそういうプロジェクトを発見できるかを定義することができます。
@end table

あなたは九分九厘このコマンドが機能するために、このビューを定義する必要があり
ます。あらかじめビルトインされているデフォルトの設定では、すべてのあなたのプ
ロジェクトは第2階層の見出しに記述されており、あるプロジェクトが未決定であると
はいえない状況とは、すくなくとも1つのエントリーにTODOまたはNEXTまたはNEXTACTIONと
いう印がつけられている場合です。

Org-modeを使う際に、あなた自身の方法でアプローチするとして、PROJECTというタグ
があるものをプロジェクトと定義し、プロジェクトがまだ検討する段階にないという
ことを示すためにTODOキーワードでMAYBEと書いているものと仮定しましょう。さらに
TODOキーワードでDONEという印の付いたものは完了したプロジェクトであると仮定し
ましょう。そしてまたNEXTもしくはTODOと書かれたものはNextActionであると仮定し
ましょう。@@SHOPというタグがついたときはNEXTというタグが付いていなくても、ショッピングに行くという次の行動を示しているとします。最終的に、もしもプロジェクトにIGNORE（無視）という特別なキーワードがどこかについていたら、それはリストに表示されないものとします。このようなケースの場合、タグ・TODO@footnote{@xref{Tag searches}.}が@samp{+PROJECT/-MAYBE-DONE}とマッチし、さらにサブツリーにTODO、NEXT、@@SHOP、およびIGNOREというタグが付いているようなプロジェクトは、詳細が未決定のプロジェクトではないといえます。このようなカスタマイズを正しく定義するには、

@lisp
(setq org-stuck-projects
      '("+PROJECT/-MAYBE-DONE" ("NEXT" "TODO") ("@@SHOP")
                               "\\<IGNORE\\>"))
@end lisp

もしもあるプロジェクトが詳細が未決定のプロジェクトではないと定義されたならば
、そのエントリーのサブツリーは依然として詳細が未決定のプロジェクトとして検索
されるということに注意してください。

@node Presentation and sorting, Agenda commands, Built-in agenda views, Agenda Views
@section Presentation and sorting
@cindex presentation, of agenda items

@vindex org-agenda-prefix-format
@vindex org-agenda-tags-column
アジェンダビューにアイテムが表示される前に、Org-modeではそのアイテムを表示し
並び替える準備を行っています。それぞれのアイテムは1行を占めます。その行にはそ
の項目の@emph{category}
(@pxref{Categories})を含んだ@emph{prefix}とそれ以外の重要な情報を含んでいます。あなたは
@code{org-agenda-tags-column}を使って表示されるコラムタグをカスタマイズすることが
できます。@code{org-agenda-prefix-format}のオプションを使用して前置引数をカスタマ
イズすることができます。この前置引数は、そのアイテムに関連するアウトラインの
見出しの最新のバージョンに従います。

@menu
* Categories::               全てのタスクが同じであるとは限らない
* Time-of-day specifications::  agendaはどうやって時間を知るか
* agendaの項目をソートする::  物事の順番
@end menu

@node Categories, Time-of-day specifications, Presentation and sorting, Presentation and sorting
@subsection Categories

@cindex category
@cindex #+CATEGORY
カテゴリーとは、それぞれのアジェンダアイテムに割り当てられた幅の広いラベルで
す。デフォルトでは、カテゴリーはファイルの名前から単純に作成されます。しかし
、バッファ上で特別な行を足すことでそれを指定することができます。
@footnote{逆に言うと、以下のような動作も生じます。もしも1つのファイルの中に、いくつかののそういう行が存在するならば、それよりも下の行にあるテキストに、そのカテゴリーをそれぞれ指定することになります。最初のカテゴリーは、その最初のCATEGORYの行はよりも前にあるどのテキストにも適用されます。しかしながら、@emph{strongly}という手法を使うことは、文書のアウトライン構造と非互換であることを、
@emph{強く}非難することになります。複数のカテゴリーをバッファの中で設定する正しい方法は属性を使用することです。.}

@example
#+CATEGORY: Thesis
@end example

@noindent
@cindex プロパティ（CATEGORY）
もしもあなたが、1つのエントリーもしくは1つの（サブ）ツリーに特別なCATEGORYを
持たせたいと望むのならば、そのエントリーに、値として適用したいと思っている特
別なカテゴリーを@code{:CATEGORY:}という属性に設定しなさい。

@noindent
アジェンダバッファの表示は、そのカテゴリーが10文字以上長くしない方が見栄えが
良いです。

@noindent
あなたは@code{org-agenda-category-icon-alist}変数をカスタマイズすることで、カテゴ
リーにアイコンを設定することができます。

@node Time-of-day specifications, agendaの項目をソートする, Categories, Presentation and sorting
@subsection Time-of-day specifications
@cindex time-of-day specification

@c
Org-modeは時刻の仕様に基づいて、それぞれのアジェンダアイテムをチェックします
。時刻は、例えば、@w{@samp{<2005-05-10 Tue 19:00>}}のように、アジェンダの中に含まれている
ものをトリガーとしたタイムスタンプの一部です。時間の幅は２つのタイムスタンプ
で指定され、例えば@w{@samp{<2005-05-10 Tue 20:30>--<2005-05-10 Tue 22:15>}}のように記載さ
れます。

そのエントリー自身の見出しの中で、時刻（時間）はプレーンなテキストとして（@samp{12:45}や
@samp{8:30-1pm})のように表示されます。もしもアジェンダがEmacsのダイアリー(@pxref{Weekly/daily agenda})と
一体化されていたときは、ダイアリーのエントリーの中で指定した時間は、同様に認
識されます。

アジェンダの表示のために、Org-modeは時間を引き出し、前置引数の一部として標準
的な24時間のフォーマットでそれを表示します。前の段落に書かれた時間の例は、ア
ジェンダの中で結局以下のように表示されます。

@example
    8:30-13:00 Arthur Dent lies in front of the bulldozer
   12:45...... Ford Prefect arrives and takes Arthur to the pub
   19:00...... The Vogon reads his poem
   20:30-22:15 Marvin escorts the Hitchhikers to the bridge
@end example

@cindex time grid
もしもアジェンダが一日モードであるならば、あるいは今日を表示しているならば、
時間設定されたエントリーは、次のような時間のグリッドに埋め込まれます。

@example
    8:00...... ------------------
    8:30-13:00 Arthur Dent lies in front of the bulldozer
   10:00...... ------------------
   12:00...... ------------------
   12:45...... Ford Prefect arrives and takes Arthur to the pub
   14:00...... ------------------
   16:00...... ------------------
   18:00...... ------------------
   19:00...... The Vogon reads his poem
   20:00...... ------------------
   20:30-22:15 Marvin escorts the Hitchhikers to the bridge
@end example

@vindex org-agenda-use-time-grid
@vindex org-agenda-time-grid
時間のグリッドは、@code{org-agenda-use-time-grid}変数で表示したりしなかったさせる
ことができます。そしてまた@code{org-agenda-time-grid}で設定をすることができます。

@node agendaの項目をソートする, , Time-of-day specifications, Presentation and sorting
@subsection agendaの項目をソートする
@cindex sorting, of agenda items
@cindex priorities, of agenda items
ビューに書き出される前に、各アイテムは並び替えが行われます。この並び替えはビ
ューのタイプによって決まります。
@itemize @bullet
@item
@vindex org-agenda-files
一日／一週間のアジェンダでは、それぞれの日の各アイテムは順番に並びます。デフ
ォルトの順番は、明示的に日付と時刻の指定を含んでいるアイテムを、最初に集めま
す。これらのアイテムは、その日の@emph{スケジュール}に応じて、リストの最初から順番
に表示されます。その次に、各アイテムは
@code{org-agenda-files}によって決められた順番に、カテゴリーごとにグループ分けされます。それぞれのカテゴリーの中で、各アイテムは優先順位(@pxref{Priorities})に従って並び替えられます。優先順位は基本的な優先順位で構成されます（優先順位@samp{A}ならば2000、@samp{B}ならば1000、@samp{C}ならば0として）。さらに、予定あるいはデッドラインを過ぎているアイテムのウエイトが追加されます。
@item
TODOリストでは、各アイテムはカテゴリーの順番に並び替えられますが、各カテゴリ
ーの中では、優先順位(@pxref{Priorities})によって並び替えられます。優先順位は、優先
順位の記号に従って並べ替えられます。さらに、アイテムが実行する日あるいは予約
した日にどれだけ近いかということも考慮されます。
@item
タグでの一致については、項目は並び替えは行われず、アジェンダファイルの中で一
致した項目が発見された順番に従って表示されるのみです。
@end itemize

@vindex org-agenda-sorting-strategy
並び替えは、@code{org-agenda-sorting-strategy}変数でカスタマイズすることができます
。そして、並び替えはそのエントリーの工数の見積りに基づく評価も含まれます。

@node Agenda commands, Custom agenda views, Presentation and sorting, Agenda Views
@section Commands in the agenda buffer
@cindex commands, in agenda buffer

アジェンダバッファでのエントリーは、その項目が作成されたOrg-modeファイルと日
記ファイルの間でリンクされます。アジェンダバッファでは編集することはできませ
んが、コマンドを使って、そのエントリーがある場所を表示したり、ジャンプして、
アジェンダバッファから「遠隔的に」Org-modeファイルを編集することができます。
この方法で、すべての情報は１度書き込めばよく、あなたがアジェンダとノートのフ
ァイルが別の情報になるというリスクを避けることができます。

いくつかのコマンドはアジェンダの行上でマウスをクリックすることで実行されます
。それ以外のコマンドは、必要とされる行の中にカーソルが置かれている必要があり
ます。

@table @kbd
@tsubheading{Motion}
@cindex motion commands in agenda
@c
@c
@c
@c
@orgcmd{n,org-agenda-next-line}　次の行へ(@key{up}及び@kbd{C-p}と同じ)。@orgcmd{p,org-agenda-previous-line}　
次の行へ(@key{down}及び@kbd{C-n}と同じ)。@tsubheading{View/Go to Org
file}　@orgcmdkkc{@key{SPC},mouse-3,org-agenda-show-and-scroll-up}　そのアイテムのオリジナルの場
所を別のウインドウで表示する。前置引数を使うことで、見出しだけでなく、アウト
ライン上にエントリー全体を明確に表示する。@orgcmd{L,org-agenda-recenter}　オリジナル
の場所を表示し、ウインドウのセンターに再配置する。@orgcmdkkc{@key{TAB},mouse-2,org-agenda-goto}　
別のウインドウでそのアイテムのオリジナルの場所に移動する。@orgcmd{@key{RET},org-agenda-switch-to}　
そのアイテムのオリジナルの場所に移動し、他のウインドウは削除する。@orgcmd{F,org-agenda-follow-mode}
@vindex org-agenda-start-with-follow-mode
@c
Followモードをトグルする。Followモードではアジェンダバッファ上でカーソルを動
かすと、Org-modeファイルの中で、別のウインドウ上で対応する場所を表示する。新
しいアジェンダバッファの中でこのモードの初期設定値は、@code{org-agenda-start-with-follow-mode}変
数で設定することができる。@orgcmd{C-c C-x
b,org-agenda-tree-to-indirect-buffer}　間接的なバッファの中で可憐とアイテムの
サブツリー全体を表示する。数値付きの前置引数Nをつけると、第N階層まで階層を上
がり、そのツリーを取得する。もしもNがマイナスならば、多くの階層まで上がる。@kbd{C-u}と
いう前置引数を付けた場合は、既に使われた間接的バッファは消去されない。

@orgcmd{C-c C-o,org-agenda-open-link}　エントリーの中にあるリンクをフォローする。こ
の機能は、参照されているOrg-modeのノードに属しているテキストの中に含まれてい
るいくつかのリンクの中から選択するという機能を提供する。もしもリンクが1つしか
ない場合は、選択画面を表示せずに、そこにリンクを貼る。

@tsubheading{Change display}
@cindex display changing, in agenda
@kindex o
@item o
@c
他のウインドウを削除します。@orgcmdkskc{v d,d,org-aganda-day-view} @xorgcmdkskc{v w,w,org-aganda-day-view} @xorgcmd{v m,org-agenda-month-view} @xorgcmd{v y,org-agenda-month-year} @xorgcmd{v SPC,org-agenda-reset-view}
@vindex org-agenda-span
@c
@c
@c
@c
@c
@c
@c
日／週／月／年のビューを切り替えます。日または週にビューを切り替えたときは、
この設定は、それに続くアジェンダの更新ついてのデフォルトの設定となります。月
および年のビューは、作成するために時間を要するので、デフォルトとはしていませ
ん。数字の付いた前置引数をつけると、その年、ISOの週、月、年の指定した日に直接
ジャンプします。例えば@kbd{32 d}と書いたときは2月1日、@kbd{9 w}と書いたらISOの週番号
が9を指します。日、週あるいは月のビューを設定したときは、1年は同様に前置引数
の中でコード化されます。例えば、@kbd{200712 w}と書いたときは2007年の第12週にジャ
ンプするでしょう。もしもそのような年の指定を、1桁もしくは2桁の数字で行いたい
たときは、1938年から2037年の間に位置づけられます。@kbd{v @key{SPC}}によって、@code{org-agenda-span}で
の設定をリセットすることができます。@orgcmd{f,org-agenda-later}　時間を前の日付の表
示へと遡ります。@orgcmd{.,org-agenda-goto-today}　今日へ移動します。@orgcmd{j,org-agenda-goto-date}　
日付の選択画面でその日に移動します。@orgcmd{J,org-agenda-clock-goto}　@i{アジェンダ
バッファの中}で現在時間を計測中のタスクに移動します。@orgcmd{D,org-agenda-toggle-diary}　
日記のエントリーに含めるかどうかトグルします。参照@ref{Weekly/daily agenda}.@orgcmdkskc{v l,l,org-agenda-log-mode}
@kindex v L
@vindex org-log-done
@vindex org-agenda-log-mode-items
@c
@c
@c
Logbook modeにするかどうかをトグルします。Logbook modeの中では、ログの取得中
に(変数
@code{org-log-done})DONEと印が付けられたエントリーが、その日の時刻を持っているエントリーとして、アジェンダの中に表示されます。@code{org-agenda-log-mode-items}変数を用いてlogモードに含まれるエントリーのタイプを設定することができます。@kbd{C-u}という前置引数をつけて呼び出すと、状態の変化を含め、すべてのおこりうるlogbookのエントリーを表示できるでしょう。@kbd{C-u C-u}という2つの前置引数をつけて呼び出すと、ログの情報のみが表示され、それ以外は表示されません。@kbd{v L}は、@kbd{C-u v l}と等価です。@orgcmdkskc{v [,[,org-agenda-manipulate-query-add}　現在のビューに、不活性のタイムスタンプを含めます。週／日のアジェンダとタイムラインビューのみです。@orgcmd{v a,org-agenda-archives-mode} @xorgcmd{v A,org-agenda-archives-mode 'files}　Archivesモードをトグルします。Archivesモードでは、@code{ARCHIVED}と印されたツリーもまたアジェンダを作成するときにスキャンされます。大文字の@kbd{A}を使用したときは、全てのアーカイブファイルを含みます。archives
modeから出るためには、再度@kbd{v a}を押してください。@orgcmdkskc{v R,R,org-agenda-clockreport-mode}
@vindex org-agenda-start-with-clockreport-mode
@c
Clockreportモードをトグルします。Clockreportモードでは、日／週のアジェンダは
、時間軸のための時刻のついた表を表示し、カレントのアジェンダビューでカバーさ
れる範囲をファイルします。新しいアジェンダバッファの中で、このモードの初期設
定は、@code{org-agenda-start-with-clockreport-mode}変数で設定することができます。
このモードをトグル(すなわち@:
@kbd{C-u R})している時に、前置引数を使用することで、アジェンダフィルター
@footnote{ここではタグフィルターだけが有効です。工数のフィルターは無視されます。}によって
隠されているエントリーからの情報を表示しないでしょう。@orgcmdkskc{v E,E,org-agenda-entry-text-mode}
@vindex org-agenda-start-with-entry-text-mode
@vindex org-agenda-entry-text-maxlines
@c
entry text modeをトグルします。entry text
modeでは、アジェンダ行によって参照されているOrg-modeのアウトラインのノードか
ら、多数の行が、その行の下に表示されるでしょう。最大の行数は、@code{org-agenda-entry-text-maxlines}変
数で指定します。数値付きの前置引数を付けて、このコマンドを呼び出すと、前置引
数の値の数によって、即座に修正されます。@orgcmd{G,org-agenda-toggle-time-grid}
@vindex org-agenda-use-time-grid
@vindex org-agenda-time-grid
@c
@c
@c
時間のグリッドの表示をトグルします。@code{org-agenda-use-time-grid}と@code{org-agenda-time-grid}変
数を参照してください。@orgcmd{r,org-agenda-rodo}　アジェンダバッファを再構築する。例
えば、@kbd{S-@key{left}}と@kbd{S-@key{right}}を使って、アイテムのタイムスタンプを改修したあと、その変更を反
映するために。そのバッファがグローバルなTODOリストの場合は、指定したTODOキー
ワードを選択できるリストを作成するために、前置引数を解釈します。@orgcmd{g,org-agenda-rodo}　
カレントのEmacsのセッションにおいて、すべてのOrg-modeのバッファを保存します。
あわせてIDの場所も。@orgcmd{C-c C-x C-c,org-agenda-columns}
@vindex org-columns-default-format
アジェンダバッファの中でカラムビュー(@pxref{Column view})を作成します。カラムビュー
のフォーマットは、その時点のエントリーから作成され、あるいは(もしも、その時点
でエントリーが存在しないなら)、アジェンダビューの最初のエントリーから作成され
ます。そのエントリーのためのフォーマットが何であれ、(プロパティーから、@code{#+COLUMNS}と
いう行から、あるいは@code{org-columns-default-format}変数のデフォルトから作成され
た)オリジナルのバッファに存在しているエントリーのフォーマットがアジェンダで使
用されます。

@orgcmd{C-c C-x >,org-agenda-remove-restriction-lock}　もしもファイルまたはサブツリ
ーをその時点で制限しているならば、アジェンダをロックする制限を取り除きます。
(@pxref{Agenda files}).

@tsubheading{Secondary filtering and query editing}
@cindex filtering, by tag and effort, in agenda
@cindex tag filtering, in agenda
@cindex effort filtering, in agenda
@cindex query editing, in agenda

@orgcmd{/,org-agenda-filter-by-tag}
@vindex org-agenda-filter-preset
タグおよび（または）工数の見積りに対して、カレントのアジェンダビューにフィル
ターをかけます。これとカスタムなアジェンダコマンドとの間の差異は、このフィル
ターが非常に早いということです。このため、あなたは、アジェンダ（注１）を再表
示することなく、異なるフィルターの間を素早く切り替えることができます。
@footnote{カスタムコマンドによって、オプションとして@code{org-agenda-filter-preset}変数と結びつけることで、フィルターを事前にセットすることができます。このフィルターは、ビューに適用されます。そして、リフレッシュや２番目のフィルターを通して、基本的なフィルターとして存続します。このフィルターは、アジェンダのブロックの中で、アジェンダビュー全体のグローバルなプロパティです。この設定を行うためには、個別のブロックのセクションではなく、グローバルオプションのセクションで行います。}

タグ選択の文字を入力しましょう。@key{SPC}はタグの全てを意味しています。入力部分で
@key{TAB}を押すと、選択するタグの補完機能を使用できます(すべてのタグに選択用の文
字が指定されているとはかぎりません)。そして、そのコマンドは、このタグを含んで
いないか継承していないエントリーを全て隠します。前置引数をつけて呼び出した場
合は、そのタグを持っているエントリーを削除さえしてしまいます。入力部で2番目の
@kbd{/}はフィルターを終了し、隠されているエントリーを再度出現させます。もしも最初
に入力したキーが、@kbd{+}または@kbd{-}ならば、前のフィルターは、選択された新たなタグ
の要求あるいは禁止に応じて、幅を狭くします。@kbd{/}の後に、@kbd{+}あるいは@kbd{-}を入力す
る代わりに、@kbd{\}
コマンドを即座に使用することもできます。

@vindex org-sort-agenda-noeffort-is-high
工数見積のフィルターをかけるために、予め認められている汎用的な工数を設定すべ
きです。例えば
@lisp
(setq org-global-properties
    '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))
@end lisp
あなたは、@kbd{<}、@kbd{>}および@kbd{=}のひとつの操作を最初に入力することで、工数のための
フィルターをかけることができます。それから、あらかじめ認められた値のリストの
中で、工数見積りのインデックスの数字を入力します。そこでは@kbd{0}は１０番目の値を
意味します。フィルターは選択された値よりも、以下、イコール、以上であるかによ
って限定されます。もしも0-9のキーがタグへのアクセスキーとして使用されていない
ならば、単純にあなたは操作コマンドを利用することなく、直接インデックスとなる
数字を入力するだけです。この場合@kbd{<}が仮定されます。操作のアプリケーションのた
めに、定義された工数がないエントリーでは、@code{org-sort-agenda-noeffort-is-high}変
数の値に従って取り扱われます。工数の定義のないタスクにフィルターをかけるには
、@kbd{?}を操作の値として入力します。

Org-modeはまた、コンテクストに対応したタグのフィルターを自動的にサポートして
います。もしも、@code{org-agenda-auto-exclude-function}変数の値が、ユーザが定義し
た機能に設定されているときは、その機能によって、どのようなタグがアジェンダか
ら自動的に排除されるかを決定します。一度この機能が設定されると、それによって
、@kbd{/}コマンドは、@kbd{RET}
をサブのオプションキーとして受け付け、自動的に排除ロジックを走らせます。例え
ば、いってみれば、ネットワークへのアクセスを必要とするタスクを定義するために
@code{Net}というタグ、街での用事のために@code{Errand}というタグ、電話を掛けなければなら
ないときに@code{Call}というタグを使用しているとします。あなたは、インターネットを
利用できるかどうか、仕事時間外にあるかどうか、このような状況に基づいて、これ
らのタグを自動的に排除することができるのです。

@lisp
@group
(defun org-my-auto-exclude-function (tag)
  (and (cond
        ((string= tag "Net")
         (/= 0 (call-process "/sbin/ping" nil nil nil
                             "-c1" "-q" "-t1" "mail.gnu.org")))
        ((or (string= tag "Errand") (string= tag "Call"))
         (let ((hour (nth 2 (decode-time))))
           (or (< hour 8) (> hour 21)))))
       (concat "-" tag)))

(setq org-agenda-auto-exclude-function 'org-my-auto-exclude-function)
@end group
@end lisp

@orgcmd{\\,org-agenda-filter-by-tag-refine}追加の条件によってカレントのアジェンダフィ
ルターをナローイングします。前置引数を用いてコマンドを呼び出したときは、まさ
にタグがついているエントリー、あるいは工数の基準にまさに合致するエントリーを
削除する。@kbd{/}コマンドのあとの最初のキーとして、@kbd{+}あるいは@kbd{-}を押すことで同様
の効果を達成することができる。

@c
@kindex [
@kindex ]
@kindex @{
@kindex @}
@item [ ] @{ @}
@table @i
@item @r{in} search view
新しい検索の単語(@kbd{[}と@kbd{]})、あるいは新しい正規表現(
@kbd{@{}と@kbd{@}})をクエリー文字列に追加する。開いた角括弧／大括弧は、@samp{+}という接頭辞のついたポジティブな検索用語を追加する。この検索用語は、@i{必
ず}そのエントリーに発生／合致しなければならないことを示す。閉じた角括弧／大括弧は、ネガティブな検索用語を追加し、それは、選択されているエントリーの中で、@i{絶
対に}発生／合致しないということである。
@end table

@tsubheading{Remote editing}
@cindex remote editing, from agenda

@item 0-9
@c
Digit argument.
@cindex undoing remote-editing events
@cindex remote editing, undo
@c
@c
@c
@orgcmd{C-_,org-agenda-undo}　外部の編集コマンドでの変更を元に戻す。この変更はアジェ
ンダバッファと外部のバッファの両方を元に戻す。@orgcmd{t,org-agenda-todo}　アイテムの
TODOのステータスを変更する。アジェンダファイルでもオリジナルのOrgファイルでも
有効である。@orgcmd{C-S-@key{right},org-agenda-todo-nextset}
@orgcmd{C-S-@key{left},org-agenda-todo-previousset}　次／前のTODOキーワードのセットへと切り替える
。@orgcmd{C-k,org-agenda-kill}
@vindex org-agenda-confirm-kill
@c
@c
オリジナルのOrgファイルの中で、そのアイテムが属しているサブツリー全体と共に、
カレントのアジェンダアイテムを削除する。もしも外部ファイルの削除するテキスト
が１行以上ならば、削除を行うには、ユーザーが指定する必要がある。@code{org-agenda-confirm-kill}変
数を参照のこと。@orgcmd{C-c C-w,org-agenda-refile}　その時点でそのエントリーを差し替
える。@orgcmdkskc{C-c C-x C-a,a,org-agenda-archive-default-with-confirmation} 
@vindex org-archive-default-command
@c
@c
@c
@c
@code{org-archive-default-command}に設定されたデフォルトのアーカイブコマンドを使用して、その時点でエントリーに対応したサブツリーをアーカイブする。@code{a}キーを使用したときは、承認が必要である。@orgcmd{C-c C-x a,org-agenda-toggle-archive-tag}　カレントの見出しのためのARCHIVEタグをトグルする。@orgcmd{C-c C-x
A,org-agenda-archive-to-archive-sibling}　カレントエントリーに対応したサブツ
リーを、@emph{アーカイブファイル}に移動する。@orgcmdkskc{C-c C-x
C-s,$,org-agenda-archive}　カレントの見出しに対応したサブツリーをアーカイブす
る。これは、設定されたアーカイブの場所に、多くの場合それは異なるファイルであ
るが、エントリーを移動することを意味している。@orgcmd{T,org-agenda-show-tags}
@vindex org-agenda-show-inherited-tags
@c
@c
カレントアイテムと関連づけられたすべてのタグを表示する。もしも、あなたたが@code{org-agenda-show-inherited-tags}機
能を停止しているにもかかわらず、依然として、たびたび見出しのすべてのタグを確
認したいというときに役に立つ。@orgcmd{:,org-agenda-set-tags}　カレントの見出しにタグ
を設定する。もしもアジェンダの中にアクティブなリージョンがあるときは、そのリ
ージョンの中ですべての見出し用としてタグを変更する。
@kindex ,
@item ,
@c
@c
@c
@c
カレントアイテムに優先順位を設定する。(@command{org-agenda-priority})　Org-modeは優先
順位を表す文字を指示します。もしも、@key{SPC}を使って返答すると、優先順位のクッキ
ーがそのエントリーから取り除かれる。@orgcmd{P,org-agenda-show-priority}　カレントア
イテムの優先順位の重み付けを表示する。@orgcmdkkc{+,S-@key{up},org-agenda-priority-up}　カレントアイ
テムの優先順位を高くする。優先順位はオリジナルのバッファで変更される。しかし
アジェンダ上では並び替えの更新は行われない。このためには、@kbd{r}キーを使用する。
@orgcmdkkc{-,S-@key{down},org-agenda-priority-down}
　カレントアイテムの優先順位を低くする。@orgcmdkkc{z,C-c C-z,org-agenda-add-note}
@vindex org-log-into-drawer
@c
@c
@c
@c
そのエントリーにのノートを追加する。このノートは記録され、ノートが置かれてい
る状態を変更した同じ場所にファイルされる。@code{org-log-into-drawer}によって、これ
は引き出しの中に入る。@orgcmd{C-c C-a,org-attach}　すべてのコマンドの選択画面は、付
属するものに関連づけられる。@orgcmd{C-c C-s,org-agenda-schedule}　このアイテムを予約
する。前置引数をつけると、予約のタイムスタンプが削除される。@orgcmd{C-c C-d,org-agenda-deadline}　
このアイテムにデッドラインを設定する。前置引数をつけるとデッドラインが削除さ
れる。@orgcmd{k,org-agenda-action}　カーソルの置かれた日付に選択されたアイテムの日付
を設定するための、アジェンダのアクション。このコマンドはカレンダーでも動作す
る！コマンドは追加されたキーで入力する。
@example
m   
@r{その地点でアクションのためにエントリーにマークする。複数のエントリーに対しても可能である。}
    @r{Org-modeでは次を伴う@kbd{C-c C-x C-k}.}
d   @r{その時点の日付でマークされたエントリーのデッドラインを設定する。}
s   @r{その時点の日付でマークされたエントリーを予約する。}
r   
@r{デフォルトの日付としてカーソルの日付とともに@code{org-capture}を呼び出す。}
@end example
@noindent
@c
@c
@c
@c
@c
@c
@c
アジェンダを更新した後に、@kbd{r}を押すと、コマンドの効果を確認できる。@orgcmd{S-@key{right},org-agenda-do-date-later}　
カレント行に関連づけられたタイムスタンプを１日先に変更する。数値付きの前置引
数をつけると、その数字の日数分だけ先に変更する。例えば、@kbd{3 6 5
S-@key{right}}と入力すると１年先に変更される。@kbd{C-u}という前置引数をつけると、１時
間ずつ時間を変更する。もしもあなたが、同じコマンドを即座に繰り返したいときは
、前置変数を付けなくても１時間単位で変化し続けるでしょう。二重の@kbd{C-u C-u}とい
う前置引数をつけると、同様に分単位で変更される。オリジナルのOrg-modeファイル
の中でタイムスタンプは変更されるが、その変更はアジェンダバッファには直接は反
映されない。バッファを更新するには、@kbd{r}または@kbd{g}を使用する。@orgcmd{S-@key{left},org-agenda-do-date-earlier}　
カレント行のに関連づけられたタイムスタンプを1日過去に変更する。@orgcmd{>,org-agenda-date-prompt}　
カレント行に関連づけられたタイムスタンプを変更する。@kbd{>}キーが選択される。とい
うのは、私のキーボード上では@kbd{S-.}と同じだからである。@orgcmd{I,org-agenda-clock-in}　
カレントアイテムの時計をスタートする。もしもすでに時計が動いているのならば、
まずそれが停止する。@orgcmd{O,org-agenda-clock-out}　すでにスタートした時計を停止す
る。@orgcmd{X,org-agenda-clock-cancel}　カレントで動いている時計をキャンセルする。@orgcmd{J,org-agenda-clock-goto}　
別のウインドウの中の動いている時計にジャンプする。

@tsubheading{Bulk remote editing selected entries}
@cindex remote editing, bulk, from agenda

@c
@c
@c
@orgcmd{m,org-agenda-bulk-mark}　大量のアクションについて、その時点でエントリーにマ
ークをつける。前置引数を付けると、多くの連続したエントリーにマークをつける。
@orgcmd{U,org-agenda-bulk-remove-all-marks}　大量のアクションのマークを取り除く。@orgcmd{U,org-agenda-bulk-remove-all-marks}　
大量のアクションのためにマークがつけられたエントリーのマークを取り除く。@orgcmd{B,org-agenda-bulk-action}　
大量のアクション。アジェンダの中ですべてのマークをつかられたエントリーについ
て実行する。この機能では、適用されるアクションを選択するために、別のキーを入
力する。@kbd{B}に前置引数をつけると、@kbd{s}や@kbd{d}のコマンドをパスして、これらの特別な
タイムスタンプをまとめて取り除く。
@example
r  
@r{１つのリフィル上のターゲットに入力しすべてのエントリーを移動する。そのエントリーは}
   @r{アジェンダ上には表示されなくなる。再表示(@kbd{g})によって再度表示される。}
$  @r{選択されているエントリーをすべてアーカイブする。}
A  @r{エントリーをアーカイブし、それぞれを所定のアーカイブ先に移動する。}
t  @r{TODOの状態を変更する。これはTODOキーワード1文字を入力し、そして}
   
@r{選択されたエントリーすべての状態を変更する。それはブロックしているのを無視し}
   @r{ログのノートを抑え込んで（タイムスタンプは別です）。}
+  @r{選択されたエントリーのすべてにタグを付加する。}
-  @r{選択されたエントリーのすべてから、タグのひとつを削除する。}
s  
@r{すべてのアイテムに新しい日付で予約する。すでに予約がついていれば、日数分だけ}
   
@r{日付を更新する。入力欄でプラスを２つつけて何かの数字を最初に打つことで。}
   @r{例えば、@samp{++8d}とか@samp{++2w}のように。}
S  
@r{N日を指定して、それぞれをリスケジュールする。Nは入力欄で指定する。前置引数}
   @r{(@kbd{C-u B S})をつけることで、平日のみに指定できる。}
d  @r{指定した日をデッドラインとして設定する。}
@end example


@tsubheading{Calendar commands}
@cindex calendar commands, from agenda

@c
@c
@orgcmd{c,org-agenda-goto-calendar}　Emacsのカレンダーを開き、アジェンダのカーソルの
置かれている日付に移動します。@orgcmd{c,org-calendar-goto-agenda}　すでにカレンダー
の中にあるときは、カーソルの置かれている日付で計算し、Org-modeのアジェンダを
表示します。
@cindex diary entries, creating from agenda
@orgcmd{i,org-agenda-diary-entry}
@vindex org-agenda-diary-file
カーソルの置かれている日付および（ブロックエントリーでは）マークされた日付を
使って、新しいエントリーを日記に書き込みます。この機能ではEmacsの日記ファイル

@footnote{@code{org-agenda-include-diary}が設定されているときは、このファイルはアジェンダ用に解析されます。}に追加することになります。ある意味では、カレンダー
の@kbd{i}コマンドと似た機能です。日記ファイルは別のウインドウにポップアップし、そ
こでエントリーを書き加えることができます。

@c
@c
@c
@c
もしもOrg-modeファイルに@code{org-agenda-diary-file}
を指定したならば、Org-modeではそのファイルの中に（Org-modeの構文を使って）日
記の代わりに、エントリーを作成することができます。ほとんどのエントリーは、日
付を元にしたアウトラインのツリーの中に記述されており、あとで過去の月／年の中
から予定をアーカイブするのを簡単にします。そのツリーは、@code{DATE_TREE}属性か、最
上位のエントリーとして、年という属性を持ったエントリーのもとに構築されていま
す。Emacsでエントリーのテキストを入力するようプロンプトが表示されるでしょう。
もしもあなたがそれを指示するならば、さらなる連携なく、@code{org-agenda-diary-file}に
そのエントリーを作成することになるでしょう。テキストを入力することなく、その
入力欄で直接@key{RET}を入力したら、そのターゲットとなるファイルがその場でのエント
リーを終了させ、別のウインドウが表示されるでしょう。@kbd{k r}コマンドを参照してく
ださい。@orgcmd{M,org-agenda-phases-of-moon}　その日を中心として3ヶ月間の月齢を表示
する。@orgcmd{S,org-agenda-sunrise-sunset}　日の出と日の入りを表示する。地理上の場所
によって、カレンダーの変数が設定される。Emacsのcalendarの章を参照のこと。@orgcmd{C,org-agenda-convert-date}　
カーソルの置かれている日付によって、多くの他の文化的・歴史的なカレンダーに変
換する。@orgcmd{H,org-agenda-holidays}　カーソルのある日付を中心に3ヶ月間の祝祭日を
表示する。

@item M-x org-export-icalendar-combine-agenda-files
すべてのアジェンダファイルからエントリーを含んだiCalendar形式のファイルにエク
スポートする。これはグローバルに利用できるコマンドで、そしてまたアジェンダメ
ニューの中で利用できるコマンドです。

@tsubheading{Exporting to a file} @orgcmd{C-x C-w,org-write-agenda}
@cindex アジェンダビューの出力
@cindex アジェンダビュー（出力）
@vindex org-agenda-exporter-settings
アジェンダビューを1つのファイルに書き出します。選択したファイル名の拡張子に従
って、そのビューは、HTML
(拡張子が@file{.html}または@file{.htm})、Postscript (拡張子@file{.ps})、PDF
(拡張子@file{.pdf})、そしてプレーンテキスト(その他の拡張子）などにエクスポートされ
ます。@kbd{C-u}という前置引数を用いてコマンドを呼び出したならば、即座に新しく作成
されたファイルが開きます。エクスポートの間に使用されている@file{ps-print}および@file{htmlize}の
ためのオプションを設定するために、@code{org-agenda-exporter-settings}変数を使用し
ます。

@c
@tsubheading{Quit and Exit}　@orgcmd{q,org-agenda-quit}　アジェンダを終了し、アジェンダバッファ
を削除しますｓ。
@cindex agenda files, removing buffers
@orgcmd{x,org-agenda-exit}　アジェンダを終了し、アジェンダバッファとアジェンダを編集
するためにEmacsで読み込まれたすべてのバッファを削除する。Org-modeファイルを読
み込むためにユーザーによって作成されたバッファは削除されない。
@end table


@node Custom agenda views, Exporting Agenda Views, Agenda commands, Agenda Views
@section Custom agenda views
@cindex custom agenda views
@cindex agenda views, custom

カスタムアジェンダコマンドは２つの目的を提供する。ひとつはTODOとタグの検索を
使用して、保存と素早く頻繁にアクセスするため。もうひとつは、特別に合成したア
ジェンダバッファを作成するため。カスタムなアジェンダコマンドはデフォルトのコ
マンドと同様に、コマンド選択画面ディスパッチャー(@pxref{Agenda dispatcher})を通して
利用できる。

@menu
* Storing searches::         一度入力し、何度も使う
* Block agenda::             必要な事項をひとつのバッファに集める
* Setting Options::          ルールを変更する
@end menu

@node Storing searches, Block agenda, Custom agenda views, Custom agenda views
@subsection Storing searches

カスタム検索の最初のアプリケーションは、よく使われる検索式のためのキーボード
ショートカットを定義することです。それはアジェンダバッファの作成、またはツリ
ーの抽出（後者は言うまでもなくカレントバッファのみをカバーする）のどちらに対
してでも。
@kindex C-c a C
@vindex org-agenda-custom-commands
カスタムコマンドは、@code{org-agenda-custom-commands}変数で設定されます。あなたは
この変数をカスタマイズできます。例えば、@kbd{C-c a
C}というように。またあなたは@file{.emacs}にEmacsのLispを記述して直接設定することも
できます。以下に述べる例はすべての適正な検索タイプを含んでいます。

@lisp
@group
(setq org-agenda-custom-commands
      '(("w" todo "WAITING")
        ("W" todo-tree "WAITING")
        ("u" tags "+boss-urgent")
        ("v" tags-todo "+boss-urgent")
        ("U" tags-tree "+boss-urgent")
        ("f" occur-tree "\\<FIXME\\>")
        ("h" . "HOME+Name tags searches") ; description for "h" prefix
        ("hl" tags "+home+Lisa")
        ("hp" tags "+home+Peter")
        ("hk" tags "+home+Kim")))
@end group
@end lisp

@noindent
それぞれのエントリーの頭文字は、コマンドにアクセスするために、コマンド選択画
面を呼び出す@kbd{C-c a}というコマンドの後に、入力しなければならないキーを定義しま
す。通常、これは1文字をあてますが、もしもあなたが似たようなコマンドをたくさん
持っていたら、あなたは2文字の組合せで定義することができます。その場合、いくつ
かの組合せでは最初の文字が同じものとなり、前置引数
@footnote{あなたは前置引数と説明をつけて、コンソールのセルを挿入することで、前置引数のキーのための説明を表示することができます。}.と
同じように提供されます。2番目のパラメーターは検索の種類を示し、マッチさせるた
めに使われる文字列や正規表現がそれに続きます。上の例ではそれゆえ以下のように
定義します。

@table @kbd
@item C-c a w
TODOのキーワードとして、@samp{WAITING}となっているTODOエントリーのためのグローバル
な検索として。す。
@item C-c a W
同じような検索であるが、カレントバッファにのみ適用され、ツリーの抽出として検
索結果を表示する。
@item C-c a u
@samp{:urgent:}ではなく@samp{:boss:}というタグがつけられた見出しのための、グローバルな
タグ検索を行う。
@item C-c a v
@kbd{C-c a u}と同じ検索を行うが、TODOアイテムである見出しに対してのみ検索を行うと
いう制限がある。
@item C-c a U
@kbd{C-c a u}と同じ検索を行うが、カレントバッファに対してのみ検索を行い、結果をツ
リーの抽出として表示する。
@item C-c a f
すべてのエントリーのうちで@samp{FIXME}という言葉を含んでいるものを検索してツリーの
抽出を行う（くどいかもしれませんが、カレントバッファだけが対象です）。
@item C-c a h
HOMEというタグ検索のためのコマンドの前置引数として、そこでは、タグ検索の追加
として、一つの名前(Lisa、Peter、またはKim)を選択するために、あなたはさらに(@kbd{l}、
@kbd{p}、または@kbd{k})というキーを追加入力する必要があります。
@end table

@node Block agenda, Setting Options, Storing searches, Custom agenda views
@subsection Block agenda
@cindex block agenda
@cindex agenda, with block views

もう一つの可能性とは、アジェンダビューの構築です。そのビューは、
@emph{様々な}コマンドの結果で構成されており、それぞれのコマンドはアジェンダバッファの中の
１つのブロックを作成します。利用できるコマンドは（@kbd{C-c a a}を実行して作成され
た）一日または週間アジェンダのための@code{agenda}、（@kbd{C-c a t}を実行して作成された
）グローバルなtodoリストのための@code{alltodo}、そして上で議論してきた@code{todo}、@code{tags}、
@code{tags-todo}などの検索コマンドに含まれています。２つの例を挙げます。

@lisp
@group
(setq org-agenda-custom-commands
      '(("h" "Agenda and Home-related tasks"
         ((agenda "")
          (tags-todo "home")
          (tags "garden")))
        ("o" "Agenda and Office-related tasks"
         ((agenda "")
          (tags-todo "work")
          (tags "office")))))
@end group
@end lisp

@noindent
これによって、家で精を出さなければならない用事に対するマルチブロックのビュー
を作成するために、@kbd{C-c a h}を定義します。アジェンダバッファには結果として、そ
の週の、@samp{home}というタグが含まれているすべてのTODOアイテムと、@samp{garden}という
タグがついたすべての行のためのアジェンダを含むことになります。最後に、@kbd{C-c a o}と
いうコマンドで、同様に、オフィスの作業についてのビューを得ることができます。

@node Setting Options, , Block agenda, Custom agenda views
@subsection Setting options for custom commands
@cindex options, for custom agenda views

@vindex org-agenda-custom-commands
Org-modeはたくさんのアジェンダの構築や表示について調整する変数を含んでいます
。グローバルな変数では、カスタムコマンドも含めて、アジェンダの全てのコマンド
の動作を定義することができます。しかしながら、もしもあるひとつのカスタムビュ
ーについて、いくつかの設定を変更したいならば、それも可能です。オプションの設
定は変数名のリストに書き込むことが必要で、@code{org-agenda-custom-commands}の中に
、正しい位置に値を書き込む必要があります。例えば。

@lisp
@group
(setq org-agenda-custom-commands
      '(("w" todo "WAITING"
         ((org-agenda-sorting-strategy '(priority-down))
          (org-agenda-prefix-format "  Mixed: ")))
        ("U" tags-tree "+boss-urgent"
         ((org-show-following-heading nil)
          (org-show-hierarchy-above nil)))
        ("N" search ""
         ((org-agenda-files '("~org/notes.org"))
          (org-agenda-text-search-extra-files nil)))))
@end group
@end lisp

@noindent
こう書き込むことによって、@kbd{C-c a w}というコマンドは、優先順位によってのみ収集
したエントリーを並べ替えるでしょう。そのエントリーのカテゴリを設定する変わり
に、例えば@samp{
Mixed: }という文字をprefixの形で書くことで変更することができます。@kbd{C-c a U}と
いうタグでツリーを抽出するコマンドは、この結果、超コンパクトとなるでしょう。
なぜならば、検索に合致した項目の上の階層の見出しも、合致した項目の見出しもど
ちらも表示されないからです。@kbd{C-c a N}というコマンドは、１つのファイルに制限さ
れたテキスト検索を実行します。

@vindex org-agenda-custom-commands
ブロックアジェンダを作成するコマンドセットのために、@code{org-agenda-custom-commands}で
はオプションの設定用に２つの別の場所を用意しています。その設定の中にたったひ
とつのコマンドに有効なオプションを付け加えることも、その設定の中にすべてのコ
マンドに有効なオプションを付け加えることもできます。前者のオプションは１つの
コマンドエントリーを付け加える。後者のオプションは、コマンドエントリーのリス
トを書き込むことが必要です。ブロックアジェンダの例に戻ると(@pxref{Block agenda})、
@kbd{C-c a h}というコマンドで、並べ替えの順序を優先順位の降順@code{priority-down}に変
更することができますし、その中で「GARDEN」というタグのついたものについては反
対の順序、すなわち優先順位の昇順@code{priority-up}に並べ替えることができるでしょう
。このことは以下のように記述できます。

@lisp
@group
(setq org-agenda-custom-commands
      '(("h" "Agenda and Home-related tasks"
         ((agenda)
          (tags-todo "home")
          (tags "garden"
                ((org-agenda-sorting-strategy '(priority-up)))))
         ((org-agenda-sorting-strategy '(priority-down))))
        ("o" "Agenda and Office-related tasks"
         ((agenda)
          (tags-todo "work")
          (tags "office")))))
@end group
@end lisp

おわかりだと思いますが、変数とカッコで囲んでいる設定はやや複雑なところがあり
ます。わかりにくいときは、カスタマイズのインターフェースとしてこの変数を設定
してください。これはカスタマイズの構造を完全にサポートしています。注意しなけ
ればならないのは、このインターフェースでオプションを設定するときに、
@emph{変数}は、Lispによる表現をとっているということです。そのため、もしもその変数が１
つの文字ならば、あなた自身でその変数の値に「”（ダブルクォート）」で囲む必要
があるということです。


@node Exporting Agenda Views, Agenda column view, Custom agenda views, Agenda Views
@section Exporting Agenda Views
@cindex アジェンダビュー（出力）

もしもあなたが自分のコンピュータから離れているときは、いくつかのアジェンダの
バージョンを印刷して持ち歩くことは大変役に立ちます。Org-modeはカスタムアジェ
ンダビューをプレーンなテキスト、HTML
@footnote{あなたはHrvoje Niksic氏の@file{htmlize.el}をインストールする必要があります。}、Postscript、PDF
@footnote{PDFの出力を作成するためには、Ghostscriptの@file{ps2pdf}ユーティリティがシステムにインストールされている必要があります。pdfファイルを選択するとポストスクリプトファイルも作成されます。}、
iCalenderファイルとしてエキスポートすることができます。もしも、ときどきこのよ
うなことを実行するのならばコマンドを使用しましょう。

@table @kbd
@orgcmd{C-x C-w,org-write-agenda}
@cindex アジェンダビューの出力
@cindex アジェンダビュー（出力）
@vindex org-agenda-exporter-settings
アジェンダビューを１つのファイルに書き出します。選択したファイル名の拡張子に
より、そのビューはHTML（拡張子が@file{.html}または@file{.htm}）、Postscript（拡張子が@file{.ps}）
、iCalendar（拡張子が@file{.ics}）、あるいはプレーンなテキスト（何かほかの拡張子）
としてエクスポートされます。エクスポートの間に、@file{ps-print}のため、および@file{htmlize}の
ためにオプションを設定するには、@code{org-agenda-exporter-settings}変数を使用しま
す。例えば

@vindex org-agenda-add-entry-text-maxlines
@vindex htmlize-output-type
@vindex ps-number-of-columns
@vindex ps-landscape-mode
@lisp
(setq org-agenda-exporter-settings
      '((ps-number-of-columns 2)
        (ps-landscape-mode t)
        (org-agenda-add-entry-text-maxlines 5)
        (htmlize-output-type 'css)))
@end lisp
@end table

もしも、あなたがアジェンダビューをたびたびエクスポートする必要があるのならば
、アウトプットのファイルの名前
@footnote{もしもあなたが週間アジェンダやグローバルなTODOリストなどのような標準的なビューを保存したいならば、ファイル名を指定することができるようにするために、それらのビューのためにカスタムなコマンドを定義する必要があります。}の
リストに、いくつかのカスタムなアジェンダのコマンドを関連づけることができます
。ここに一つの例があります。最初のものはアジェンダとグローバルなTODOリストに
対するカスタムなコマンドを定義しており、それらをエクスポートするたくさんのフ
ァイルと一緒になっています。それから２つのブロックアジェンダコマンドを定義し
、同様にそれらのためのファイル名を指定しています。ファイル名は、現在作業して
いるディレクトリに対して相対パスにすることも絶対パスにすることもできます。

@lisp
@group
(setq org-agenda-custom-commands
      '(("X" agenda "" nil ("agenda.html" "agenda.ps"))
        ("Y" alltodo "" nil ("todo.html" "todo.txt" "todo.ps"))
        ("h" "Agenda and Home-related tasks"
         ((agenda "")
          (tags-todo "home")
          (tags "garden"))
         nil
         ("~/views/home.html"))
        ("o" "Agenda and Office-related tasks"
         ((agenda)
          (tags-todo "work")
          (tags "office"))
         nil
         ("~/views/office.ps" "~/calendars/office.ics"))))
@end group
@end lisp

ファイル名の拡張子がエクスポートのタイプを決定します。もしも拡張子が@file{.html}な
らば、Org-modeは@file{htmlize.el}パッケージを使用し、バッファをHTMLに変換し、その
ファイル名で保存します。もしも拡張子が@file{.ps}ならば、@code{ps-print-buffer-with-faces}が
Postscriptの出力をするために使用されます。もしも拡張子が@file{.ics}ならば、iCalendarの
エクスポートは、アジェンダを構成しているすべてのファイルにわたってエクスポー
トを実行し、現在アジェンダの中ではリスト化されたエントリーのエクスポートに限
定されます。ほかの拡張子がついた場合は、プレーンなASCIIテキストファイルが作成
されます。

エクスポートファイルは、非常に負荷が高いので、これらのコマンドの一つを相互に
影響するように使用している時は、出力されません。そのかわり、1ステップで
@emph{すべて}の指定されたファイルを出力する特別なコマンドが用意されています。

@table @kbd
@orgcmd{C-c a e,org-store-agenda-views}　アジェンダに関連するエクスポートファイル名
を持つすべてのアジェンダビューをエクスポートします。
@end table

あなたは、エクスポートコマンドのためのオプションの設定をするために。カスタム
アジェンダコマンドのオプションのセクションを使用することができます。例えば、

@lisp
(setq org-agenda-custom-commands
      '(("X" agenda ""
         ((ps-number-of-columns 2)
          (ps-landscape-mode t)
          (org-agenda-prefix-format " [ ] ")
          (org-agenda-with-colors nil)
          (org-agenda-remove-tags t))
         ("theagenda.ps"))))
@end lisp

@noindent
このコマンドは、Postscriptのエクスポートのために、２つのオプションを設定しま
す。横長のフォーマットで２段のプリントを作成するためです。出力されたページは
、２つにカットして、紙のアジェンダとして使えるようになります。もうひとつの設
定は、行頭のカテゴリーとスケジューリング情報を省き、その代わりにチェックのつ
いてないチェックボックスの項目となるようにアジェンダを修正します。私たちは各
行をコンパクトに表示するためにタグを省略したり、白黒プリンタのためにカラーを
使わない用にすることもできます。@code{org-agenda-exporter-settings}の中で指定する
設定もできますが、@code{org-agenda-custom-commands}での設定が優先します。

@noindent
コマンドラインで次のような設定を使用することができます。
@example
emacs -f org-batch-store-agenda-views -kill
@end example
@noindent
また、いくつかのパラメーター
@footnote{引用の方法はあなたの使用しているシステムに依存します。事例用のFAQを確認してください。}を修正する必要があります。
@example
emacs -eval '(org-batch-store-agenda-views                      \
              org-agenda-span month                             \
              org-agenda-start-day "2007-11-01"                 \
              org-agenda-include-diary nil                      \
              org-agenda-files (quote ("~/org/project.org")))'  \
      -kill
@end example
@noindent
どちらも@file{~/org/project.org}のファイルを対象として、日記のエントリーは除かれ、
30日以内に限定したアジェンダビューを作成します。

あなたは、他のプログラムで将来の進行過程を認める方法で、アジェンダの情報を絞
り込むことができます。詳細は@ref{Extracting agenda information},のノートの情報を
参照してください。


@node Agenda column view, , Exporting Agenda Views, Agenda Views
@section Using column view in the agenda
@cindex column view, in agenda
@cindex agenda, column view

カラムビュー(@pxref{Column view})は、Org-modeファイルの階層構造の中に組み込まれてい
る属性を見たり編集したりするために通常は使われます。エントリーがある評価基準
で収集されているアジェンダから、カラムビューを使用することは大変便利です。

@table @kbd
@orgcmd{C-c C-x C-c,org-agenda-columns}　アジェンダの中でカラムビューに切り替えます
。
@end table

この属性がどのようなものか理解するために、アジェンダのエントリーはもはや適切
なアウトラインの環境ではなくなることを理解することが重要です。これによって以
下のようなことが生じます。

@enumerate
@item
@vindex org-columns-default-format
@vindex org-overriding-columns-format
Org-modeでは、どの@code{COLUMNS}のフォーマットを使用するか、決定する必要があります
。アジェンダの中のエントリーは、異なるファイルから集められるということと、フ
ァイルが異なると@code{COLUMNS}のフォーマットも異なるということから、このことは些細
な問題であるとはいえないのです。Org-modeは最初に、@code{org-overriding-columns-format}変
数がカレントで設定されているかどうか、またそこからフォーマットを取り出すこと
ができるかどうかチェックします。一方、アジェンダの最初のアイテムに関連したフ
ォーマットを使用するか、もしもそのアイテムが特別なフォーマット（属性もしくは
ファイルの中で定義された）を持たないならば、@code{org-columns-default-format}を使
用します。
@item
@cindex 特別なプロパティ（CLOCKSUM）
もしも、どれかカラムに要約形式(@pxref{Column attributes})が定義されているならば、ア
ジェンダでカラムビューに切り替えるときに、すべての関連するアジェンダファイル
を確認して、この属性の計算の更新を確実に行います。このことは、特別な@code{CLOCKSUM}の
属性が真であると設定されているということです。Org-modeはアジェンダの中で表示
された値を合計するでしょう。一日／週間アジェンダの中で、合計は1日をカバーして
います。他のビューでは、ブロック全体をカバーするのです。アジェンダでは同じエ
ントリーを@emph{２度}表示したり（例えばスケジュールと期限というように）、同じ階層
（例えば@emph{親}と@emph{子}）から@emph{２つ}のエントリーを表示したりするかもしれない、とい
うことを理解することは重要なことです。これらの場合、アジェンダの中での要約は
、いくつかの値が二重にカウントされるという間違った結果を導く可能性があります
。
@item
アジェンダの中のカラムビューが、@code{CLOCKSUM}を表示するときは、このアイテムのた
めにいつでも時間計測全体に対応します。そのため1日/週間アジェンダにおいて、カ
ラムビューでリスト化された時間合計は、カレントのビューの外側の時間から発生す
ることになるかもしれません。この機能によって、あるタスクについて、計画された
総工数を1つのカラムにリストにして、その値を比較することができるので、優位性を
持ちます。この機能はアジェンダのカラムビューにおける重要なアプリケーションの
ひとつです。もしもあなたが表示されている期間の中の作業時間についての情報を得
たいならば、clock
table mode（@kbd{R}をアジェンダの中で入力する）を使用してください。
@end enumerate


@node Markup, Exporting, Agenda Views, Top
@chapter Markup for rich export

Org-modeの文書をエクスポートする時，エクスポート機能は文書の構造をできるだけ
正確に反映しようとします．HTMLや@LaTeX{}，DocBook，その他のリッチフォーマット等のエ
クスポートの対象について，Org-modeは文書をリッチエクスポートに変換するルール
を持ちます．このセクションはOrg-modeんバッファで使われるマークアップのルール
について説明します．

@menu
* Structural markup elements::  エクスポートでわかる基本的な構造
* Images and tables::        テーブルと画像は含まれているだろう
* Literal examples::         特別なフォーマットのためのソースコードの例
* Include files::            文書に別のファイルを添付する
* Index entries::            indexを作る
* Macro replacement::        複雑なアウトプットを作成するためにマクロを使用す
る
* Embedded LaTeX::           LaTexはorg-modeの文書では自在に使用することがで
きる
@end menu

@node Structural markup elements, Images and tables, Markup, Markup
@section Structural markup elements

@menu
* Document title::           どこからタイトルが取り出されるか
* Headings and sections::    文書の構造はエクスポートの設定で確認できる
* Table of contents::        コンテンツのテーブルの条件と場所
* Initial text::             最初の見出しより前に書かれた文
* Lists::                    Lists
* Paragraphs::               Paragraphs
* Footnote markup::          Footnotes
* Emphasis and monospace::   Bold, italic, etc.
* Horizontal rules::         線を作る
* コメント行::          何がエクスポートされないか
@end menu

@node Document title, Headings and sections, Structural markup elements, Structural markup elements
@subheading Document title
@cindex 文書のタイトル，マークアップのルール

@noindent
エクスポートされた文書のタイトルは専用の行で設定されます．

@cindex #+TITLE
@example
#+TITLE: これは文書のタイトルです．
@end example

@noindent
もしこの行が存在しなければ，タイトルはバッファ中の最初の空でない，コメントで
ない行を用います．もしまだ何も存在していない，またはあなたが最初の見出しより
前のテキストをエクスポートをしないよう設定していたら，タイトルは拡張子無しの
ファイル名となります．

@cindex プロパティ，EXPORT_TITLE
もしあなたがリージョンでマークしたサブツリーのみをエクスポートしているなら，
サブツリーの見出しは文書のタイトルとなるでしょう．もしサブツリーが@code{EXPORT_TITLE}プ
ロパティを持っているなら，そのプロパティの値が優先して用いられるでしょう．

@node Headings and sections, Table of contents, Document title, Structural markup elements
@subheading Headings and sections
@cindex 見出しとセクション，マークアップのルール

@vindex org-export-headline-levels
@ref{Document Structure}で説明されているような文書のアウトライン構造は
エクスポートされた文書のセクションの定義の基準を形成しています．しかしながら
，アウトライン構造はまた(例えば)タスクのリストとしても使われているので，最初
の3アウトラインレベルのみ見出しとして使われます．

@cindex #+OPTIONS
@example
#+OPTIONS: H:4
@end example

@node Table of contents, Initial text, Headings and sections, Structural markup elements
@subheading Table of contents
@cindex 目次，マークアップのルール

@vindex org-export-with-toc
目次は通常ファイルの最初の見出しの前に直接挿入されます．もしあなたが異なる場
所に目次を挿入したいのなら，その場所に@code{[TABLE-OF-CONTENTS]}文字列を書いてくだ
さい．目次の深さはデフォルトでは見出しのレベルの数と同じですが，@code{org-export-with-toc}変
数を設定するか，ファイルに以下のように書くことによって，あなたはこれより小さ
な値に変更することも，目次を完全に表示させないようにすることも可能です．

@example
#+OPTIONS: toc:2          (目次に表示するレベルを2までとする)
#+OPTIONS: toc:nil        (目次を表示しない)
@end example

@node Initial text, Lists, Table of contents, Structural markup elements
@subheading 最初の見出しより前のテキスト
@cindex 最初の見出しより前のテキスト，マークアップのルール
@cindex #+TEXT

Org-modeは通常最初の見出しの前にテキストをエクスポートし，最初の行を文書のタ
イトルにします．テキストは完全にマークアップされているでしょう．もしあなたが
HTMLや@LaTeX{}，DocBookのような<リテラルを含めたい場合，独立したエクスポート機構の
セクションで説明されている特別な構造を使います．

@vindex org-export-skip-text-before-1st-heading
多くの人々は内部リンクの設定のためとそのために異なる方法でエクスポートされた
最初の見出しの前のテキストを制御する最初の見出しの前に空白を使うことを好みま
す．あなたは@code{orgexport-skip-text-before-1st-heading}変数を@code{t}にすることで設定
することができます．ファイル中に設定する場合，あなたは@samp{#+OPTIONS: skip:t}とす
ることで同等の設定を行うことができます．

@noindent
もし，あなたがまだ最初の見出しの前にテキストを置きたいのであれば，@code{#+TEXT}構
造を使います:

@example
#+OPTIONS: skip:t
#+TEXT: このテキストは*最初の*見出しの前に置かれます
#+TEXT: [TABLE-OF-CONTENTS]
#+TEXT: このテキストは目次と最初の見出しの間に置かれます
@end example

@node Lists, Paragraphs, Initial text, Structural markup elements
@subheading Lists
@cindex リスト，マークアップのルール

@ref{Plain lists}で説明されているプレーンリストは，バックエンドのリストに変換され
ます．多くのバックケンドがサポートしているのは記号付きリスト，番号付きリスト
，見出し付きリストです．

@node Paragraphs, Footnote markup, Lists, Structural markup elements
@subheading 段落，改行，引用
@cindex 段落，マークアップのルール

段落は最低1つの空白行で区切られます．もしあなたが強制的に段落の中で改行しない
なら，@samp{\\\\}を行の末尾に書いてください．

リージョンで改行を保つためには，しかしそうでなければ通常のフォーマットが使わ
れるなら，あなたはフォーマット技法として使われるこの構文を使うことができます
．

@cindex #+BEGIN_VERSE
@example
#+BEGIN_VERSE
 Great clouds overhead
 Tiny black birds rise and fall
 Snow covers Emacs

     -- AlexSchroeder
#+END_VERSE
@end example

別の文書から一節を引用する時，段落の左右の余白を空けることが慣習となっていま
す．あなたは以下を用いることで引用をOrg-modeの文書に含めることができます:

@cindex #+BEGIN_QUOTE
@example
#+BEGIN_QUOTE
Everything should be made as simple as possible,
but not any simpler -- Albert Einstein
#+END_QUOTE
@end example

もしあなたがテキストを中央寄せにしたいなら，以下を使うことができます:
@cindex #+BEGIN_CENTER
@example
#+BEGIN_CENTER
Everything should be made as simple as possible, \\
but not any simpler
#+END_CENTER
@end example


@node Footnote markup, Emphasis and monospace, Paragraphs, Structural markup elements
@subheading Footnote markup
@cindex 脚注，マークアップのルール
@cindex @file{footnote.el}

脚注は@ref{Footnotes}で説明されたように定義されていて，全てのバックエンドにエクス
ポートされます．Org-modeは同じノートに対しての複数の参照と異なるバックエンド
をサポートします．

@node Emphasis and monospace, Horizontal rules, Footnote markup, Structural markup elements
@subheading Emphasis and monospace

@cindex 下線のあるテキスト，マークアップのルール
@cindex 太字のテキスト，マーックアップのルール
@cindex 斜体のテキスト，マーックアップのルール
@cindex 文字通りのテキスト，マーックアップのルール
@cindex コードのテキスト，マークアップのルール
@cindex 取り消されたテキスト，マーックアップのルール
あなたは@b{*bold*}と@i{/italic/}，_underlined_，@code{=code=}，@code{~verbatim~}，そして必
要なら@samp{+strile-through+}を単語に適用することができます．codeとverbatim文字列
の中のテキストはOrg-modeの明確な構文ではありません;
それはverbatimにエクスポートされます．

@node Horizontal rules, コメント行, Emphasis and monospace, Structural markup elements
@subheading Horizontal rules
@cindex 水平線，マーックアップのルール
少なくとも5文字のダッシュ文字のみで行成される線は水平線(HTMLでは@samp{<hr/>}，@LaTeX{}で
は@code{\\hrule})にエクスポートされます．

@node コメント行, , Horizontal rules, Structural markup elements
@subheading コメント行
@cindex コメント行
@cindex エクスポートされない部分
@cindex #+BEGIN_COMMENT

行頭の文字が@samp{#}から始まる行はコメントとして扱われ，エクスポートされません．も
しあなたがコメント行をインデントしたいのであれば，@samp{#+}から行を開始してくださ
い．@samp{COMMENT}ワードを持つサブツリーは，サブツリー全体がエクスポートされません
．最後に，@samp{#+BEGIN_COMMENT}から@samp{END_COMMENT}で囲まれた範囲はエクスポートされ
ません．

@table @kbd
@kindex C-c ;
@item C-c ;
エントリー先頭のCOMMENTキーワードをトグルします．
@end table


@node Images and tables, Literal examples, Structural markup elements, Markup
@section 画像と表

@cindex 表，マークアップのルール
@cindex #+CAPTION
@cindex #+LABEL
Org-modeネイティブなテーブル(@pxref{Tables})と@file{table.el}パッケージを用いたテーブル
の両方が適切にエクスポートされます．Org-modeの表では，最初の水平線の前の行が
表のヘッダ行となります．あなたはキャプションと相互参照の指定を表の直前に，参
照のための
@code{\\ref@{tab:basic-data@}}オブジェクトをテキストのどこかに書くことができます．

@example
#+CAPTION: これは次の表(またはリンク)のキャプションです
#+LABEL:   tbl:basic-data
   | ... | ...|
   |-----|----|
@end example

@cindex インライン画像，マークアップのルール
多くのバックエンド(HTML，@LaTeX{}，DocBook)はエクスポートされた文書の中に直接画像を
挿入することができまる．もし，例えば，@code{[[./img/a.jpg]]}のような説明部分を持た
ない画像ファイルへのリンクがあるなら，Org-modeは画像の挿入を行います．もしあ
なたが画像のキャプションや内部相互参照のラベルを定義したいなら，以下のように
@code{#+CAPTION}と@code{#+LABEL}をリンクの前に書きます:

@example
#+CAPTION: これは次の画像(または表)のリンクのキャプションです．
#+LABEL:   fig:SED-HR4049
[[./img/a.jpg]]
@end example

あなたは画像に対する追加要素を定義するかもしれません．これはバックエンドの仕
様なので，さらに情報が必要なら独立したバックエンドについてのセクションを見て
ください．

@xref{Handling links,the discussion of image links}.

@node Literal examples, Include files, Images and tables, Markup
@section Literal examples
@cindex リテラルの例，マークアップのルール
@cindex コードラインのリファレンス，マークアップのルール

あなたはマークアップに依存しないリテラルの例を含めることができます．そのよう
な例に等幅のタイプセットがあり，それはソースコードやそれに似た例向きです．
@cindex #+BEGIN_EXAMPLE

@example
#+BEGIN_EXAMPLE
テキストファイルからの例．
#+END_EXAMPLE
@end example

そのようなブロックはインデントされたテキストをうまく整列させるためと，特にプ
レーンリスト構造(@xref{Plain lists}.)のために@i{インデント}されるでしょう．小さな例
を使う時，それを簡単にするために，あなたはコロンとそれに続く空白からなる例の
行を使うことができる．それらはコロンの前に空白を追加することもできます．

@example
ここに例を書きます
   : テキストファイルからの例
@end example

@cindex ソースコードのフォーマット，マークアップのルール
もし例がソースコードなら，もしくはEmacsでフォントロックによりマークアップされ
たテキストなら，あなたはEmacsバッファ
@footnote{HTMLバックエンドに対しては，この作業は自動的に行われます(Org-modeと一緒に配布されている@file{htmlize.el}のバージョン1.34が必要です)．LaTeXの要塞化されたコードの塊はリスティングか，@url{http://coe.google.com/p/minted, minted,}パッケージによってアーカイブされます．リスティングを使うには，@code{org-export-latex-listings}変数をオンにし，LaTeXのヘッダにリスティングパッケージが含まれているようにします(例:
@code{org-export-latex-packages-alist}の設定と@:を使います)．色付きの出力を含む設定のオプションについて，リスティングのドキュメントを見てください．mintedを使うには，@url{http://pygemnts.org, pygemnts}プログタムをインストールする必要があり，@code{org-export-latex-minted}を追加で設定し，LaTeXのヘッダにmitedパッケージが含まれていることと@code{-shell-escape}オプションが@file{pdflatex}に引き継がれている(@code{org-latex-to-pdf-process}を見てください)ことを確認します．}を要塞化するように要請することができます．あなたが例に色付けするために使うメジャーモードの名前を指定することが必要な時，@samp{src}ブロックを使います:
@cindex #+BEGIN_SRC

@example
#+BEGIN_SRC emacs-lisp
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_SRC
@end example

@code{example}と@code{src}スニペットでは，あなたは@code{BEGIN}の行の最後に@code{-n}を追加することで，例の行番号を表示することができます．もしあなたが@code{+n}とすると，前のスニペットから現在のものに番号が引き継がれます．リテラルの例で，Org-modeは@samp{(ref:name)}をラベルとして解釈し，@code{[[(name)]]}のような特別なリンクによりそこを参照することができます(i.e.@:
参照名は1つの括弧に囲まれています)．HTMLでは，対応するコード行をマウスオーバ
ーすると自動的にハイライト表示になり，少しクールです．

また，ソースコード
@footnote{Org-modeの例で説明するのに便利なリンクに行番号を使う間，@code{-k}を@code{-n -r}に追加することでソースコードのラベルを@i{維持}します．}か
らラベルを@i{消去}するかどうかの切り替えのために@code{-r}を追加することもできます．
@code{-n}で切り替えると，リンクされるそれらのリファレンスはコードリスティングの行
番号によってラベルを付けられ，そうでなければ括弧無しのラベルにリンクされます
．

@example
#+BEGIN_SRC emacs-lisp -n -r
(save-excursion                  (ref:sc)
   (goto-char (point-min))       (ref:jump)
#+END_SRC
In line [[(sc)]] we remember the current position.  [[(jump)][Line (jump)]]
jumps to point-min.
@end example

@vindex org-coderef-label-format
もし，ラベルの構文が言語の構文と衝突した場合，@code{-l}を使うことで@samp{#+BEGIN_SRC pascal -n -r -l \"((%s))\"}の
ようにフォーマットを変更できます．@code{org-coderef-label-format}変数を見てくださ
い．

HTMLはエクスポート時にテキストエリア,@xref{Text areas in HTML export}.とすることが
できます

@table @kbd
@kindex C-c '
@item C-c '
カーソル位置のソースコード例をそのネイティブモードで編集します．これはソース
コードを一時バッファに表示し，切り替えることで働きます．あなたは@kbd{C-c '}をもう
一度押すことで編集を終了します
@footnote{終了時，Org-modeによってアウトラインの見出しや特別なコメントと間違えられないようにするために，@samp{*}か@samp{#}から始まる行はカンマが銭湯に追加されます．}．
編集されたバージョンはOrg-modeバッファ上の古いバージョンを置き換えます．固定
幅のリージョンは簡単にASCIIでイラストを書くための@code{artist-mode}
@footnote{@code{org-edit-fixed-width-region-mode}変数により，異なるモードを選択することもできます．}を使うことで編集されます．空
行でこのコマンドを使うことで，新しい固定幅のリージョンを作成します．
@kindex C-c l
@item C-c l
@kbd{C-c '}によって作成した一時バッファでのソースコード例の編集中に@code{org-store-link}の
呼び出しはラベルを指示します．現在のバッファがユニークであることを確認し，現
在の行の最後に@samp{(ref:label)}のように適切にフォーマットされたものが挿入されます
．ラベルは@samp{(label)}のようなリンクを記憶し，@kbd{C-c C-l}検索する．
@end table


@node Include files, Index entries, Literal examples, Markup
@section Include files
@cindex ファイルのインクルード，マークアップのルール

エクスポート中，あなたは別のファイルの内容をインクルードすることができます．
例えば，@file{.emacs}をインクルードするなら，あなたは次のようにします:
@cindex #+INCLUDE

@example
#+INCLUDE: "~/.emacs" src emacs-lisp
@end example
@noindent
2つ目のオプションは(e.g.@:
@samp{quote}や@samp{example}，@samp{src})のようなマークアップで，3つ目はマークアップが@samp{src}な
らコンテンツの言語を表します．マークアップはオプションです;
もし与えられなければ，Org-modeフォーマットのテキストと仮定される．インクルー
ドの行は最初の行とそれに続く行のプレフィクスの指定のための追加キーワードパラ
メータの@code{:prefix1}と@code{:prefix}を，Org-modeのコンテンツを指定したレベル下げるた
めの@code{:minilevel}を，同様に選択したマークアップ固有のオプションを持ちます．例
えば，ファイルをインクルードするには:

@example
#+INCLUDE: "~/snippets/xx" :prefix1 "   + " :prefix "     "
@end example

@code{:line}パラメータを使うことで，ファイルの指定した範囲の行のみをインクルードすることができます．範囲外の行はインクルードされません．範囲の開始と，または終了は明らかにデフォルトを使いません．

@example
#+INCLUDE: "~/.emacs" :lines "5-10"   @r{Include lines 5 to 10, 10 excluded}
#+INCLUDE: "~/.emacs" :lines "-10"    @r{Include lines 1 to 10, 10 excluded}
#+INCLUDE: "~/.emacs" :lines "10-"    @r{Include lines from 10 to EOF}
@end example

@table @kbd
@kindex C-c '
@item C-c '
ポイント位置のインクルードされたファイルに移動します．
@end table

@node Index entries, Macro replacement, Include files, Markup
@section Index entries
@cindex 公開のためのインデックスのエントリ

あなたは公開した文書のインデックスに用いるエントリーを規定することができます
．これは@code{#+INDEX}から始まる行により設定します．感嘆符を含むエントリーはサブア
イテムを作るでしょう．さらなる情報を見るには@ref{Generating an index}を参照してく
ださい．

@example
* Curriculum Vitae
#+INDEX: CV
#+INDEX: Application!CV
@end example




@node Macro replacement, Embedded LaTeX, Index entries, Markup
@section Macro replacement
@cindex エクスポート中のマクロによる置き換え
@cindex #+MACRO

あなたはこのようにして

@example
#+MACRO: name   replacement text $1, $2 are arguments
@end example

@noindent which can be referenced anywhere in the document (even in
code examples) with @code{@{@{@{name(arg1,arg2)@}@}@}}.  In addition to
defined macros, @code{@{@{@{title@}@}@}}, @code{@{@{@{author@}@}@}}, etc.,
will reference information set by the @code{#+TITLE:}, @code{#+AUTHOR:}, and
similar lines.  Also, @code{@{@{@{date(@var{FORMAT})@}@}@}} and
@code{@{@{@{modification-time(@var{FORMAT})@}@}@}} refer to current date
time and to the modification time of the file being exported, respectively.
@var{FORMAT} should be a format string understood by
@code{format-time-string}.

マクロ展開はエクスポート中に行われ，一部の人々は複雑なHTMLコードの構築に用い
る．


@node Embedded LaTeX, , Macro replacement, Markup
@section Embedded @LaTeX{}
@cindex @TeX{}の解釈
@cindex @LaTeX{}の解釈

プレーンなASCIIはほとんどの場合ノートをとるのに十分です．例外は数学の記号や時
々出てくる数式を必要とする科学に関するノートのようなものです．@LaTeX{}
@footnote{@LaTeX{}はドナルド・クヌースの@TeX{}システムを基としたマクロシステムです．``@LaTeX{}''で説明される多くの機能は@TeX{}からのものですが，違いはそれほどありません}は
科学に関する文書の組版に広く使われています．多くのacademicsは@LaTeX{}のソースコード
の読み書きに使われていて，すぐに多くのエクスポートバックエンドに対応できるた
め，Org-modeは@LaTeX{}コードのファイルへの組込みをサポートしています．

@menu
* Special symbols::          ギリシャ文字や他の記号
* Subscripts and superscripts::  テキストを上付き／下付きにする簡単な構文
* LaTeX fragments::          複雑な数式を簡単に作成する
* Previewing LaTeX fragments::  このsnippetは何と似ているか
* CDLaTeX mode::             数式の入力をスピードアップする
@end menu

@node Special symbols, Subscripts and superscripts, Embedded LaTeX, Embedded LaTeX
@subsection Special symbols
@cindex 数学記号
@cindex 特殊記号
@cindex @TeX{}マクロ
@cindex @LaTeX{}の断片，マークアップのルール
@cindex HTMLのエントリ
@cindex @LaTeX{}のエントリ

あなたは@LaTeX{}マクロをギリシャ文字を表す@samp{\\alpha}や矢印を表す@samp{\\tpo}のような特殊
記号の挿入に使うことができます．これらのマクロは補完が可能で，@samp{\\}まで入力し
，その後に何文字か入力して@kbd{M-@key{TAB}}を押すことで補完が可能です．@LaTeX{}のコードとは違い，
Org-modeは数学の区切り文字を囲まないようなマクロも使うことができます．以下に
例を挙げます:

@example
Angles are written as Geek letters \\alpha, \\beta and \\gamma.@end example

@vindex org-entities
エクスポート時，これらのシンボルはエクスポート先のネイティブフォーマットに変
換されます．HTMLでは@code{\\alpha}のような文字列は@code{&alpha;}にエクスポートされ，@LaTeX{}で
は@code{$\\alpha$}となります．同様に，@code{\\nbsp}はHTMLでは@code{&nbsp;}に，@LaTeX{}では@code{~}とな
ります．もしあなたが記号を単語の中に含めたいのであれば，次のようにします:
@samp{\Aacute@{@}stor}．

非常に多くのエンティティが提供されていて，HTMLと@LaTeX{}からその名前を引き継いでい
ます;完全なリストは@code{org-entities}変数を見てください．@samp{\\-}はシャイなハイフン
として扱われていて，@samp{--}や@samp{---}，@samp{...}は異なる長さのハイフンかドットの集合を
作成するための全て特殊コマンドに変換されます．

もしあなたがUTF-8文字でエンティティを表示したいのなら，以下のコマンド
@footnote{あなたは @code{org-pretty-entities}変数または@code{#+STARTUP}オプション@code{entitiespretty}にデフォルトを設定することができます}:

@table @kbd
@kindex C-c C-x \
@item C-c C-x \
エンティティのUTF-8での表示をトグルします．これはバッファの内容を変更せず，UTF-8の
文字を表示するためにオーバレイを用いています．
@end table

@node Subscripts and superscripts, LaTeX fragments, Special symbols, Embedded LaTeX
@subsection Subscripts and superscripts
@cindex 下付き文字
@cindex 上付き文字

@LaTeX{}と同じように，@samp{^}と@samp{_}が下付き文字と上付き文字を示しています．さらに，それ
らはmath-modeにの区切り文字に組込まずに使うことができます．ASCIIテキストの可
読性の向上のため，複数文字の下付き文字と上付き文字を波括弧で囲む必要はありま
せん(囲んでもかまいませんが)．例

@example
The mass of the sun is M_sun = 1.989 x 10^30 kg.  The radius of
the sun is R_@{sun@} = 6.96 x 10^8 m.
@end example

@vindex org-export-with-sub-superscripts
上付きテキスト，下付きテキストの説明を避けるため，あなたはバックスラッシュを
つけた@samp{^}と@samp{_}を引用できます:
@samp{\\^}と@samp{\\_}です．異なる文脈でしばしば使われるアンダーラインのテキストを書く
なら，常にこれらの下付き文字として解釈するOrg-modeの慣習はあなたのやり方で得
ることができます．この慣習を変更するには@code{org-export-with-sb-superscripts}変数
を設定するか，ファイルに次のように書いてください．

@example
#+OPTIONS: ^:@{@}
@end example

@noindent With this setting, @samp{a_b} will not be interpreted as a
subscript, but @samp{a_@{b@}} will.

@table @kbd
@kindex C-c C-x \
@item C-c C-x \
さらにUTF-8のエンティティを見るため，このコマンドは下付き文字と上付き文字をWYSISYMで
形成する．
@end table

@node LaTeX fragments, Previewing LaTeX fragments, Subscripts and superscripts, Embedded LaTeX
@subsection @LaTeX{}の断片的なコード
@cindex @LaTeX{}の断片的なコード

@vindex org-format-latex-header
シンボルと上付き，下付き，完全な式を越えることが必要です．Org-modeは@LaTeX{}の数式
を含むことができ，各エクスポート先への変換もサポートしています．@LaTeX{}にエクスポ
ートするとき，コードは明らかに残っています．HTMLへエクスポートするとき，Org-modeは
数式@footnote{}の処理と描画のために@uref{http://www.mathjax.org, MathJax library} (@pxref{Math formatting in HTML export})を
呼び出します．最後に，数式表現はブラウザかDocBook文書で描画可能な画像
@footnote{これを行うには，あなたのシステムに@LaTeX{}をインストールする必要があります．そしてまた，@url{http://sourceforge.net/projects/dvipng/}で入手できる@file{dvipng}プログラムも必要です．}へ
と処理されます．

@LaTeX{}のコード片は，特別なマークは全く必要ありません．以下のコード片は@LaTeX{}のソース
コードとして知られています:
@itemize @bullet
@item
あらゆる種類の環境
@footnote{@file{MathJax}が使われている時，@file{MathJax}によって認識されている環境が処理されます．@file{dvipng}を画像の生成に用いる時，@LaTeX{}環境が扱われます．}．
唯一必要なことは@code{\\begin}文は空白のみがある行に表示されることです．
@item
通常の@LaTeX{}の数学の区切り文字内部のテキスト．流通仕様との衝突を避けるために，囲
まれたテキストに最大2つの改行が含まれている場合，@samp{$}文字は数学区切り文字のみ
として認識され，@samp{$}文字がの間に空白がない，そして
@end itemize

@noindent For example:

@example
\begin@{equation@}                          % arbitrary environments,
x=\sqrt@{b@}                                % even tables, figures
\end@{equation@}                            % etc

If $a^2=b$ and \( b=2 \), then the solution must be
either $$ a=+\sqrt@{2@} $$ or \[ a=-\sqrt@{2@} \].
@end example

@noindent
@vindex org-format-latex-options
もしあなたが他の目的にASCIIの区切り文字が必要なら，@LaTeX{}コンバータに邪魔されえる
ことを望まない文字を除外するために@code{org-format-latex-options}オプションを設定
することができます．

@vindex org-export-with-LaTeX-fragments
@LaTeX{}の処理は@code{org-export-with-LaTeX-fragments}変数を設定することができます．デフ
ォルトの設定は@code{t}で，HTMLには@file{MathJax}を用い，DocBookとASCII，@LaTeX{}では処理しま
せん．あなたはこの変数をファイルの冒頭部分に書くことで設定することもできます
:

@example
#+OPTIONS: LaTeX:t          @r{Do the right thing automatically (MathJax)}
#+OPTIONS: LaTeX:dvipng     @r{Force using dvipng images}
#+OPTIONS: LaTeX:nil        @r{Do not process @LaTeX{} fragments at all}
#+OPTIONS: LaTeX:verbatim   @r{Verbatim export, for jsMath or so}
@end example

@node Previewing LaTeX fragments, CDLaTeX mode, LaTeX fragments, Embedded LaTeX
@subsection Previewing LaTeX fragments
@cindex LaTeXのコード片，プレビュー

もしあなたが@file{dvipng}をインストールしているのであれば，@LaTeX{}のコード片は出力され
た組版において画像として処理されます:

@table @kbd
@kindex C-c C-x C-l
@item C-c C-x C-l
ポイント位置の@LaTeX{}コード片の画像プレビューの提供とソースコード上のオーバレイ．
もしポイント位置にコード片がないのであれば，現在のエントリ(2つの見出しの間)の
全てのコード片を処理します．前置引数を付けて呼ばれた時は，サブツリー全体を処
理します．前置引数を2つ付けて呼ばれた時，またはカーソルが最初の見出しの前にあ
る時は，バッファ全体を処理します．
@kindex C-c C-c
@item C-c C-c
オーバレイされたプレビュー画像を消去します．
@end table

@vindex org-format-latex-options
プレビューの外観を変更するために，あなたは@code{org-format-latex-optins}変数をカス
タマイズすることができます．とりわけ，@code{:scale}(そしてHTMLへのエクスポートでは
@code{:html-scale})プロパティは画像のプレビューサイズの調整に使われます．

@node CDLaTeX mode, , Previewing LaTeX fragments, Embedded LaTeX
@subsection CDLa@TeX{}を数学の入力に使う
@cindex CDLa@TeX{}

CDLa@TeX{}モードは環境や数学テンプレートの挿入をスピードアップするためにAUC@TeX{}に似
たメジャーモードである@LaTeX{}モードと併用して通常使われるマイナーモードです．Org-modeで
は，あなたはCDLa@TeX{}モードのいくつかの機能を使用できます．あなたは@url{http://www.astro.uva.nl/~dominik/Tools/cdlatex}か
ら@file{cdlatex.el}と@file{texmathp.el}(最近AUC@TeX{}に追加されました)をインストールする必
要があります．Org-mode中ではCDLa@TeX{}モード自身は使わないでください，代わりにOrg-modeに
一部である，より軽量なバージョンの@code{org-cdlatex-mode}を使ってください．@code{M-x org-cdlatex-mode}を
カレントバッファで実行して有効にするか，全てのOrg-modeファイルで有効するため
に次の設定を行います:

@lisp
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
@end lisp

このモードが有効である時，以下の機能が提供されます(詳細はCD@LaTeX{}モードのドキュメ
ントを参照してください)::
@itemize @bullet
@kindex C-c @{
@item
@kbd{C-c @{}による環境テンプレートの挿入．
@item
@kindex @key{TAB}
カーソルが@LaTeX{}のコード片
@footnote{カーソルがコード片の中にあるときにOrg-modeはテストを行うためのメソッドを持ちます．詳細は@code{org-inside-LaTeX-fragment-p}関数のドキュメントを参照してください．}の
中にある場合，@key{TAB}キーはテンプレートの展開を行います．例えば，@key{TAB}は@code{fr}を
@code{\\frac
@{@}@{@}}に展開しカーソルを最初の括弧に移動します．もう一度@key{TAB}を押すと2つ目の括弧にカーソルが移動します．コード片の外だと，@key{TAB}は行の先頭にある環境の略語を展開します．例えば，もしあなたが行頭に@samp{equ}と書いていて@key{TAB}を押すと，この略語は@code{equation}環境に展開されます．全ての略語を見るには，@kbd{M-x cdlatex-command-help}をタイプしてください．
@item
@kindex _
@kindex ^
@vindex cdlatex-simplify-sub-super-scripts
@LaTeX{}コード片の中で@kbd{_}と@kbd{^}を押すと，それらの文字が括弧のペアと一緒に挿入されま
す．もしあなたが@key{TAB}を括弧から抜け出すために使うなら，また括弧が1文字の文字
かマクロのみを囲っているなら，それらは再び消去されます(@code{cdlatex-simplify-sub-super-script}変
数に依存します)．
@item
@kindex `
Pressing the backquote @kbd{`} followed by a character inserts math macros,
also outside @LaTeX{} fragments.  If you wait more than 1.5 seconds after
the backquote, a help window will pop up.
@item
@kindex '
別の文字に続いてシングルクォート@kbd{'}を押すと，強調やフォントでポイント前のシン
ボルが変更されます．もしシングルクォートを入力した後1.5秒以上待つと，ヘルプウ
ィンドウがポップアップします．文字の変更は@LaTeX{}コード片の中でのみ働きます;
それ以外ではクォートは通常通りの働きをします．
@end itemize

@node Exporting, Publishing, Markup, Top
@chapter Exporting
@cindex エクスポート

org-modeのドキュメントは様々なフォーマットにエクスポートすることができます。
ノートを共有し印刷するには
ASCII形式でエクスポートすることでOrgファイルの読みやすく、シンプルなものが得
られます。
HTMLのエクスポートではノートをウェブに公開できるようになりますし,
XOXOフォーマットは他の様々なアプリケーションでやりとりするうえで確かな基礎と
なります。 @LaTeX{}
のエクスポートでは、org-modeとその構造化された編集機能を使って、容易に @LaTeX{}
のファイルを出力することができます。DocBookのエクスポートでは、Orgファイルを
DocBookのツールを使った様々なフォーマットに変換することが可能です。プロジェク
トの管理では、TaskJuggler形式のエクスポートを使って、ガントリソースチャートを
作成することができます。デッドラインや予約のような時間と関連のあるエントリー
をiCalのようなデスクトップカレンダーに取り込むために
org-modeはiCalendar形式で抽出することもできます。現在、Org-modeはエクスポート
のみをサポートしており、他の異なるフォーマットからインポートすることはできま
せん。

org-modeは、 @code{transient-mark-mode} がオンの時(Emacs
23ではデフォルト)、は選択したリージョンをエクスポートをすることができます。

@menu
* Selective export::         タグを使ってツリーを選択したり排除したりする
* Export options::           ファイル毎のエクスポート設定
* The export dispatcher::    どのようにエクスポートのコマンドにアクセスするか
* ASCII/Latin-1/UTF-8 export::  文字コードの変換を伴う通常のファイルへのエク
スポート
* HTML export::              HTMLへのエクスポート
* LaTeX and PDF export::     @LaTeX{}へのエクスポート、そしてPDFへ変換のプロセス
* DocBook export::           DocBookへのエクスポート
* TaskJuggler export::       TaskJugglerへのエクスポート
* Freemind export::          Freemindのマインドマップへのへエクスポート
* XOXO export::              XOXOへのエクスポート
* iCalendarエクスポート::  iCalendar形式へのエクスポート
@end menu

@node Selective export, Export options, Exporting, Exporting
@section Selective export
@cindex エクスポート。タグによる選択

@vindex org-export-select-tags
@vindex org-export-exclude-tags
エクスポートしたいドキュメントのある部分を選択、または除外する時にタグを使う
ことができます。 その挙動は、
@code{org-export-select-tags} と @code{org-export-exclude-tags}
の二つの変数により決まります。

org-modeはまず最初に @emph{select} タグがバッファにないかチェックします。 あった場
合は,
タグがない全てのツリーは除外されます。もし選択したツリーがサブツリーだった場
合、それより上の階層はエクスポートされるものとして選択されますが,
それより下の階層は選択されません。

@noindent
もし、選択されたタグがなかった場合, バッファにある全ての内容がエクスポートさ
れるものとして選択されるでしょう。

@noindent
最後に,  @emph{exclude} タグでマークされていない全てのサブツリーはエクスポートバッ
ファから除かれるでしょう。

@node Export options, The export dispatcher, Selective export, Exporting
@section Export options
@cindex エクスポートのオプション

@cindex オプションのキーワードの補完
エクスポートする際にはバッファにある特別な行が読みこまれます。 その行には追加
的な情報が含まれており、ファイルの中でどこにでも書くことができます。
@kbd{C-c C-e t} と入力することで、バッファにそのような行をセットで挿入することが
できます。それぞれの行で @samp{#+}
と入力した後に @kbd{M-@key{TAB}} による補完を行ない、 (@pxref{Completion})
キーワードが正しいか、確認してみると良いでしょう。エクスポートと関連のない、
バッファ内の設定の概要については @ref{In-buffer settings} を参照してください。特
に、 @code{#+SETUPFILE}
を使うことによって含めることができる別のファイルの中でよく使われる(エクスポー
トの)オプションを指定できることに注意してください

@table @kbd
@orgcmd{C-c C-e t,org-insert-export-options-template}
エクスポートオプションのテンプレートを挿入します。下の例を見てください。
@end table

@cindex #+TITLE
@cindex #+AUTHOR
@cindex #+DATE
@cindex #+EMAIL
@cindex #+DESCRIPTION
@cindex #+KEYWORDS
@cindex #+LANGUAGE
@cindex #+TEXT
@cindex #+OPTIONS
@cindex #+BIND
@cindex #+LINK_UP
@cindex #+LINK_HOME
@cindex #+EXPORT_SELECT_TAGS
@cindex #+EXPORT_EXCLUDE_TAGS
@cindex #+XSLT
@cindex #+LATEX_HEADER
@vindex user-full-name
@vindex user-mail-address
@vindex org-export-default-language
@example
#+TITLE:       表示されるタイトル (デフォルトはバッファ名)
#+AUTHOR:      著者 (デフォルトは @code{user-full-name} の値)
#+DATE:         @code{format-time-string} で解釈される固定された日付の文字列
#+EMAIL:       彼/彼女のメールアドレス(デフォルトは @code{user-mail-address} の値
)
#+DESCRIPTION: ページの説明, e.g.@: XHTMLのメタタグで使われる。
#+KEYWORDS:    ページのキーワード, e.g.@: XHTMLのメタタグで使われる。
#+LANGUAGE:    HTMLで指定される言語 e.g.@: @samp{en} (@code{org-export-default-language})
#+TEXT:        冒頭に挿入される説明的な文章
#+TEXT:        複数の行に書くことができます。
#+OPTIONS:     H:2 num:t toc:t \n:nil @@:t ::t |:t ^:t f:t TeX:t ...
#+BIND:        lisp-var lisp-val, e.g.@:: org-export-latex-low-levels itemize
               
@r{これらを確認するか, @code{org-export-allow-BIND} を設定すること}
#+LINK_UP:     出力したページにおける ``up'' のリンク先
#+LINK_HOME:   出力したページにおける ``home'' のリンク先
#+LATEX_HEADER: LaTeXのヘッダーで使われる \usepackage@{xyz@} のような余分な行  
#+EXPORT_SELECT_TAGS:   エクスポートするツリーを示すタグ
#+EXPORT_EXCLUDE_TAGS:  エクスポートから除外するツリーを示すタグ
#+XSLT:        FOファイルを生成するのにDocBookのエクスポート機能が使うXSLTの
スタイルシート
@end example

@noindent
OPTIONS行は 以下のようなエクスポートの設定を示すコンパクトな式です。 
@footnote{もし、このように多くのオプションを設定したい時は, それぞれオプション行を作りことができます。} 
@cindex 見出しの階層
@cindex 章の番号
@cindex 目次
@cindex 改行の維持
@cindex HTMLの引用タグ
@cindex 固定幅の段落
@cindex tables
@cindex 上付き、下付き文字を示す @TeX{} のようなシンタックス
@cindex footnotes
@cindex 特別な文字列
@cindex 強調されたテキスト
@cindex @TeX{}マクロ
@cindex @LaTeX{}の断片的なコード
@cindex 著者の情報、エクスポートの中で
@cindex 時間の情報、エクスポートの中で
@example
H:         @r{エクスポートする見出しの階層数}
num:       @r{セクション番号の有無}
toc:       @r{目次の有無, または階層数の上限 (整数)}
\n:        @r{改行を維持するかどうか (うまく動作しない)}
@@:         @r{HTMLの引用タグの有無}
::         @r{固定幅の段落の有無}
|:         @r{表の有無}
^:         @r{上付き、下付き文字を示す @TeX{} のようなシンタックスの有無}
           @r{ "^:@{@}" は @code{a_@{b@}} 解釈されるが、}
           @r{簡潔な @code{a_b} はそのままとなるでしょう。}
-:         @r{特別な文字列を変換するかどうか}
f:         @r{this[1] のような脚注を用いるかどうか}
todo:      @r{TODOキーワードを出力した文字列に含めるかどうか}
pri:       @r{クッキーを優先するかどうか}
tags:      @r{タグの有無, @code{not-in-toc} となるかもしれません。}
<:         @r{DEADLINESのような時間/日付の有無}
*:         @r{強調テキストの有無(太字, イタリック, アンダーライン)}
TeX:       @r{テキスト中のシンプルな @TeX{} マクロの有無 }
LaTeX:     @r{ @LaTeX{} 出力の設定  デフォルトは @code{auto}}
skip:      @r{最初見出しの前にある文章をスキップするかどうか}
author:    @r{著者の名前/e-mailを出力するかどうか}
email:     @r{著者のe-mailを出力するかどうか}
creator:   @r{作者を出力するかどうか}
timestamp: @r{作成した日付を出力するかどうか}
d:         @r{drawerを出力するかどうか}
@end example
@noindent
これらのオプションはHTML、 @LaTeX{} の両方のエクスポートに影響します。 @code{TeX} と @code{LaTeX}
のオプションを除き @LaTeX{} のエクスポートをするのに、それぞれ @code{t} 、または @code{nil} と
なります。

 @code{org-export-html-pre/postamble} を @code{t} とするとHTMLにエクスポートする時に
@code{author} 、 @code{email} 及び @code{creator} の値は上書きされるでしょう。 代わりに
@code{org-export-html-pre/postamble-format} が用いられます。

このようなオプションの初期値は変数のセットで与えられます。 そのような変数は、
OPTIONSのキーと公開するキーにも対応しています。
(@pxref{Project alist}), @code{org-export-plist-vars} の定数を見てください。

エクスポートのコマンドを呼びだす前に、 @kbd{C-c @@} で選択した単一のサブツリーをエクスポートする時、そのサブツリーは、
@code{EXPORT_FILE_NAME} 、 @code{EXPORT_TITLE} 、 @code{EXPORT_TEXT} 、
@code{EXPORT_AUTHOR} 、 @code{EXPORT_DATE} 、 そして @code{EXPORT_OPTIONS}
プロパティでエクスポートの設定を無視することができます。

@node The export dispatcher, ASCII/Latin-1/UTF-8 export, Export options, Exporting
@section The export dispatcher
@cindex コマンド選択画面、エクスポートコマンドのための

全てのエクスポートコマンドはエクスポートコマンド選択画面から選ぶことができま
す。
コマンド選択画面では、コマンドを特定するための追加的なキーの入力を促されます
。通常、ファイルの全ての内容がエクスポートされますが、もしアクティブなリージ
ョンに一つのアウトラインツリーが含まれていた場合,
まず、見出しがドキュメントのタイトルとして扱われ、サブツリーがエクスポートさ
れます。

@table @kbd
@orgcmd{C-c C-e,org-export}
@vindex org-export-run-in-background
エクスポート、または公開のコマンド選択画面です。エクスポート、または公開のコ
マンドを起動するのに必要なキーがヘルプウィンドウに表示されます。
前置引数として、入力すると、直接エクスポート機能となります。二重の前置引数 @kbd{C-u C-u}
を入力することで、コマンドは別のEmacsプロセスにおいてバックグラウンドで実行さ
れます。
@footnote{このような挙動をデフォルトにするには、 @code{org-export-run-in-background}変数を設定してください.}.  @orgcmd{C-c C-e v,org-export-visible} @kbd{C-c C-e} のように動
作しますが、 今見えている文章だけがエクスポートされます。
(i.e.@: アウトライン表示により、隠されていない文章).  @orgcmd{C-u C-u C-c C-e,org-export}
@vindex org-export-run-in-background
エクスポート機能が呼ばれますが、 @code{org-export-run-in-background} の設定と逆の
挙動となります。 i.e.@:
動いていないバックグラウンドプロセスを呼びだしたり, 現在のEmacsのプロセスで強
制的に実行したりします。
@end table

@node ASCII/Latin-1/UTF-8 export, HTML export, The export dispatcher, Exporting
@section ASCII/Latin-1/UTF-8 export
@cindex ASCII形式へのエクスポート
@cindex Latin-1でのエクスポート
@cindex UTF-8でのエクスポート

ASCII形式へのエクスポートは、org-modeのファイルをASCIIのみが含まれる、シンプ
ルで読みやすい形に書き出します。Latin-1及びUTF-8でのエクスポートでは特殊な文
字やシンボルをそれらのエンコードで出力します。

@cindex region, active
@cindex アクティブなリージョン
@cindex transient-mark-mode
@table @kbd
@orgcmd{C-c C-e a,org-export-as-ascii}
@cindex プロパティ、EXPORT_FILE_NAME
ASCII形式のファイルをエクスポートします。 Orgファイルを @file{myfile.org} だとする
と、ASCII形式のファイルは
@file{myfile.txt} となるでしょう。 そのファイルは警告なしに上書きされます。もしア
クティブなリージョン
@footnote{@code{transient-mark-mode} が有効である必要があります。} があった場合,
そのリージョンのみがエクスポートされます。 選択したリージョンが一つのツリー 
@footnote{現在のサブツリーの選択するには、 
@kbd{C-c @@} と入力してください。}を含んでいた場合、そのツリーの見出しがドキュメントのタイトルとなるでしょう. 見出しがあるか、または
@code{EXPORT_FILE_NAME} プロパティを継承していた場合、 エクスポートする際にはその名前が使われるでしょう。
@orgcmd{C-c C-e A,org-export-as-ascii-to-buffer} 一時的なバッファに出力し、ファイル
を作成しません。
@orgcmd{C-c C-e n,org-export-as-latin1} @xorgcmd{C-c C-e N,org-export-as-latin1-to-buffer} 上
に示したコマンドのような動作をしますが,
Latin-1でエンコーディングされたものが出力されます。  @orgcmd{C-c C-e u,org-export-as-utf8}
@xorgcmd{C-c C-e U,org-export-as-utf8-to-buffer} 上に示したコマンドのような動作をしま
すが,
UTF-8でエンコーディングされたものが出力されます。
@item C-c C-e v a/n/u
文書の中で、バッファで表示されている部分だけを出力する。
@end table

@cindex （外部出力に用いる）ヘッドラインレベル
エクスポートされたものでは、 最初の3つのアウトラインの階層が一般的な文書の構
造と見なされて、見出しとなります。
それ以外の階層はアイテムのリストとしてエクスポートされます。 この違いを異なる
階層に変えたい場合は、 前置引数で、その階層を指定します。  例えば、

@example
@kbd{C-1 C-c C-e a}
@end example

@noindent
は 最初の階層のみを見出しとし、それ以外はアイテムとなります。見出しがアイテム
に変更された時、
見出し後の文章のインデントは、アイテムの下にうまく調和するように変更されます
。
この変更は、最初の本文が全体のインデントを示しているという仮定のもとで実行さ
れます。これよりも大きなインデントは、最初の文章との相対的なレイアウトを維持
するように調整されます。最初の行より少ないインデントであれば,
左寄せします。

@vindex org-export-ascii-links-to-notes
次の見出しの前にあるリンクは脚注のような形でエクスポートされます。その脚注は
、次の見出しの前に項目名とリンクがエクスポートされます。詳しい内容と他のオプ
ションについては、変数
@code{org-export-ascii-links-to-notes} を見てください。

@node HTML export, LaTeX and PDF export, ASCII/Latin-1/UTF-8 export, Exporting
@section HTML export
@cindex HTML export

org-modeには多くのHTMLのフォーマットに対応したHTML (XHTML 1.0 準拠)エクスポー
ト機能があります。それは、John
Gruberが開発した @emph{markdown} 言語に似ていますが、org-modeではさらにテーブルも
サポートしています。

@menu
* HTML Export commands::     HTMLへのエクスポートをどうやって起動するか
* Quoting HTML tags::        Org-modeにHTMLを直接書き込む
* Links in HTML export::     リンクはどのように解釈されフォーマットされるか
* Tables in HTML export::    テーブルのフォーマットをどのように修正するか
* Images in HTML export::    HTMLの出力にどのように図形を挿入するか
* Math formatting in HTML export::  web上でも美しい数式
* Text areas in HTML export::  例示を表現するための別の方法
* CSS support::              出力の見栄えを変更する
* JavaScript support::       webブラウザ上で説明や折りたたみを表示する
@end menu

@node HTML Export commands, Quoting HTML tags, HTML export, HTML export
@subsection HTMLエクスポートのコマンド

@cindex region, active
@cindex アクティブなリージョン
@cindex transient-mark-mode
@table @kbd
@orgcmd{C-c C-e h,org-export-as-html}
@cindex プロパティ、EXPORT_FILE_NAME
HTMLファイル@file{myfile.html}をエクスポートします。Orgファイル@file{myfile.org}をエク
スポートすると、ASCII形式のファイルは@file{myfile.html}となるでしょう。
そのファイルは警告なしに上書きされます。もしアクティブなリージョン @footnote{@code{transient-mark-mode}
が有効である必要があります。} があった場合, そのリージョンのみがエクスポート
されます。 選択したリージョンが一つのツリー
@footnote{現在のサブツリーの選択するには、 @kbd{C-c @@}
と入力してください。}を含んでいた場合、そのツリーの見出しがドキュメントのタイ
トルとなるでしょう. 見出しがあるか、または
@code{EXPORT_FILE_NAME} プロパティを継承していた場合、 エクスポートする際にはその名前が使われるでしょう。@orgcmd{C-c C-e b,org-export-as-html-and-open} HTMLファイルをエクスポートし、そのファイルをブラウザで開きます。
@orgcmd{C-c C-e H,org-export-as-html-to-buffer} 一時的なバッファに出力し、ファイルを
作成しません。
@orgcmd{C-c C-e R,org-export-region-as-html}
アクティブなリージョンを一時的なバッファに出力します。前置引数があるとヘッダ
ーとフッターを出力せずに、リージョンのHTMLのみを出力します。これはカットアン
ドペーストで編集する際に便利です
@item C-c C-e v h/b/H/R
文書の中で、バッファで表示されている部分だけを出力する。
@item M-x org-export-region-as-html
org-modeの記法が使われているという前提でリージョンをHTMLに変換します。これは
どのバッファでも起動するグローバルなコマンドです。
@item M-x org-replace-region-by-HTML
org-modeの記法が使われているという前提でアクティブなリージョンをHTMLに変換し
ます。
@end table

@cindex （外部出力に用いる）ヘッドラインレベル
エクスポートされたものでは、 最初の3つのアウトラインの階層が一般的な文書の構
造と見なされて、見出しとなります。
それ以外の階層はアイテムのリストとしてエクスポートされます。 この違いを異なる
階層に変えたい場合は、 前置引数で、その階層を指定します。  例えば、

@example
@kbd{C-2 C-c C-e b}
@end example

@noindent
この場合２番目のレベルまでを見出しとして取り扱い、それ以外は項目として取り扱
います。

@node Quoting HTML tags, Links in HTML export, HTML Export commands, HTML export
@subsection Quoting HTML tags

HTMLにエクスポートする際、プレインな@samp{<} and @samp{>}は常に
@samp{&lt;}と@samp{&gt;}に変換されます。もし単純なHTMLタグをそのまま含めたい時は, @samp{@@<b>bold text@@</b>}のようにma@samp{@@}でマークします。これは単純なHTMLタグでしか動作しませんので注意してください。
エクスポートするファイルにさらに広範囲なHTMLをそのままコピーするには次のよう
なブロックが使えます。

@cindex #+HTML
@cindex #+BEGIN_HTML
@example
#+HTML: エクスポートするHTMLコード
@end example

@noindent or
@cindex #+BEGIN_HTML

@example
マーカー間の全ての行は文字どおり出力されます。
@end example


@node Links in HTML export, Tables in HTML export, Quoting HTML tags, HTML export
@subsection Links in HTML export

@cindex リンク、出力するHTMLの
@cindex 内部リンク、出力するHTMLの
@cindex 外部リンク、出力するHTMLの
内部リンク(@pxref{Internal links})
エクスポートされHTMLでも同様に動作します。これには、ラジオターゲット(@pxref{Radio targets})に
より生成された自動リンクも含まれます。もしターゲットとなるファイルが公開され
るOrgファイルを示す同じ相対パス上にあっても、リンクは外部リンクとして動作する
でしょう。他の@file{.org}ファイルへのリンクは、HTMLにエクスポートされたものにも同
じ相対パスでリンクされたファイルがある、という前提で、リンクに変換されます。
@samp{id:}リンクはファイル間で特定のエントリーにジャンプするのに使われます。リンク
するファイル、公開ディレクトリでの公開に関する情報については、@ref{Publishing links}参
照してください。

リンクの属性を記述したい時は、特別な@code{#+ATTR_HTML}行を用いることができます。
この行は、@code{<a>}タグや@code{<img>}タグを追加する属性を定義するために使われます。以
下の例では、リンクに@code{title}と@code{style}の属性を設定しています。

@cindex #+ATTR_HTML
@example
#+ATTR_HTML: title="The Org-mode homepage" style="color:red;"
[[http://orgmode.org]]
@end example

@node Tables in HTML export, Images in HTML export, Links in HTML export, HTML export
@subsection Tables
@cindex テーブル、HTMLの
@vindex org-export-html-table-tag

org-modeの表は、@code{org-export-html-table-tag}で定義されているテーブルのタグを使
ってHTMLにエクスポートされます。
デフォルトの設定では、セルの罫線とフレームがない状態でテーブルが出力されます
。 個々のテーブルでその設定を変えたい場合は,
次のような行をテーブルの前に記述してください。

@cindex #+CAPTION
@cindex #+ATTR_HTML
@example
#+CAPTION: これはセルの周囲に線が引かれた表です。
#+ATTR_HTML: border="2" rules="all" frame="all"
@end example

@node Images in HTML export, Math formatting in HTML export, Tables in HTML export, HTML export
@subsection Images in HTML export

@cindex 画像、HTMLの中でインライン
@cindex HTMLのインライン画像
@vindex org-export-html-inline-images
HTMLのエクスポートではOrgファイルにリンクがある画像をインライン表示することが
できます。
その画像はリンクされているクリック可能な部分として扱われます。
デフォルトでは、
@footnote{ただし、@code{org-export-html-inline-images}を確認してください。},
リンクにdescriptionがなければ、画像はインライン表示されます。 つまり、
@samp{[[file:myimg.jpg]]}はインライン表示されますが、@samp{[[file:myimg.jpg][the image]]}は
が画像にリンクされる@samp{the image}というテキストリンクが作られます。
descriptionの部分が@code{file:}リンクか画像を示す@code{http:}のURLの場合,
画像はインラインに表示され、画像がクリックされると活性化されます。例えば、リ
ンク先に高解像度の画像があるサムネイルを追加したい場合、次のように書くと良い
でしょう。

@example
[[file:highres.jpg][file:thumb.jpg]]
@end example

インライン画像に属性を追加したい場合は、@code{#+ATTR_HTML}を使います。
次の例では、テキストでの見やすさとアクセスのしやすさを考慮して@code{alt}属性と@code{title}属
性を指定して、alignを右にしています。

@cindex #+CAPTION
@cindex #+ATTR_HTML
@example
#+CAPTION: A black cat stalking a spider
#+ATTR_HTML: alt="cat/spider image" title="Action!" align="right"
[[./img/a.jpg]]
@end example

@noindent
@code{http}のアドレスも使うことができます。

@node Math formatting in HTML export, Text areas in HTML export, Images in HTML export, HTML export
@subsection Math formatting in HTML export
@cindex MathJax
@cindex dvipng

@LaTeX{}の数学用スニペット(@pxref{LaTeX fragments})は二つの異なる方法でHTMLに表示される。
デフォルトではorg-modeをインストールすると、すぐに@uref{http://www.mathjax.org, MathJax system}が
使えるようになっています。
@code{http://orgmode.org}は@file{MathJax}がOrg-modeユーザ、小さなアプリケーション、そしてテストにとって便利だと考えているからです。

@b{もし特定のページで、あるいは常に@file{MathJax}を使うのであれば、私達のサーバでの読みこみを減らすためにMathJaxをあなたのサーバにインストール
@footnote{インストール方法については、MathJaxのウェブサイトにあります。@uref{http://www.mathjax.org/resources/docs/?installation.html}を参照してください。}
してください。}
@file{MathJax}について設定するには、@code{org-export-html-mathjax-options}を使うか、バ
ッファに次のような行を挿入してください。

@example
#+MATHJAX: align:"left" mathml:t path:"/MathJax/MathJax.js"
@end example

@noindent See the docstring of the variable
この行の各パラメータの意味の知るための@code{org-export-html-mathjax-options}

望むのであれば、@LaTeX{}を小さな画像に変換してブラウザ上のページに挿入することもで
きます。MathJaxが有用である前には、これがorg-modeでのデフォルトの方法でした。
この方法を用いるには、あなたのシステムで@file{dvipng}プログラムが利用できる状態で
ある必要があります。この方法は以下のような行を追加することでも有効になります
。

@example
#+OPTIONS: LaTeX:dvipng
@end example

@node Text areas in HTML export, CSS support, Math formatting in HTML export, HTML export
@subsection Text areas in HTML export

@cindex テキストエリア、HTMLの中の
コードサンプルをHTMLにして公開する方法として、テキストエリアを使う方法があり
ます。何かのアプリケーションに貼りつける前であれば、そのコードサンプルは編集
することができます。@code{example}ブロックか@code{src}ブロックに@code{-t}スイッチが付加され
ることでテキストエリアに変換されます。
このスイッチを使うことで、シンタックス、ラベルのハイライト、行番号に関するオ
プションが無効になります。
@code{-h}と@code{-w}を使うことがあるかもしれません。それらのスイッチはテキストエリアの高さと幅を特定するもので、デフォルトでは高さがexampleブロックの行数で幅は80となります。設定は、例えば以下のようになります。

@example
#+BEGIN_EXAMPLE -t -w 40
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_EXAMPLE
@end example


@node CSS support, JavaScript support, Text areas in HTML export, HTML export
@subsection CSS support
@cindex CSS、HTMLエクスポートに関する
@cindex HTMLエクスポート、CSS

@vindex org-export-html-todo-kwd-class-prefix
@vindex org-export-html-tag-class-prefix
エクスポートするファイルには、スタイルに関する情報を含めることができます。HTMLエ
クスポート機能には、文章のパーツを適切に表示するために次に示す特別なCSSクラス

@footnote{TODOキーワードやタグにCSSが適用されるとコンフリクトを起こします。@code{org-export-html-todo-kwd-class-prefix}と@code{org-export-html-tag-class-prefix}を使って、それらをユニークにしてください。}が
あります。見出しやテーブルなどの標準的なクラスに加えて、それら特別なCSSクラス
も変更することができます。
@example
p.author            @r{著者の情報、email含む}
p.date              @r{公開日}
p.creator           @r{作成情報, org-modeのバージョン}
.title              @r{文章のタイトル}
.todo               @r{DONEとなっていないTODOキーワード}
.done               @r{DONEキーワード、DONEと扱われる全てのキーワードが対象}
.WAITING            
@r{各TODOキーワードはその名前のクラス名も用いることができる}
.timestamp          @r{タイムスタンプ}
.timestamp-kwd      @r{SCHEDULED等のタイムスタンプに関連するキーワード}
.timestamp-wrapper  @r{SCHEDULED等のキーワードとタイムスタンプ全体}
.tag                @r{見出し中のタグ}
._HOME              @r{各タグはその名前のクラス名も用いることができる("@"は"_"に置き換えられる)}
.target             @r{リンクのターゲット}
.linenr             @r{コード中の行番号}
.code-highlighted   @r{参照されコード行のハイライト}
div.outline-N       @r{深さレベルNのdiv要素(見出しとテキスト)}
div.outline-text-N  @r{深さレベルNのテキスト部分のdiv要素}
.section-number-N   @r{深さレベルNの見出しの番号。各レベルで異なる}
div.figure          @r{インライン画像のフォーマット方法}
pre.src             @r{ソースコードブロックのフォーマット方法}
pre.example         @r{例示ブロック}
p.verse             @r{verseブロック}
div.footnotes       @r{脚注の見出し}
p.footnote          @r{脚注定義の文章、脚注を含む}
.footref            @r{脚注の参照番号(常に<sup>となる)}
.footnum            @r{脚注定義中の番号(常に<sup>となる)}
@end example

@vindex org-export-html-style-default
@vindex org-export-html-style-include-default
@vindex org-export-html-style
@vindex org-export-html-extra
@vindex org-export-html-style-default
エクスポートされたファイルは、基礎的な方法で定義されたコンパクトなスタイル
@footnote{このスタイルは@code{org-export-html-style-default}で定義されており、変更できません。
この初期設定を無効にするには@code{org-export-html-style-include-default}を修正して
ください。}が含まれています。この設定は上書きされるかもしれませんし、
@code{org-export-html-style}
(Org-wideの設定に使われます)や@code{org-export-html-style-extra}
(ファイルごとの設定のような詳細な設定に使われます。)を使って追加されるかもし
れません。後者の変数をファイルごとに設定するには、次のように行ないます。

@cindex #+STYLE
@example
#+STYLE: <link rel="stylesheet" type="text/css" href="stylesheet.css" />
@end example

@noindent
長いスタイルの定義には複数行で記述することもできます。外部ファイルを参照せず
に@code{<style>}
@code{</style>}セクションに直接記述してください。

サブツリーにスタイルを追加するには, ツリーにクラスを適用する@code{:HTML_CONTAINER_CLASS:} プ
ロパティを
使います。個々の見出しにCSSスタイルを適用するには、@code{:CUSTOM_ID:}プロパティで
指定されるIDを使うことができます。

@c FIXME: More about header and footer styles
@c FIXME: Talk about links and targets.

@node JavaScript support, , CSS support, HTML export
@subsection ウェブページの表示に関するJavaScriptのサポート

@cindex Rose, Sebastian
Sebastian
Roseは、org-modeが生成したHTMLファイルに関するウェブエクスペリエンスを拡張す
るためにデザインされたJavascriptプログラムを書きました。このプログラムを使う
ことで、異なる二つの方法で大きなファイルを見ることができます。一つめは@emph{Info}の
ようなモードで、それぞれの章は別々に表示され、@kbd{n}キーと@kbd{p}キーで操作できます
。(他のキーでも操作できます。利用できるキーの概要を知るには、@kbd{?}を入力してく
ださい。)。二つめは、org-modeがEmacsで提供するような折りたたまれたスタイルで
す。
このスクリプトは、@url{http://orgmode.org/org-info.js}で利用できます。ドキュメン
トについては、@url{http://orgmode.org/worg/code/org-info-js/}にあります。このスク
リプトは私達のサイトでホスティングしていますが、何度も使う場合は、@url{orgmode.org}に
あるものを使わずにあなたのサーバにコピーしたものを使う方を選択するかもしれせ
ん。

このスクリプトを使うには、@file{org-jsinfo.el}がロードされているか、確認する必要が
あります。デフォルトでは、ロードされるようになっていますが、@kbd{M-x customize-variable @key{RET} org-modules
@key{RET}}と入力して、確かにロードされている確認してください。このプログラムを使
えるようにするには、次のような行をOrgファイルに追加するだけです。

@cindex #+INFOJS_OPT
@example
#+INFOJS_OPT: view:info toc:nil
@end example

@noindent
ファイル中にこの行が見つかると、HTMLのヘッダーは自動的にこのスクリプトを起動
させるのに必要なコードを自動的に追加します。以上のような行を使うと、次のよう
なオプションを設定できます。

@example
path:    @r{スクリプトのパス。デフォルトでは、@url{http://orgmode.org/org-info.js} }
         
@r{を使うようになっていますが、ローカルにコピーしたものを使いたい場合は}
         @r{@samp{../scripts/org-info.js}のようなパスを使ってください。}
view:    @r{ウェブサイトを最初に開いた時の表示。可能な値は次のとおり:}
         info      
@r{一つのページに一つのセクションが表示されるInfoのようなインターフェイス}
         overview  
@r{最初はトップレベルのみが表示される折りたたみインターフェイス}
         content   @r{全ての見出しが見える状態の折りたたみインターフェイス}
         showall   
@r{全ての見出しと文章が見える状態の折りたたみインターフェイス}
sdepth:  @r{infoや折りたたみモードで独立して表示されるセクションの}
         @r{最大の見出しレベル。デフォルトでは@code{org-export-headline-levels}}
         @r{(= @code{#+OPTIONS}の中の@code{H}スイッチ)の値が使われる。}
         @r{もし、@code{org-export-headline-levels}の値より小さかった場合、}
         @r{info/折りたたみ のセクションは小見出しまで含まれます。}
toc:     @r{目次表示の有無}
         @r{@code{nil}としても、@kbd{i}を入力することで目次は表示されます。}
tdepth:  @r{目次の深さ。デフォルトでは、@code{org-export-headline-levels}}
         @r{@code{org-export-with-toc}の値が用いられます。}
ftoc:    @r{CSSによって、目次の場所を指定するかどうか。}
         @r{「yes」の場合は、セクションとして表示されなくなります。}
ltoc:    @r{それぞれのセクションにショートコンテンツを設置するかどうか。}
         
@r{セクションの冒頭にショートコンテンツを設置する場合は値を@code{above}とします。}
mouse:   @r{マウスを見出しの上に移動させた時にハイライトさせます。}
         
@r{@samp{underline} (default)か、@samp{#cccccc}のように背景色が指定できます。}
buttons: 
@r{ビューの変更をトグルさせるボタンを様々なところに設置するかどうか。}
         @r{@code{nil}の場合は、(デフォルト)、ボタンが一つだけ表示されます。}
@end example
@noindent
@vindex org-infojs-options
@vindex org-export-html-use-infojs
@code{org-infojs-options}を変更することで、これらのオプションの初期値を変更することができます。このスクリプトを常にページに適用させたい場合は、@code{org-export-html-use-infojs}を変更してください。

@node LaTeX and PDF export, DocBook export, HTML export, Exporting
@section @LaTeX{}とPDFのエクスポート
@cindex @LaTeX{}のエクスポート
@cindex PDF出力
@cindex Guerry, Bastien

org-modeには、Bastien
Guerryによって書かれた@LaTeX{}のエクスポート機能があります。追加的な処理と合わせて
、
@footnote{デフォルトのLaTeX出力は、pdftexまたはlatexにより出力されるよう設計されています。それには、xetexや恐らくluatexと互換性のないパッケージが含まれています。@code{org-export-latex-default-packages-alist}や@code{org-export-latex-packages-alist}を参照してください。},こ
のバックエンドはPDFの出力にも使われています。@LaTeX{}の出力は、リンクと相互参照の実
装に@file{hyperref}を使っているので、出力されたPDFファイルは完全にリンクされている
でしょう。セクションの階層に合わせて正しく出力されるためには、orgファイルは適
切に構造化されていないといけないので注意してください。

@menu
* LaTeX/PDF export commands::  どのキーでどのコマンドが起動するのか
* Header and sectioning::    ファイル構造を出力するための準備
* Quoting LaTeX code::       @LaTeX{}コードの統合
* Tables in LaTeX export::   @LaTeX{}に表をエクスポートする際のオプション
* Images in LaTeX export::   @LaTeX{}の出力に図を挿入する方法
* Beamerクラスのエクスポート::  ファイルをプレゼンテーション資料に変える
@end menu

@node LaTeX/PDF export commands, Header and sectioning, LaTeX and PDF export, LaTeX and PDF export
@subsection @LaTeX{}エクスポートのコマンド

@cindex region, active
@cindex アクティブなリージョン
@cindex transient-mark-mode
@table @kbd
@orgcmd{C-c C-e l,org-export-as-latex}
@cindex プロパティ、EXPORT_FILE_NAME
@LaTeX{}ファイル@file{myfile.tex}を出力します。Orgファイルに対して@file{myfile.org},、ASCIIフ
ァイルは@file{myfile.tex}となるでしょう。そのファイルは警告なしに上書きされます。
アクティブなリージョン
@footnote{@code{transient-mark-mode}が有効である必要があります。}があれば、そのリージョンのみが出力されるでしょう。選択したリージョンが一
つのツリー@footnote{現在のサブツリーを選択するには、
@kbd{C-c @@}を入力してください。}であった場合、ツリーの見出しがタイトルになります。ツリーの見出しのエントリーが@code{EXPORT_FILE_NAME}プロパティを継承、または持っている場合、エクスポートされる際には、その名前が使われるでしょう。@orgcmd{C-c C-e L,org-export-as-latex-to-buffer} 一時バッファに出力します。ファイルを作りません。
@item C-c C-e v l/L
文書の中で、バッファで表示されている部分だけを出力する。
@item M-x org-export-region-as-latex
Org-modeの記法が使われているという前提でリージョンを@LaTeX{}に変換します。これはど
のバッファでも起動するグローバルなコマンドです。
@item M-x org-replace-region-by-latex
アクティブなリージョンを(Org-modeの記法が使われている前提で)@LaTeX{}コードに置き変
えます。@orgcmd{C-c C-e p,org-export-as-pdf} @LaTeX{}に出力し、PDFにも変換します。@orgcmd{C-c C-e d,org-export-as-pdf-and-open} @LaTeX{}に
出力し、PDFにも変換します。その際出力されたPDFファイルを開きます。
@end table

@cindex （外部出力に用いる）ヘッドラインレベル
@vindex org-latex-low-levels
エクスポートされたものでは、 最初の3つのアウトラインの階層が一般的な文書の構
造と見なされて、見出しとなります。
それ以外の階層は概要のリストとしてエクスポートされます。エクスポート機能では
、@code{org-latex-low-levels}を変更することで、この設定を無視、または変更すること
ができます。

この違いを異なる階層で変えたい場合は、 前置引数で、その階層を指定します。 例
えば、

@example
@kbd{C-2 C-c C-e l}
@end example

@noindent
この場合２番目のレベルまでを見出しとして取り扱い、それ以外は項目として取り扱
います。

@node Header and sectioning, Quoting LaTeX code, LaTeX/PDF export commands, LaTeX and PDF export
@subsection 見出しと構造の分割
@cindex @LaTeX{}クラス
@cindex @LaTeX{}の構造の分割
@cindex @LaTeX{}の見出し
@cindex 見出し、LaTeXファイルのための
@cindex 構造の分割、LaTeXエクスポートのための

デフォルトでは、@LaTeX{}の出力には@code{article}クラスが使われます。

@vindex org-export-latex-default-class
@vindex org-export-latex-classes
@vindex org-export-latex-default-packages-alist
@vindex org-export-latex-packages-alist
@cindex #+LATEX_HEADER
@cindex #+LATEX_CLASS
@cindex #+LATEX_CLASS_OPTIONS
@cindex property, LATEX_CLASS
@cindex property, LATEX_CLASS_OPTIONS
クラスは@code{org-export-latex-default-class}の値を変更することで、全体的に変更す
ることもできますし、ファイル中に@code{org-export-latex-default-class}のようなオプ
ションを追加することで、局所的に変更することもできます。@code{:LaTeX_CLASS:}プロパ
ティを使えば、エクスポートするリージョンにそのツリー(サブツリー)のみが含まれ
ていた場合にクラスを指定できます。クラスは、@code{org-export-latex-classes}にリス
トアップされてます。
この変数は、各クラス
@footnote{@code{org-export-latex-default-packages-alist}と@code{org-export-latex-packages-alist}が接合されたものです。}の見出しテンプレートを定義し、各クラスの構造の分割につい
て定義します。クラス自体についても定義されます。@code{#+LaTeX_CLASS_OPTIONS}、また
は@code{LaTeX_CLASS_OPTIONS}プロパティは@code{\documentclass}マクロのオプションを指定し
ます。見出しに
@code{#+LATEX_HEADER: \usepackage@{xyz@}}を追加して同様のことをすることもできます。詳しい情報については、@code{org-export-latex-classes}のドキュメント文字列を参照してください。

@node Quoting LaTeX code, Tables in LaTeX export, Header and sectioning, LaTeX and PDF export
@subsection @LaTeX{}コードの引用

@ref{Embedded LaTeX}で記述された埋め込まれた@LaTeX{}は、@LaTeX{}に正しく挿入されます。図の相
互参照を生成するために、
@samp{\ref@{LABEL@}}のようなシンプルなマクロが含まれます。さらに、次のような行を追加することで、@LaTeX{}エクスポートの際に表示だけしてほしい特別なコードを追加することができます。

@cindex #+LaTeX
@cindex #+BEGIN_LaTeX
@example
#+LaTeX: エクスポートする際に文字のまま、出力されるLaTeX code
@end example

@noindent or
@cindex #+BEGIN_LaTeX

@example
#+BEGIN_LaTeX
マーカの間にある全ての行は文字がそのまま出力されます。
#+END_LaTeX
@end example


@node Tables in LaTeX export, Images in LaTeX export, Quoting LaTeX code, LaTeX and PDF export
@subsection @LaTeX{}エクスポートにおける表
@cindex tables, in @LaTeX{} export

@LaTeX{}で表を出力する際に、ラベルと表題を指定することができます (@pxref{Images and tables})、
@code{ATTR_LaTeX}行を使うことで、表に関する@code{longtable}環境を呼び出すこともできます
。複数のページにまたがる表や、デフォルトの表の環境を@code{table}から@code{table*}にする
ため、またはデフォルトの内部tabular環境を@code{tabularx}や@code{tabulary}にしたい時にも
@code{ATTR_LaTeX}行は使われます。つまり、文字の配置や
(@code{tabularx}や@code{tabulary}を使って)幅を次のようにして設定できます。:

@cindex #+CAPTION
@cindex #+LABEL
@cindex #+ATTR_LaTeX
@example
#+CAPTION: A long table
#+LABEL: tbl:long
#+ATTR_LaTeX: longtable align=l|lp@{3cm@}r|l
| ..... | ..... |
| ..... | ..... |
@end example

@code{tabulary}を使って、複数のセルにまたがる表を指定することもできます。

@cindex #+CAPTION
@cindex #+LABEL
@cindex #+ATTR_LaTeX
@example
#+CAPTION: A wide table with tabulary
#+LABEL: tbl:wide
#+ATTR_LaTeX: table* tabulary width=\textwidth
| ..... | ..... |
| ..... | ..... |
@end example

@node Images in LaTeX export, Beamerクラスのエクスポート, Tables in LaTeX export, LaTeX and PDF export
@subsection @LaTeX{}エクスポートにおける画像
@cindex 画像、@LaTeX{}に中のインライン
@cindex @LaTeX{}の中のインライン画像

Images that are linked to without a description part in the link, like
@samp{[[file:img.jpg]]} or @samp{[[./img.jpg]]} will be inserted into the
PDF output file resulting from @LaTeX{} processing.  Org will use an
@code{\includegraphics} macro to insert the image.  If you have specified a
caption and/or a label as described in @ref{Images and tables}, the figure
will be wrapped into a @code{figure} environment and thus become a floating
element.  You can use an @code{#+ATTR_LaTeX:} line to specify the various
options that can be used in the optional argument of the
@code{\includegraphics} macro.  To modify the placement option of the
@code{figure} environment, add something like @samp{placement=[h!]} to the
Attributes.

If you would like to let text flow around the image, add the word
@samp{wrap} to the @code{#+ATTR_LaTeX:} line, which will make the figure
occupy the left half of the page.  To fine-tune, the @code{placement} field
will be the set of additional arguments needed by the @code{wrapfigure}
environment.  Note that if you change the size of the image, you need to use
compatible settings for @code{\includegraphics} and @code{wrapfigure}.

@cindex #+CAPTION
@cindex #+LABEL
@cindex #+ATTR_LaTeX
@example
#+CAPTION:    The black-body emission of the disk around HR 4049
#+LABEL:      fig:SED-HR4049
#+ATTR_LaTeX: width=5cm,angle=90
[[./img/sed-hr4049.pdf]]

#+ATTR_LaTeX: width=0.38\textwidth wrap placement=@{r@}@{0.4\textwidth@}
[[./img/hst.png]]
@end example

If you need references to a label created in this way, write
@samp{\ref@{fig:SED-HR4049@}} just like in @LaTeX{}.

@node Beamerクラスのエクスポート, , Images in LaTeX export, LaTeX and PDF export
@subsection Beamerクラスのエクスポート

The LaTeX class @file{beamer} allows production of high quality
presentations using LaTeX and pdf processing.  Org-mode has special support
for turning an Org-mode file or tree into a @file{beamer} presentation.

When the LaTeX class for the current buffer (as set with
@code{#+LaTeX_CLASS: beamer}) or subtree (set with a @code{LaTeX_CLASS}
property) is @code{beamer}, a special export mode will turn the file or tree
into a beamer presentation.  Any tree with not-too-deep level nesting should
in principle be exportable as a beamer presentation.  By default, the
top-level entries (or the first level below the selected subtree heading)
will be turned into frames, and the outline structure below this level will
become itemize lists.  You can also configure the variable
@code{org-beamer-frame-level} to a different level---then the hierarchy
above frames will produce the sectioning structure of the presentation.

A template for useful in-buffer settings or properties can be inserted into
the buffer with @kbd{M-x org-insert-beamer-options-template}.  Among other
things, this will install a column view format which is very handy for
editing special properties used by beamer.

You can influence the structure of the presentation using the following
properties:

@table @code
@item BEAMER_env
The environment that should be used to format this entry.  Valid
environments are defined in the constant
@code{org-beamer-environments-default}, and you can define more in
@code{org-beamer-environments-extra}.  If this property is set, the entry
will also get a @code{:B_environment:} tag to make this visible.  This tag
has no semantic meaning, it is only a visual aid.
@item BEAMER_envargs
The beamer-special arguments that should be used for the environment, like
@code{[t]} or @code{[<+->]} of @code{<2-3>}.  If the @code{BEAMER_col}
property is also set, something like @code{C[t]} can be added here as well
to set an options argument for the implied @code{columns} environment.
@code{c[t]} or @code{c<2->} will set an options for the implied
@code{column} environment.
@item BEAMER_col
The width of a column that should start with this entry.  If this property
is set, the entry will also get a @code{:BMCOL:} property to make this
visible.  Also this tag is only a visual aid.  When this is a plain number,
it will be interpreted as a fraction of @code{\textwidth}.  Otherwise it
will be assumed that you have specified the units, like @samp{3cm}.  The
first such property in a frame will start a @code{columns} environment to
surround the columns.  This environment is closed when an entry has a
@code{BEAMER_col} property with value 0 or 1, or automatically at the end of
the frame.
@item BEAMER_extra
Additional commands that should be inserted after the environment has been
opened.  For example, when creating a frame, this can be used to specify
transitions.
@end table

Frames will automatically receive a @code{fragile} option if they contain
source code that uses the verbatim environment.  Special @file{beamer}
specific code can be inserted using @code{#+BEAMER:} and
@code{#+BEGIN_beamer...#+end_beamer} constructs, similar to other export
backends, but with the difference that @code{#+LaTeX:} stuff will be
included in the presentation as well.

Outline nodes with @code{BEAMER_env} property value @samp{note} or
@samp{noteNH} will be formatted as beamer notes, i,e, they will be wrapped
into @code{\note@{...@}}.  The former will include the heading as part of
the note text, the latter will ignore the heading of that node.  To simplify
note generation, it is actually enough to mark the note with a @emph{tag}
(either @code{:B_note:} or @code{:B_noteNH:}) instead of creating the
@code{BEAMER_env} property.

You can turn on a special minor mode @code{org-beamer-mode} for editing
support with

@example
#+STARTUP: beamer
@end example

@table @kbd
@orgcmd{C-c C-b,org-beamer-select-environment} In @code{org-beamer-mode},
this key offers fast selection of a beamer environment or the
@code{BEAMER_col} property.
@end table

Column view provides a great way to set the environment of a node and other
important parameters.  Make sure you are using a COLUMN format that is
geared toward this special purpose.  The command @kbd{M-x org-insert-beamer-options-template} defines such a format.

Here is a simple example Org document that is intended for beamer export.

@smallexample
#+LaTeX_CLASS: beamer
#+TITLE: Example Presentation
#+AUTHOR: Carsten Dominik
#+LaTeX_CLASS_OPTIONS: [presentation]
#+BEAMER_FRAME_LEVEL: 2
#+BEAMER_HEADER_EXTRA: \usetheme@{Madrid@}\usecolortheme@{default@}
#+COLUMNS: %35ITEM %10BEAMER_env(Env) %10BEAMER_envargs(Args) %4BEAMER_col(Col) %8BEAMER_extra(Ex)

* This is the first structural section

** Frame 1 \\ with a subtitle
*** Thanks to Eric Fraga                                      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_envargs: C[t]
    :BEAMER_col: 0.5
    :END:
    for the first viable beamer setup in Org
*** Thanks to everyone else                                   :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :BEAMER_envargs: <2->
    :END:
    for contributing to the discussion
**** This will be formatted as a beamer note                  :B_note:
** Frame 2 \\ where we will not use columns
*** Request                                                   :B_block:
    Please test this stuff!
    :PROPERTIES:
    :BEAMER_env: block
    :END:
@end smallexample

For more information, see the documentation on Worg.

@node DocBook export, TaskJuggler export, LaTeX and PDF export, Exporting
@section DocBook export
@cindex DocBook export
@cindex PDF出力
@cindex Cui, Baoqiu

Org contains a DocBook exporter written by Baoqiu Cui.  Once an Org file is
exported to DocBook format, it can be further processed to produce other
formats, including PDF, HTML, man pages, etc., using many available DocBook
tools and stylesheets.

Currently DocBook exporter only supports DocBook V5.0.

@menu
* DocBook export commands::  DocBookエクスポートの起動方法
* Quoting DocBook code::     DocBookコードをOrgファイルに取りこむ
* Recursive sections::       DocBookで繰り返し使われるセクション
* Tables in DocBook export::  表はHTMLのテーブルとして出力される
* Images in DocBook export::  DocBookの出力に図を挿入する方法
* Special characters::       特殊文字の処理方法
@end menu

@node DocBook export commands, Quoting DocBook code, DocBook export, DocBook export
@subsection DocBook export commands

@cindex region, active
@cindex アクティブなリージョン
@cindex transient-mark-mode
@table @kbd
@orgcmd{C-c C-e D,org-export-as-docbook}
@cindex プロパティ、EXPORT_FILE_NAME
Export as DocBook file.  For an Org file, @file{myfile.org}, the DocBook XML
file will be @file{myfile.xml}.  The file will be overwritten without
warning.  If there is an active region@footnote{This requires @code{transient-mark-mode} to be turned on}, only the region will be
exported.  If the selected region is a single tree@footnote{To select the current subtree, use @kbd{C-c @@}.}, the tree head will become the document
title.  If the tree head entry has, or inherits, an @code{EXPORT_FILE_NAME}
property, that name will be used for the export.  @orgcmd{C-c C-e V,org-export-as-docbook-pdf-and-open} Export as DocBook file, process to
PDF, then open the resulting PDF file.

@vindex org-export-docbook-xslt-proc-command
@vindex org-export-docbook-xsl-fo-proc-command
Note that, in order to produce PDF output based on exported DocBook file,
you need to have XSLT processor and XSL-FO processor software installed on
your system.  Check variables @code{org-export-docbook-xslt-proc-command}
and @code{org-export-docbook-xsl-fo-proc-command}.

@vindex org-export-docbook-xslt-stylesheet
The stylesheet argument @code{%s} in variable
@code{org-export-docbook-xslt-proc-command} is replaced by the value of
variable @code{org-export-docbook-xslt-stylesheet}, which needs to be set by
the user.  You can also overrule this global setting on a per-file basis by
adding an in-buffer setting @code{#+XSLT:} to the Org file.

@orgkey{C-c C-e v D} Export only the visible part of the document.
@end table

@node Quoting DocBook code, Recursive sections, DocBook export commands, DocBook export
@subsection Quoting DocBook code

You can quote DocBook code in Org files and copy it verbatim into exported
DocBook file with the following constructs:

@cindex #+DOCBOOK
@cindex #+BEGIN_DOCBOOK
@example
#+DOCBOOK: Literal DocBook code for export
@end example

@noindent or
@cindex #+BEGIN_DOCBOOK

@example
#+BEGIN_DOCBOOK
All lines between these markers are exported by DocBook exporter
literally.
#+END_DOCBOOK
@end example

For example, you can use the following lines to include a DocBook warning
admonition.  As to what this warning says, you should pay attention to the
document context when quoting DocBook code in Org files.  You may make
exported DocBook XML files invalid by not quoting DocBook code correctly.

@example
#+BEGIN_DOCBOOK
<warning>
  <para>You should know what you are doing when quoting DocBook XML code
  in your Org file.  Invalid DocBook XML may be generated by
  DocBook exporter if you are not careful!</para>
</warning>
#+END_DOCBOOK
@end example

@node Recursive sections, Tables in DocBook export, Quoting DocBook code, DocBook export
@subsection Recursive sections
@cindex DocBook recursive sections

DocBook exporter exports Org files as articles using the @code{article}
element in DocBook.  Recursive sections, i.e.@: @code{section} elements, are
used in exported articles.  Top level headlines in Org files are exported as
top level sections, and lower level headlines are exported as nested
sections.  The entire structure of Org files will be exported completely, no
matter how many nested levels of headlines there are.

Using recursive sections makes it easy to port and reuse exported DocBook
code in other DocBook document types like @code{book} or @code{set}.

@node Tables in DocBook export, Images in DocBook export, Recursive sections, DocBook export
@subsection Tables in DocBook export
@cindex tables, in DocBook export

Tables in Org files are exported as HTML tables, which have been supported
since DocBook V4.3.

If a table does not have a caption, an informal table is generated using the
@code{informaltable} element; otherwise, a formal table will be generated
using the @code{table} element.

@node Images in DocBook export, Special characters, Tables in DocBook export, DocBook export
@subsection Images in DocBook export
@cindex images, inline in DocBook
@cindex inlining images in DocBook

Images that are linked to without a description part in the link, like
@samp{[[file:img.jpg]]} or @samp{[[./img.jpg]]}, will be exported to DocBook
using @code{mediaobject} elements.  Each @code{mediaobject} element contains
an @code{imageobject} that wraps an @code{imagedata} element.  If you have
specified a caption for an image as described in @ref{Images and tables}, a
@code{caption} element will be added in @code{mediaobject}.  If a label is
also specified, it will be exported as an @code{xml:id} attribute of the
@code{mediaobject} element.

@vindex org-export-docbook-default-image-attributes
Image attributes supported by the @code{imagedata} element, like
@code{align} or @code{width}, can be specified in two ways: you can either
customize variable @code{org-export-docbook-default-image-attributes} or use
the @code{#+ATTR_DOCBOOK:} line.  Attributes specified in variable
@code{org-export-docbook-default-image-attributes} are applied to all inline
images in the Org file to be exported (unless they are overridden by image
attributes specified in @code{#+ATTR_DOCBOOK:} lines).

The @code{#+ATTR_DOCBOOK:} line can be used to specify additional image
attributes or override default image attributes for individual images.  If
the same attribute appears in both the @code{#+ATTR_DOCBOOK:} line and
variable @code{org-export-docbook-default-image-attributes}, the former
takes precedence.  Here is an example about how image attributes can be set:

@cindex #+CAPTION
@cindex #+LABEL
@cindex #+ATTR_DOCBOOK
@example
#+CAPTION:    The logo of Org-mode
#+LABEL:      unicorn-svg
#+ATTR_DOCBOOK: scalefit="1" width="100%" depth="100%"
[[./img/org-mode-unicorn.svg]]
@end example

@vindex org-export-docbook-inline-image-extensions
By default, DocBook exporter recognizes the following image file types:
@file{jpeg}, @file{jpg}, @file{png}, @file{gif}, and @file{svg}.  You can
customize variable @code{org-export-docbook-inline-image-extensions} to add
more types to this list as long as DocBook supports them.

@node Special characters, , Images in DocBook export, DocBook export
@subsection DocBook出力における特殊文字
@cindex DocBook出力における特殊文字

@vindex org-export-docbook-doctype
@vindex org-entities
Special characters that are written in @TeX{}-like syntax, such as
@code{\alpha}, @code{\Gamma}, and @code{\Zeta}, are supported by DocBook
exporter.  These characters are rewritten to XML entities, like
@code{&alpha;}, @code{&Gamma;}, and @code{&Zeta;}, based on the list saved
in variable @code{org-entities}.  As long as the generated DocBook file
includes the corresponding entities, these special characters are
recognized.

You can customize variable @code{org-export-docbook-doctype} to include the
entities you need.  For example, you can set variable
@code{org-export-docbook-doctype} to the following value to recognize all
special characters included in XHTML entities:

@example
"<!DOCTYPE article [
<!ENTITY % xhtml1-symbol PUBLIC
\"-//W3C//ENTITIES Symbol for HTML//EN//XML\"
\"http://www.w3.org/2003/entities/2007/xhtml1-symbol.ent\"
>
%xhtml1-symbol;
]>
"
@end example

@node TaskJuggler export, Freemind export, DocBook export, Exporting
@section TaskJuggler export
@cindex TaskJuggler export
@cindex Project management

@uref{http://www.taskjuggler.org/, TaskJuggler} is a project management
tool.  It provides an optimizing scheduler that computes your project time
lines and resource assignments based on the project outline and the
constraints that you have provided.

The TaskJuggler exporter is a bit different from other exporters, such as
the HTML and LaTeX exporters for example, in that it does not export all the
nodes of a document or strictly follow the order of the nodes in the
document.

Instead the TaskJuggler exporter looks for a tree that defines the tasks and
a optionally tree that defines the resources for this project. It then
creates a TaskJuggler file based on these trees and the attributes defined
in all the nodes.

@subsection TaskJuggler export commands

@table @kbd
@orgcmd{C-c C-e j,org-export-as-taskjuggler} Export as TaskJuggler file.

@orgcmd{C-c C-e J,org-export-as-taskjuggler-and-open} Export as TaskJuggler
file and then open the file with TaskJugglerUI.
@end table

@subsection Tasks

@vindex org-export-taskjuggler-project-tag
Create your tasks as you usually do with Org-mode. Assign efforts to each
task using properties (it's easiest to do this in the column view). You
should end up with something similar to the example by Peter Jones in
@url{http://www.contextualdevelopment.com/static/artifacts/articles/2008/project-planning/project-planning.org}.
Now mark the top node of your tasks with a tag named
@code{:taskjuggler_project:} (or whatever you customized
@code{org-export-taskjuggler-project-tag} to). You are now ready to export
the project plan with @kbd{C-c C-e J} which will export the project plan and
open a gantt chart in TaskJugglerUI.

@subsection Resources

@vindex org-export-taskjuggler-resource-tag
Next you can define resources and assign those to work on specific
tasks. You can group your resources hierarchically. Tag the top node of the
resources with @code{:taskjuggler_resource:} (or whatever you customized
@code{org-export-taskjuggler-resource-tag} to). You can optionally assign an
identifier (named @samp{resource_id}) to the resources (using the standard
Org properties commands, @pxref{Property syntax}) or you can let the
exporter generate identifiers automatically (the exporter picks the first
word of the headline as the identifier as long as it is unique---see the
documentation of @code{org-taskjuggler-get-unique-id}). Using that
identifier you can then allocate resources to tasks. This is again done with
the @samp{allocate} property on the tasks. Do this in column view or when on
the task type @kbd{C-c C-x p allocate @key{RET} <resource_id> @key{RET}}.

Once the allocations are done you can again export to TaskJuggler and check
in the Resource Allocation Graph which person is working on what task at
what time.

@subsection Export of properties

The exporter also takes TODO state information into consideration, i.e.@: if
a task is marked as done it will have the corresponding attribute in
TaskJuggler (@samp{complete 100}). Also it will export any property on a
task resource or resource node which is known to TaskJuggler, such as
@samp{limits}, @samp{vacation}, @samp{shift}, @samp{booking},
@samp{efficiency}, @samp{journalentry}, @samp{rate} for resources or
@samp{account}, @samp{start}, @samp{note}, @samp{duration}, @samp{end},
@samp{journalentry}, @samp{milestone}, @samp{reference}, @samp{responsible},
@samp{scheduling}, etc for tasks.

@subsection Dependencies

The exporter will handle dependencies that are defined in the tasks either
with the @samp{ORDERED} attribute (@pxref{TODO dependencies}), with the
@samp{BLOCKER} attribute (see @file{org-depend.el}) or alternatively with a
@samp{depends} attribute. Both the @samp{BLOCKER} and the @samp{depends}
attribute can be either @samp{previous-sibling} or a reference to an
identifier (named @samp{task_id}) which is defined for another task in the
project. @samp{BLOCKER} and the @samp{depends} attribute can define multiple
dependencies separated by either space or comma. You can also specify
optional attributes on the dependency by simply appending it. The following
examples should illustrate this:

@example
* Preparation
  :PROPERTIES:
  :task_id:  preparation
  :ORDERED:  t
  :END:
* Training material
  :PROPERTIES:
  :task_id:  training_material
  :ORDERED:  t
  :END:
** Markup Guidelines
   :PROPERTIES:
   :Effort:   2.0
   :END:
** Workflow Guidelines
   :PROPERTIES:
   :Effort:   2.0
   :END:
* Presentation
  :PROPERTIES:
  :Effort:   2.0
  :BLOCKER:  training_material @{ gapduration 1d @} preparation
  :END:
@end example

@subsection Reports

@vindex org-export-taskjuggler-default-reports
TaskJuggler can produce many kinds of reports (e.g.@: gantt chart, resource
allocation, etc). The user defines what kind of reports should be generated
for a project in the TaskJuggler file. The exporter will automatically
insert some default reports in the file. These defaults are defined in
@code{org-export-taskjuggler-default-reports}. They can be modified using
customize along with a number of other options. For a more complete list,
see @kbd{M-x customize-group @key{RET} org-export-taskjuggler @key{RET}}.

For more information and examples see the Org-taskjuggler tutorial at
@uref{http://orgmode.org/worg/org-tutorials/org-taskjuggler.html}.

@node Freemind export, XOXO export, TaskJuggler export, Exporting
@section Freemind export
@cindex Freemind export
@cindex mind map

The Freemind exporter was written by Lennart Borgman.

@table @kbd
@orgcmd{C-c C-e m,org-export-as-freemind} Export as Freemind mind map
@file{myfile.mm}.
@end table

@node XOXO export, iCalendarエクスポート, Freemind export, Exporting
@section XOXO export
@cindex XOXO export

Org-mode contains an exporter that produces XOXO-style output.  Currently,
this exporter only handles the general outline structure and does not
interpret any additional Org-mode features.

@table @kbd
@orgcmd{C-c C-e x,org-export-as-xoxo} Export as XOXO file
@file{myfile.html}.  @orgkey{C-c C-e v x} Export only the visible part of
the document.
@end table

@node iCalendarエクスポート, , XOXO export, Exporting
@section iCalendarエクスポート
@cindex iCalendarエクスポート

@vindex org-icalendar-include-todo
@vindex org-icalendar-use-deadline
@vindex org-icalendar-use-scheduled
@vindex org-icalendar-categories
@vindex org-icalendar-alarm-time
Some people use Org-mode for keeping track of projects, but still prefer a
standard calendar application for anniversaries and appointments.  In this
case it can be useful to show deadlines and other time-stamped items in Org
files in the calendar application.  Org-mode can export calendar information
in the standard iCalendar format.  If you also want to have TODO entries
included in the export, configure the variable
@code{org-icalendar-include-todo}.  Plain timestamps are exported as VEVENT,
and TODO items as VTODO.  It will also create events from deadlines that are
in non-TODO items.  Deadlines and scheduling dates in TODO items will be
used to set the start and due dates for the TODO entry@footnote{See the variables @code{org-icalendar-use-deadline} and
@code{org-icalendar-use-scheduled}.}.  As categories, it will use the tags
locally defined in the heading, and the file/tree category@footnote{To add inherited tags or the TODO state, configure the variable
@code{org-icalendar-categories}.}.  See the variable
@code{org-icalendar-alarm-time} for a way to assign alarms to entries with a
time.

@vindex org-icalendar-store-UID
@cindex property, ID
The iCalendar standard requires each entry to have a globally unique
identifier (UID).  Org creates these identifiers during export.  If you set
the variable @code{org-icalendar-store-UID}, the UID will be stored in the
@code{:ID:} property of the entry and re-used next time you report this
entry.  Since a single entry can give rise to multiple iCalendar entries (as
a timestamp, a deadline, a scheduled item, and as a TODO item), Org adds
prefixes to the UID, depending on what triggered the inclusion of the
entry.  In this way the UID remains unique, but a synchronization program
can still figure out from which entry all the different instances originate.

@table @kbd
@orgcmd{C-c C-e i,org-export-icalendar-this-file} Create iCalendar entries
for the current file and store them in the same directory, using a file
extension @file{.ics}.  @orgcmd{C-c C-e I, org-export-icalendar-all-agenda-files}
@vindex org-agenda-files
Like @kbd{C-c C-e i}, but do this for all files in @code{org-agenda-files}.
For each of these files, a separate iCalendar file will be written.
@orgcmd{C-c C-e c,org-export-icalendar-combine-agenda-files}
@vindex org-combined-agenda-icalendar-file
Create a single large iCalendar file from all files in
@code{org-agenda-files} and write it to the file given by
@code{org-combined-agenda-icalendar-file}.
@end table

@vindex org-use-property-inheritance
@vindex org-icalendar-include-body
@cindex property, SUMMARY
@cindex property, DESCRIPTION
@cindex property, LOCATION
The export will honor SUMMARY, DESCRIPTION and LOCATION@footnote{The LOCATION property can be inherited from higher in the hierarchy if you
configure @code{org-use-property-inheritance} accordingly.} properties if
the selected entries have them.  If not, the summary will be derived from
the headline, and the description from the body (limited to
@code{org-icalendar-include-body} characters).

How this calendar is best read and updated, depends on the application you
are using.  The FAQ covers this issue.

@node Publishing, Working With Source Code, Exporting, Top
@chapter Publishing
@cindex publishing

Org includes a publishing management system that allows you to configure
automatic HTML conversion of @emph{projects} composed of interlinked org
files.  You can also configure Org to automatically upload your exported
HTML pages and related attachments, such as images and source code files, to
a web server.

You can also use Org to convert files into PDF, or even combine HTML and PDF
conversion so that files are available in both formats on the server.

Publishing has been contributed to Org by David O'Toole.

@menu
* Configuration::            プロジェクトの定義
* Uploading files::          ファイルをサーバにアップロードする方法
* Sample configuration::     プロジェクトのサンプル
* 公開の開始::          公開するのに使うコマンド
@end menu

@node Configuration, Uploading files, Publishing, Publishing
@section Configuration

Publishing needs significant configuration to specify files, destination and
many other properties of a project.

@menu
* Project alist::            主な設定用の変数
* Sources and destinations::  ここからそこまで
* Selecting files::          どのファイルがプロジェクトの一部なのか
* Publishing action::        公開を行う関数の設定
* Publishing options::       Tweaking HTML/@LaTeX{} export
* Publishing links::         どのリンクを公開した後も有効にしておくか
* Sitemap::                  全てのページリストの生成
* Generating an index::      ページを超えたインデックス
@end menu

@node Project alist, Sources and destinations, Configuration, Configuration
@subsection The variable @code{org-publish-project-alist}
@cindex org-publish-project-alist
@cindex projects, for publishing

@vindex org-publish-project-alist
Publishing is configured almost entirely through setting the value of one
variable, called @code{org-publish-project-alist}.  Each element of the list
configures one project, and may be in one of the two following forms:

@lisp
   ("project-name" :property value :property value ...) 
     @r{i.e.@: a well-formed property list with alternating keys and values}
@r{or}
   ("project-name" :components ("project-name" "project-name" ...))

@end lisp

In both cases, projects are configured by specifying property values.  A
project defines the set of files that will be published, as well as the
publishing configuration to use when publishing those files.  When a project
takes the second form listed above, the individual members of the
@code{:components} property are taken to be sub-projects, which group
together files requiring different publishing options.  When you publish
such a ``meta-project'', all the components will also be published, in the
sequence given.

@node Sources and destinations, Selecting files, Project alist, Configuration
@subsection Sources and destinations for files
@cindex directories, for publishing

Most properties are optional, but some should always be set.  In particular,
Org needs to know where to look for source files, and where to put published
files.

@multitable @columnfractions 0.3 0.7
@item @code{:base-directory}
@tab Directory containing publishing source files
@item @code{:publishing-directory}
@tab Directory where output files will be published.  You can directly publish to
a webserver using a file name syntax appropriate for the Emacs @file{tramp}
package.  Or you can publish to a local directory and use external tools to
upload your website (@pxref{Uploading files}).
@item @code{:preparation-function}
@tab Function or list of functions to be called before starting the publishing
process, for example, to run @code{make} for updating files to be
published.  The project property list is scoped into this call as the
variable @code{project-plist}.
@item @code{:completion-function}
@tab Function or list of functions called after finishing the publishing process,
for example, to change permissions of the resulting files.  The project
property list is scoped into this call as the variable @code{project-plist}.
@end multitable
@noindent

@node Selecting files, Publishing action, Sources and destinations, Configuration
@subsection Selecting files
@cindex files, selecting for publishing

By default, all files with extension @file{.org} in the base directory are
considered part of the project.  This can be modified by setting the
properties
@multitable @columnfractions 0.25 0.75
@item @code{:base-extension}
@tab Extension (without the dot!) of source files.  This actually is a regular
expression.  Set this to the symbol @code{any} if you want to get all files
in @code{:base-directory}, even without extension.

@item @code{:exclude}
@tab Regular expression to match file names that should not be published, even
though they have been selected on the basis of their extension.

@item @code{:include}
@tab List of files to be included regardless of @code{:base-extension} and
@code{:exclude}.

@item @code{:recursive}
@tab Non-nil means, check base-directory recursively for files to publish.
@end multitable

@node Publishing action, Publishing options, Selecting files, Configuration
@subsection Publishing action
@cindex action, for publishing

Publishing means that a file is copied to the destination directory and
possibly transformed in the process.  The default transformation is to
export Org files as HTML files, and this is done by the function
@code{org-publish-org-to-html} which calls the HTML exporter (@pxref{HTML export}).  But you also can publish your content as PDF files using
@code{org-publish-org-to-pdf}, or as @code{ascii}, @code{latin1} or
@code{utf8} encoded files using the corresponding functions.  If you want to
publish the Org file itself, but with @i{archived}, @i{commented}, and
@i{tag-excluded} trees removed, use @code{org-publish-org-to-org} and set
the parameters @code{:plain-source} and/or @code{:htmlized-source}.  This
will produce @file{file.org} and @file{file.org.html} in the publishing
directory@footnote{@file{file-source.org} and @file{file-source.org.html} if
source and publishing directories are equal.  Note that with this kind of
setup, you need to add @code{:exclude "-source\\.org"} to the project
definition in @code{org-publish-project-alist} to prevent the published
source files from being considered as new org files the next time the
project is published.}.  Other files like images only need to be copied to
the publishing destination; for this you may use
@code{org-publish-attachment}.  For non-Org files, you always need to
specify the publishing function:

@multitable @columnfractions 0.3 0.7
@item @code{:publishing-function}
@tab Function executing the publication of a file.  This may also be a list of
functions, which will all be called in turn.
@item @code{:plain-source}
@tab Non-nil means, publish plain source.
@item @code{:htmlized-source}
@tab Non-nil means, publish htmlized source.
@end multitable

The function must accept three arguments: a property list containing at
least a @code{:publishing-directory} property, the name of the file to be
published, and the path to the publishing directory of the output file.  It
should take the specified file, make the necessary transformation (if any)
and place the result into the destination folder.

@node Publishing options, Publishing links, Publishing action, Configuration
@subsection Options for the HTML/@LaTeX{} exporters
@cindex options, for publishing

The property list can be used to set many export options for the HTML and
@LaTeX{} exporters.  In most cases, these properties correspond to user
variables in Org.  The table below lists these properties along with the
variable they belong to.  See the documentation string for the respective
variable for details.

@vindex org-export-html-link-up
@vindex org-export-html-link-home
@vindex org-export-default-language
@vindex org-display-custom-times
@vindex org-export-headline-levels
@vindex org-export-with-section-numbers
@vindex org-export-section-number-format
@vindex org-export-with-toc
@vindex org-export-preserve-breaks
@vindex org-export-with-archived-trees
@vindex org-export-with-emphasize
@vindex org-export-with-sub-superscripts
@vindex org-export-with-special-strings
@vindex org-export-with-footnotes
@vindex org-export-with-drawers
@vindex org-export-with-tags
@vindex org-export-with-todo-keywords
@vindex org-export-with-priority
@vindex org-export-with-TeX-macros
@vindex org-export-with-LaTeX-fragments
@vindex org-export-skip-text-before-1st-heading
@vindex org-export-with-fixed-width
@vindex org-export-with-timestamps
@vindex org-export-author-info
@vindex org-export-email
@vindex org-export-creator-info
@vindex org-export-with-tables
@vindex org-export-highlight-first-table-line
@vindex org-export-html-style-include-default
@vindex org-export-html-style-include-scripts
@vindex org-export-html-style
@vindex org-export-html-style-extra
@vindex org-export-html-link-org-files-as-html
@vindex org-export-html-inline-images
@vindex org-export-html-extension
@vindex org-export-html-table-tag
@vindex org-export-html-expand
@vindex org-export-html-with-timestamp
@vindex org-export-publishing-directory
@vindex org-export-html-preamble
@vindex org-export-html-postamble
@vindex user-full-name
@vindex user-mail-address
@vindex org-export-select-tags
@vindex org-export-exclude-tags

@multitable @columnfractions 0.32 0.68
@item @code{:link-up}               @tab @code{org-export-html-link-up}
@item @code{:link-home}             @tab @code{org-export-html-link-home}
@item @code{:language}              @tab @code{org-export-default-language}
@item @code{:customtime}            @tab @code{org-display-custom-times}
@item @code{:headline-levels}       @tab @code{org-export-headline-levels}
@item @code{:section-numbers}       @tab @code{org-export-with-section-numbers}
@item @code{:section-number-format} @tab @code{org-export-section-number-format}
@item @code{:table-of-contents}     @tab @code{org-export-with-toc}
@item @code{:preserve-breaks}       @tab @code{org-export-preserve-breaks}
@item @code{:archived-trees}        @tab @code{org-export-with-archived-trees}
@item @code{:emphasize}             @tab @code{org-export-with-emphasize}
@item @code{:sub-superscript}       @tab @code{org-export-with-sub-superscripts}
@item @code{:special-strings}       @tab @code{org-export-with-special-strings}
@item @code{:footnotes}             @tab @code{org-export-with-footnotes}
@item @code{:drawers}               @tab @code{org-export-with-drawers}
@item @code{:tags}                  @tab @code{org-export-with-tags}
@item @code{:todo-keywords}         @tab @code{org-export-with-todo-keywords}
@item @code{:priority}              @tab @code{org-export-with-priority}
@item @code{:TeX-macros}            @tab @code{org-export-with-TeX-macros}
@item @code{:LaTeX-fragments}       @tab @code{org-export-with-LaTeX-fragments}
@item @code{:latex-listings}        @tab @code{org-export-latex-listings}
@item @code{:skip-before-1st-heading} @tab @code{org-export-skip-text-before-1st-heading}
@item @code{:fixed-width}           @tab @code{org-export-with-fixed-width}
@item @code{:timestamps}            @tab @code{org-export-with-timestamps}
@item @code{:author}                @tab @code{user-full-name}
@item @code{:email}                 @tab @code{user-mail-address} : @code{addr;addr;..}
@item @code{:author-info}           @tab @code{org-export-author-info}
@item @code{:email-info}            @tab @code{org-export-email-info}
@item @code{:creator-info}          @tab @code{org-export-creator-info}
@item @code{:tables}                @tab @code{org-export-with-tables}
@item @code{:table-auto-headline}   @tab @code{org-export-highlight-first-table-line}
@item @code{:style-include-default} @tab @code{org-export-html-style-include-default}
@item @code{:style-include-scripts} @tab @code{org-export-html-style-include-scripts}
@item @code{:style}                 @tab @code{org-export-html-style}
@item @code{:style-extra}           @tab @code{org-export-html-style-extra}
@item @code{:convert-org-links}     @tab @code{org-export-html-link-org-files-as-html}
@item @code{:inline-images}         @tab @code{org-export-html-inline-images}
@item @code{:html-extension}        @tab @code{org-export-html-extension}
@item @code{:html-preamble}         @tab @code{org-export-html-preamble}
@item @code{:html-postamble}        @tab @code{org-export-html-postamble}
@item @code{:xml-declaration}       @tab @code{org-export-html-xml-declaration}
@item @code{:html-table-tag}        @tab @code{org-export-html-table-tag}
@item @code{:expand-quoted-html}    @tab @code{org-export-html-expand}
@item @code{:timestamp}             @tab @code{org-export-html-with-timestamp}
@item @code{:publishing-directory}  @tab @code{org-export-publishing-directory}
@item @code{:select-tags}           @tab @code{org-export-select-tags}
@item @code{:exclude-tags}          @tab @code{org-export-exclude-tags}
@item @code{:latex-image-options}   @tab @code{org-export-latex-image-default-option}
@end multitable

Most of the @code{org-export-with-*} variables have the same effect in both
HTML and @LaTeX{} exporters, except for @code{:TeX-macros} and
@code{:LaTeX-fragments} options, respectively @code{nil} and @code{t} in the
@LaTeX{} export.  See @code{org-export-plist-vars} to check this list of
options.



@vindex org-publish-project-alist
When a property is given a value in @code{org-publish-project-alist}, its
setting overrides the value of the corresponding user variable (if any)
during publishing.  Options set within a file (@pxref{Export options}),
however, override everything.

@node Publishing links, Sitemap, Publishing options, Configuration
@subsection Links between published files
@cindex links, publishing

To create a link from one Org file to another, you would use something like
@samp{[[file:foo.org][The foo]]} or simply @samp{file:foo.org.}
(@pxref{Hyperlinks}).  When published, this link becomes a link to
@file{foo.html}.  In this way, you can interlink the pages of your "org web"
project and the links will work as expected when you publish them to HTML.
If you also publish the Org source file and want to link to that, use an
@code{http:} link instead of a @code{file:} link, because @code{file:} links
are converted to link to the corresponding @file{html} file.

You may also link to related files, such as images. Provided you are careful
with relative file names, and provided you have also configured Org to
upload the related files, these links will work too. See @ref{Complex example}, for an example of this usage.

Sometimes an Org file to be published may contain links that are only valid
in your production environment, but not in the publishing location.  In this
case, use the property

@multitable @columnfractions 0.4 0.6
@item @code{:link-validation-function}
@tab Function to validate links
@end multitable

@noindent
to define a function for checking link validity.  This function must accept
two arguments, the file name and a directory relative to which the file name
is interpreted in the production environment.  If this function returns
@code{nil}, then the HTML generator will only insert a description into the
HTML file, but no link.  One option for this function is
@code{org-publish-validate-link} which checks if the given file is part of
any project in @code{org-publish-project-alist}.

@node Sitemap, Generating an index, Publishing links, Configuration
@subsection Generating a sitemap
@cindex sitemap, of published pages

The following properties may be used to control publishing of a map of files
for a given project.

@multitable @columnfractions 0.35 0.65
@item @code{:auto-sitemap}
@tab When non-nil, publish a sitemap during @code{org-publish-current-project} or
@code{org-publish-all}.

@item @code{:sitemap-filename}
@tab Filename for output of sitemap. Defaults to @file{sitemap.org} (which
becomes @file{sitemap.html}).

@item @code{:sitemap-title}
@tab Title of sitemap page. Defaults to name of file.

@item @code{:sitemap-function}
@tab Plug-in function to use for generation of the sitemap.  Defaults to
@code{org-publish-org-sitemap}, which generates a plain list of links to all
files in the project.

@item @code{:sitemap-sort-folders}
@tab Where folders should appear in the sitemap.  Set this to @code{first}
(default) or @code{last} to display folders first or last, respectively.
Any other value will mix files and folders.

@item @code{:sitemap-sort-files}
@tab How the files are sorted in the site map.  Set this to @code{alphabetically}
(default), @code{chronologically} or
@code{anti-chronologically}. @code{chronologically} sorts the files with
older date first while @code{anti-chronologically} sorts the files with
newer date first. @code{alphabetically} sorts the files alphabetically. The
date of a file is retrieved with @code{org-publish-find-date}.

@item @code{:sitemap-ignore-case}
@tab Should sorting be case-sensitive? Default @code{nil}.

@item @code{:sitemap-file-entry-format}
@tab With this option one can tell how a sitemap's entry is formated in the
sitemap. This is a format string with some escape sequences: @code{%t}
stands for the title of the file, @code{%a} stands for the author of the
file and @code{%d} stands for the date of the file. The date is retrieved
with the @code{org-publish-find-date} function and formated with
@code{org-publish-sitemap-date-format}. Default @code{%t}.

@item @code{:sitemap-date-format}
@tab Format string for the @code{format-time-string} function that tells how a
sitemap entry's date is to be formated. This property bypasses
@code{org-publish-sitemap-date-format} which defaults to @code{%Y-%m-%d}.

@end multitable

@node Generating an index, , Sitemap, Configuration
@subsection Generating an index
@cindex index, in a publishing project

Org-mode can generate an index across the files of a publishing project.

@multitable @columnfractions 0.25 0.75
@item @code{:makeindex}
@tab When non-nil, generate in index in the file @file{theindex.org} and publish
it as @file{theindex.html}.
@end multitable

The file will be created when first publishing a project with the
@code{:makeindex} set.  The file only contains a statement @code{#+include: "theindex.inc"}.  You can then build around this include statement by adding
a title, style information, etc.

@node Uploading files, Sample configuration, Configuration, Publishing
@section Uploading files
@cindex rsync
@cindex unison

For those people already utilizing third party sync tools such as
@command{rsync} or @command{unison}, it might be preferable not to use the
built in @i{remote} publishing facilities of Org-mode which rely heavily on
Tramp.  Tramp, while very useful and powerful, tends not to be so efficient
for multiple file transfer and has been known to cause problems under heavy
usage.

Specialized synchronization utilities offer several advantages.  In addition
to timestamp comparison, they also do content and permissions/attribute
checks.  For this reason you might prefer to publish your web to a local
directory (possibly even @i{in place} with your Org files) and then use
@file{unison} or @file{rsync} to do the synchronization with the remote
host.

Since Unison (for example) can be configured as to which files to transfer
to a certain remote destination, it can greatly simplify the project
publishing definition.  Simply keep all files in the correct location,
process your Org files with @code{org-publish} and let the synchronization
tool do the rest.  You do not need, in this scenario, to include attachments
such as @file{jpg}, @file{css} or @file{gif} files in the project definition
since the 3rd party tool syncs them.

Publishing to a local directory is also much faster than to a remote one, so
that you can afford more easily to republish entire projects.  If you set
@code{org-publish-use-timestamps-flag} to @code{nil}, you gain the main
benefit of re-including any changed external files such as source example
files you might include with @code{#+INCLUDE}.  The timestamp mechanism in
Org is not smart enough to detect if included files have been modified.

@node Sample configuration, 公開の開始, Uploading files, Publishing
@section Sample configuration

Below we provide two example configurations.  The first one is a simple
project publishing only a set of Org files.  The second example is more
complex, with a multi-component project.

@menu
* Simple example::           1コンポーネントでの公開
* Complex example::          複数コンポーネントでの公開
@end menu

@node Simple example, Complex example, Sample configuration, Sample configuration
@subsection Example: simple publishing configuration

This example publishes a set of Org files to the @file{public_html}
directory on the local machine.

@lisp
(setq org-publish-project-alist
      '(("org"
         :base-directory "~/org/"
         :publishing-directory "~/public_html"
         :section-numbers nil
         :table-of-contents nil
         :style "<link rel=\"stylesheet\"
                href=\"../other/mystyle.css\"
                type=\"text/css\"/>")))
@end lisp

@node Complex example, , Simple example, Sample configuration
@subsection Example: complex publishing configuration

This more complicated example publishes an entire website, including Org
files converted to HTML, image files, Emacs Lisp source code, and style
sheets. The publishing directory is remote and private files are excluded.

@c
To ensure that links are preserved, care should be taken to replicate your
directory structure on the web server, and to use relative file paths. For
example, if your Org files are kept in @file{~/org} and your publishable
images in @file{~/images}, you would link to an image with
@example
file:../images/myimage.png
@end example
@c
On the web server, the relative path to the image should be the same. You
can accomplish this by setting up an "images" folder in the right place on
the web server, and publishing images to it.

@lisp
(setq org-publish-project-alist
      '(("orgfiles"
          :base-directory "~/org/"
          :base-extension "org"
          :publishing-directory "/ssh:user@@host:~/html/notebook/"
          :publishing-function org-publish-org-to-html
          :exclude "PrivatePage.org"   ;; regexp
          :headline-levels 3
          :section-numbers nil
          :table-of-contents nil
          :style "<link rel=\"stylesheet\"
                  href=\"../other/mystyle.css\" type=\"text/css\"/>"
          :html-preamble t)

         ("images"
          :base-directory "~/images/"
          :base-extension "jpg\\|gif\\|png"
          :publishing-directory "/ssh:user@@host:~/html/images/"
          :publishing-function org-publish-attachment)

         ("other"
          :base-directory "~/other/"
          :base-extension "css\\|el"
          :publishing-directory "/ssh:user@@host:~/html/other/"
          :publishing-function org-publish-attachment)
         ("website" :components ("orgfiles" "images" "other"))))
@end lisp

@node 公開の開始, , Sample configuration, Publishing
@section 公開の開始

Once properly configured, Org can publish with the following commands:

@table @kbd
@orgcmd{C-c C-e X,org-publish} Prompt for a specific project and publish all
files that belong to it.  @orgcmd{C-c C-e P,org-publish-current-project}
Publish the project containing the current file.  @orgcmd{C-c C-e F,org-publish-current-file} Publish only the current file.  @orgcmd{C-c C-e E,org-publish-all} Publish every project.
@end table

@vindex org-publish-use-timestamps-flag
Org uses timestamps to track when a file has changed. The above functions
normally only publish changed files. You can override this and force
publishing of all files by giving a prefix argument to any of the commands
above, or by customizing the variable
@code{org-publish-use-timestamps-flag}.  This may be necessary in particular
if files include other files via @code{#+SETUPFILE:} or @code{#+INCLUDE:}.

@comment  node-name,  next,  previous,  up
@comment Working With Source Code, Miscellaneous, Publishing, Top

@node Working With Source Code, Miscellaneous, Publishing, Top
@chapter ソースコードとの連携
@cindex Schulte, Eric
@cindex Davison, Dan
@cindex source code, working with

Source code can be included in Org-mode documents using a @samp{src} block,
e.g.@:

@example
#+BEGIN_SRC emacs-lisp
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_SRC
@end example

Org-mode provides a number of features for working with live source code,
including editing of code blocks in their native major-mode, evaluation of
code blocks, converting code blocks into source files (known as
@dfn{tangling} in literate programming), and exporting code blocks and their
results in several formats.  This functionality was contributed by Eric
Schulte and Dan Davison, and was originally named Org-babel.

The following sections describe Org-mode's code block handling facilities.

@menu
* Structure of code blocks::  Code block syntax described
* Editing source code::      言語のメジャーモードを用いた編集
* Exporting code blocks::    コード(と/または)結果のエクスポート
* Extracting source code::   ソースコードのみのファイルの作成
* Evaluating code blocks::   Place results of evaluation in the Org-mode 
                               buffer
* Library of Babel::         有用なコードブロックのライブラリを読む，そして貢
献する
* Languages::                コードブロックがサポートする言語一覧
* Header arguments::         Configure code block functionality
* Results of evaluation::    評価の結果を操作する方法
* Noweb reference syntax::   Org-modeでの文芸的プログラミング
* Key bindings and useful functions::  コードブロックを素早く操作する
* バッチ処理::          コマンドラインから関数を呼び出す
@end menu

@comment  node-name,  next,  previous,  up
@comment  Structure of code blocks, Editing source code, Working With Source Code, Working With Source Code

@node Structure of code blocks, Editing source code, Working With Source Code, Working With Source Code
@section Structure of code blocks
@cindex code block, structure
@cindex source code, block structure

The structure of code blocks is as follows:

@example
#+srcname: <name>
#+begin_src <language> <switches> <header arguments>
  <body>
#+end_src
@end example

Switches and header arguments are optional. Code can also be embedded in
text inline using

@example
src_<language>@{<body>@}
@end example

or

@example
src_<language>[<header arguments>]@{<body>@}
@end example

@table @code
@item <name>
This name is associated with the code block.  This is similar to the
@samp{#+tblname} lines that can be used to name tables in Org-mode files.
Referencing the name of a code block makes it possible to evaluate the block
from other places in the file, other files, or from Org-mode table formulas
(see @ref{The spreadsheet}).
@item <language>
The language of the code in the block.
@item <switches>
Optional switches controlling exportation of the code block (see switches
discussion in @ref{Literal examples})
@item <header arguments>
Optional header arguments control many aspects of evaluation, export and
tangling of code blocks. See the @ref{Header arguments} section. Header
arguments can also be set on a per-buffer or per-subtree basis using
properties.
@item <body>
The source code.
@end table

@comment  node-name,  next,  previous,  up
@comment  Editing source code, Exporting code blocks, Structure of code blocks, Working With Source Code

@node Editing source code, Exporting code blocks, Structure of code blocks, Working With Source Code
@section Editing source code
@cindex code block, editing
@cindex source code, editing

@kindex C-c '
Use @kbd{C-c '} to edit the current code block. This brings up a language
major-mode edit buffer containing the body of the code block. Saving this
buffer will write the new contents back to the Org buffer. Use @kbd{C-c '}
again to exit.

The @code{org-src-mode} minor mode will be active in the edit buffer. The
following variables can be used to configure the behavior of the edit
buffer. See also the customization group @code{org-edit-structure} for
further configuration options.

@table @code
@item org-src-lang-modes
If an Emacs major-mode named @code{<lang>-mode} exists, where @code{<lang>}
is the language named in the header line of the code block, then the edit
buffer will be placed in that major-mode. This variable can be used to map
arbitrary language names to existing major modes.
@item org-src-window-setup
Controls the way Emacs windows are rearranged when the edit buffer is
created.
@item org-src-preserve-indentation
This variable is especially useful for tangling languages such as Python, in
which whitespace indentation in the output is critical.
@item org-src-ask-before-returning-to-edit-buffer
By default, Org will ask before returning to an open edit buffer. Set this
variable to nil to switch without asking.
@end table

To turn on native code fontification in the @emph{Org} buffer, configure the
variable @code{org-src-fontify-natively}.

@comment  node-name,  next,  previous,  up
@comment  Exporting code blocks, Extracting source code, Editing source code, Working With Source Code

@node Exporting code blocks, Extracting source code, Editing source code, Working With Source Code
@section Exporting code blocks
@cindex code block, exporting
@cindex source code, exporting

It is possible to export the @emph{contents} of code blocks, the
@emph{results} of code block evaluation, @emph{neither}, or @emph{both}.
For most languages, the default exports the contents of code
blocks. However, for some languages (e.g.@: @code{ditaa}) the default
exports the results of code block evaluation.  For information on exporting
code block bodies, see @ref{Literal examples}.

The @code{:exports} header argument can be used to specify export behavior:

@subsubheading Header arguments:
@table @code
@item :exports code
The default in most languages. The body of the code block is exported, as
described in @ref{Literal examples}.
@item :exports results
The code block will be evaluated and the results will be placed in the
Org-mode buffer for export, either updating previous results of the code
block located anywhere in the buffer or, if no previous results exist,
placing the results immediately after the code block.  The body of the code
block will not be exported.
@item :exports both
Both the code block and its results will be exported.
@item :exports none
Neither the code block nor its results will be exported.
@end table

It is possible to inhibit the evaluation of code blocks during export.
Setting the @code{org-export-babel-evaluate} variable to @code{nil} will
ensure that no code blocks are evaluated as part of the export process.
This can be useful in situations where potentially untrusted Org-mode files
are exported in an automated fashion, for example when Org-mode is used as
the markup language for a wiki.

@comment  node-name,  next,  previous,  up
@comment  Extracting source code, Evaluating code blocks, Exporting code blocks, Working With Source Code
@node Extracting source code, Evaluating code blocks, Exporting code blocks, Working With Source Code
@section Extracting source code
@cindex tangling
@cindex source code, extracting
@cindex code block, extracting source code

Creating pure source code files by extracting code from source blocks is
referred to as ``tangling''---a term adopted from the literate programming
community.  During ``tangling'' of code blocks their bodies are expanded
using @code{org-babel-expand-src-block} which can expand both variable and
``noweb'' style references (see @ref{Noweb reference syntax}).

@subsubheading Header arguments
@table @code
@item :tangle no
The default.  The code block is not included in the tangled output.
@item :tangle yes
Include the code block in the tangled output. The output file name is the
name of the org file with the extension @samp{.org} replaced by the
extension for the block language.
@item :tangle filename
Include the code block in the tangled output to file @samp{filename}.
@end table

@kindex C-c C-v t
@subsubheading Functions
@table @code
@item org-babel-tangle
Tangle the current file.  Bound to @kbd{C-c C-v t}.
@item org-babel-tangle-file
Choose a file to tangle.  Bound to @kbd{C-c C-v f}.
@end table

@subsubheading Hooks
@table @code
@item org-babel-post-tangle-hook
This hook is run from within code files tangled by @code{org-babel-tangle}.
Example applications could include post-processing, compilation or
evaluation of tangled code files.
@end table

@node Evaluating code blocks, Library of Babel, Extracting source code, Working With Source Code
@section Evaluating code blocks
@cindex code block, evaluating
@cindex source code, evaluating

Code blocks can be evaluated@footnote{Whenever code is evaluated there is a potential for that code to do harm.  Org-mode provides a number of
safeguards to ensure that it only evaluates code with explicit confirmation
from the user.  For information on these safeguards (and on how to disable
them) see @ref{Code evaluation security}.} and the results placed in the
Org-mode buffer.  By default, evaluation is only turned on for
@code{emacs-lisp} code blocks, however support exists for evaluating blocks
in many languages.  See @ref{Languages} for a list of supported languages.
See @ref{Structure of code blocks} for information on the syntax used to
define a code block.

@kindex C-c C-c
There are a number of ways to evaluate code blocks.  The simplest is to
press @kbd{C-c C-c} or @kbd{C-c C-v e} with the point on a code
block@footnote{The @code{org-babel-no-eval-on-ctrl-c-ctrl-c} variable can be
used to remove code evaluation from the @kbd{C-c C-c} key binding.}.  This
will call the @code{org-babel-execute-src-block} function to evaluate the
block and insert its results into the Org-mode buffer.

It is also possible to evaluate named code blocks from anywhere in an
Org-mode buffer or an Org-mode table.  @code{#+call} (or synonymously
@code{#+function} or @code{#+lob}) lines can be used to remotely execute
code blocks located in the current Org-mode buffer or in the ``Library of
Babel'' (see @ref{Library of Babel}).  These lines use the following syntax.

@example
#+call: <name>(<arguments>) <header arguments>
#+function: <name>(<arguments>) <header arguments>
#+lob: <name>(<arguments>) <header arguments>
@end example

@table @code
@item <name>
The name of the code block to be evaluated.
@item <arguments>
Arguments specified in this section will be passed to the code block.  These
arguments should relate to @code{:var} header arguments in the called code
block expressed using standard function call syntax.  For example if the
original code block named @code{double} has the header argument @code{:var n=2}, then the call line passing the number four to that block would be
written as @code{#+call: double(n=2)}.
@item <header arguments>
Header arguments can be placed after the function invocation.  See
@ref{Header arguments} for more information on header arguments.
@end table

All header arguments placed in the @code{<header arguments>} section
described above will be applied to the evaluation of the @code{#+call:}
line, however it is sometimes desirable to specify header arguments to be
passed to the code block being evaluated.

This is possible through the use of the following optional extended syntax.

@example
#+call: <name>[<block header arguments>](<arguments>) <header arguments>
@end example

Any header argument placed between the square brackets in the @code{<block header arguments>} section will be applied to the evaluation of the named
code block.  For more examples of passing header arguments to @code{#+call:}
lines see @ref{Header arguments in function calls}.

@node Library of Babel, Languages, Evaluating code blocks, Working With Source Code
@section Library of Babel
@cindex babel, library of
@cindex source code, library
@cindex code block, library

The ``Library of Babel'' is a library of code blocks that can be called from
any Org-mode file.  The library is housed in an Org-mode file located in the
@samp{contrib} directory of Org-mode.  Org-mode users can deposit functions
they believe to be generally useful in the library.

Code blocks defined in the ``Library of Babel'' can be called remotely as if
they were in the current Org-mode buffer (see @ref{Evaluating code blocks}
for information on the syntax of remote code block evaluation).

@kindex C-c C-v i
Code blocks located in any Org-mode file can be loaded into the ``Library of
Babel'' with the @code{org-babel-lob-ingest} function, bound to @kbd{C-c C-v i}.

@node Languages, Header arguments, Library of Babel, Working With Source Code
@section Languages
@cindex babel, languages
@cindex source code, languages
@cindex code block, languages

Code blocks in the following languages are supported.

@multitable @columnfractions 0.28 0.3 0.22 0.2
@item @b{Language} @tab @b{Identifier} @tab @b{Language} @tab @b{Identifier}
@item Asymptote @tab asymptote @tab Emacs Calc @tab calc
@item C @tab C @tab C++ @tab C++
@item Clojure @tab clojure @tab CSS @tab css
@item ditaa @tab ditaa  @tab Graphviz @tab dot
@item Emacs Lisp @tab emacs-lisp  @tab gnuplot @tab gnuplot
@item Haskell @tab haskell @tab Javascript @tab js
@item LaTeX @tab latex @tab Ledger @tab ledger
@item Lisp @tab lisp @tab MATLAB @tab matlab
@item Mscgen @tab mscgen @tab Objective Caml @tab ocaml
@item Octave @tab octave @tab Org-mode @tab org
@item Oz @tab oz @tab Perl @tab perl
@item Plantuml @tab plantuml @tab Python @tab python
@item R @tab R @tab Ruby @tab ruby
@item Sass @tab sass @tab Scheme @tab scheme
@item GNU Screen @tab screen @tab shell @tab sh
@item SQL @tab sql @tab SQLite @tab sqlite
@end multitable

Language-specific documentation is available for some languages.  If
available, it can be found at
@uref{http://orgmode.org/worg/org-contrib/babel/languages}.

The @code{org-babel-load-languages} controls which languages are enabled for
evaluation (by default only @code{emacs-lisp} is enabled).  This variable
can be set using the customization interface or by adding code like the
following to your emacs configuration.

@quotation
The following disables @code{emacs-lisp} evaluation and enables evaluation
of @code{R} code blocks.
@end quotation

@lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . nil)
   (R . t)))
@end lisp

It is also possible to enable support for a language by loading the related
elisp file with @code{require}.

@quotation
The following adds support for evaluating @code{clojure} code blocks.
@end quotation

@lisp
(require 'ob-clojure)
@end lisp

@node Header arguments, Results of evaluation, Languages, Working With Source Code
@section Header arguments
@cindex code block, header arguments
@cindex source code, block header arguments

Code block functionality can be configured with header arguments.  This
section provides an overview of the use of header arguments, and then
describes each header argument in detail.

@menu
* Using header arguments::   ヘッダー引数を設定するための別の方法
* Specific header arguments::  ヘッダー引数のリスト
@end menu

@node Using header arguments, Specific header arguments, Header arguments, Header arguments
@subsection Using header arguments

The values of header arguments can be set in six different ways, each more
specific (and having higher priority) than the last.
@menu
* System-wide header arguments::  全体的な初期値を設定する
* Language-specific header arguments::  言語ごとに初期値を設定する
* Buffer-wide header arguments::  特定のバッファで初期値を設定する
* Header arguments in Org-mode properties::  ヘッダーまたはバッファーに初期値
を設定する
* Code block specific header arguments::  値を設定するうえで最も一般的な方法
* Header arguments in function calls::  最も細かいレベル
@end menu


@node System-wide header arguments, Language-specific header arguments, Using header arguments, Using header arguments
@subsubheading System-wide header arguments
@vindex org-babel-default-header-args
System-wide values of header arguments can be specified by customizing the
@code{org-babel-default-header-args} variable:

@example
:session    => "none"
:results    => "replace"
:exports    => "code"
:cache      => "no"
:noweb      => "no"
@end example

@c @example
@c   org-babel-default-header-args is a variable defined in `org-babel.el'.
@c   Its value is
@c   ((:session . "none")
@c    (:results . "replace")
@c    (:exports . "code")
@c    (:cache . "no")
@c    (:noweb . "no"))


@c   Documentation:
@c   Default arguments to use when evaluating a code block.
@c @end example

For example, the following example could be used to set the default value of
@code{:noweb} header arguments to @code{yes}.  This would have the effect of
expanding @code{:noweb} references by default when evaluating source code
blocks.

@lisp
(setq org-babel-default-header-args
(cons '(:noweb . "yes")
(assq-delete-all :noweb org-babel-default-header-args)))
@end lisp

@node Language-specific header arguments, Buffer-wide header arguments, System-wide header arguments, Using header arguments
@subsubheading Language-specific header arguments
Each language can define its own set of default header arguments.  See the
language-specific documentation available online at
@uref{http://orgmode.org/worg/org-contrib/babel}.

@node Buffer-wide header arguments, Header arguments in Org-mode properties, Language-specific header arguments, Using header arguments
@subsubheading Buffer-wide header arguments
Buffer-wide header arguments may be specified through the use of a special
line placed anywhere in an Org-mode file.  The line consists of the
@code{#+BABEL:} keyword followed by a series of header arguments which may
be specified using the standard header argument syntax.

For example the following would set @code{session} to @code{*R*}, and
@code{results} to @code{silent} for every code block in the buffer, ensuring
that all execution took place in the same session, and no results would be
inserted into the buffer.

@example
#+BABEL: :session *R* :results silent
@end example

@node Header arguments in Org-mode properties, Code block specific header arguments, Buffer-wide header arguments, Using header arguments
@subsubheading Header arguments in Org-mode properties

Header arguments are also read from Org-mode properties (see @ref{Property syntax}), which can be set on a buffer-wide or per-heading basis. An example
of setting a header argument for all code blocks in a buffer is

@example
#+property: tangle yes
@end example

When properties are used to set default header arguments, they are looked up
with inheritance, so the value of the @code{:cache} header argument will
default to @code{yes} in all code blocks in the subtree rooted at the
following heading:

@example
* outline header
:PROPERTIES:
:cache:    yes
:END:
@end example

@kindex C-c C-x p
@vindex org-babel-default-header-args
Properties defined in this way override the properties set in
@code{org-babel-default-header-args}.  It is convenient to use the
@code{org-set-property} function bound to @kbd{C-c C-x p} to set properties
in Org-mode documents.

@node Code block specific header arguments, Header arguments in function calls, Header arguments in Org-mode properties, Using header arguments
@subsubheading Code block specific header arguments

The most common way to assign values to header arguments is at the code
block level.  This can be done by listing a sequence of header arguments and
their values as part of the @code{#+begin_src} line.  Properties set in this
way override both the values of @code{org-babel-default-header-args} and
header arguments specified as properties.  In the following example, the
@code{:results} header argument is set to @code{silent}, meaning the results
of execution will not be inserted in the buffer, and the @code{:exports}
header argument is set to @code{code}, meaning only the body of the code
block will be preserved on export to HTML or LaTeX.

@example
#+source: factorial
#+begin_src haskell :results silent :exports code :var n=0
fac 0 = 1
fac n = n * fac (n-1)
#+end_src
@end example
Similarly, it is possible to set header arguments for inline code blocks:

@example
src_haskell[:exports both]@{fac 5@}
@end example

Code block header arguments can span multiple lines using =#+header:= or
=#+headers:= lines preceding a code block or nested in between the name and
body of a named code block.

Multi-line header arguments on an un-named code block:
@example
 #+headers: :var data1=1
 #+begin_src emacs-lisp :var data2=2
   (message "data1:%S, data2:%S" data1 data2)
 #+end_src

 #+results:
 : data1:1, data2:2
@end example

Multi-line header arguments on a named code block:
@example
   #+source: named-block
   #+header: :var data=2
   #+begin_src emacs-lisp
     (message "data:%S" data)
   #+end_src

   #+results: named-block
   : data:2
@end example

@node Header arguments in function calls, , Code block specific header arguments, Using header arguments
@comment  node-name,  next,  previous,  up
@subsubheading Header arguments in function calls

At the most specific level, header arguments for ``Library of Babel'' or
function call lines can be set as shown in the two examples below.  For more
information on the structure of @code{#+call:} lines see @ref{Evaluating code blocks}.

The following will apply the @code{:exports results} header argument to the
evaluation of the @code{#+call:} line.
@example
#+call: factorial(n=5) :exports results
@end example

The following will apply the @code{:session special} header argument to the
evaluation of the @code{factorial} code block.
@example
#+call: factorial[:session special](n=5)
@end example

@node Specific header arguments, , Using header arguments, Header arguments
@subsection Specific header arguments
The following header arguments are defined:

@menu
* var::                      引数をコードブロックに渡す
* results::                  結果のタイプ及び操作と収集方法を特定する
* file::                     ファイルを出力するパスを設定する
* dir::                      コードブロックの実行結果を出力する(可能ならばリ
モートの)ディレクトリを特定する
* exports::                  コードと(または)実行結果を出力する
* 抽出::                   抽出の有無をトグルしてファイル名を特定する
* mkdirp::                   抽出している間、ターゲットファイルの親ディレクト
リの生成をトグルする
* comments::                 tangleされたコードファイルでコメントの挿入をトグ
ルする
* no-expand::                tangle中に変数割り当てとnowebの展開をオフにする
* session::                  コード評価の状態を保存する
* noweb::                    noweb参照の展開をトグルする
* cache::                    未変更のコードブロックの再評価を回避する
* sep::                      Org-modeの外部に表を出力するための区切り文字
* hlines::                   テーブルの水平ラインを制御する
* colnames::                 テーブルの列名称を制御する
* rownames::                 テーブルの行名称を制御する
* shebang::                  tangleされたファイルを実行可能形式にする
* eval::                     特定のコードブロックの評価を制限する
@end menu

@node var, results, Specific header arguments, Specific header arguments
@subsubsection @code{:var}
The @code{:var} header argument is used to pass arguments to code blocks.
The specifics of how arguments are included in a code block vary by
language; these are addressed in the language-specific
documentation. However, the syntax used to specify arguments is the same
across all languages.  The values passed to arguments can be literal values,
values from org-mode tables and literal example blocks, the results of other
code blocks, or Emacs Lisp code---see the ``Emacs Lisp evaluation of
variables'' heading below.

These values can be indexed in a manner similar to arrays---see the
``indexable variable values'' heading below.

The following syntax is used to pass arguments to code blocks using the
@code{:var} header argument.

@example
:var name=assign
@end example

where @code{assign} can take one of the following forms

@itemize @bullet
@item literal value
either a string @code{"string"} or a number @code{9}.
@item reference
a table name:

@example
#+tblname: example-table
| 1 |
| 2 |
| 3 |
| 4 |

#+source: table-length
#+begin_src emacs-lisp :var table=example-table
(length table)
#+end_src

#+results: table-length
: 4
@end example

a code block name, as assigned by @code{#+srcname:}, followed by
parentheses:

@example
#+begin_src emacs-lisp :var length=table-length()
(* 2 length)
#+end_src

#+results:
: 8
@end example

In addition, an argument can be passed to the code block referenced by
@code{:var}.  The argument is passed within the parentheses following the
code block name:

@example
#+source: double
#+begin_src emacs-lisp :var input=8
(* 2 input)
#+end_src

#+results: double
: 16

#+source: squared
#+begin_src emacs-lisp :var input=double(input=1)
(* input input)
#+end_src

#+results: squared
: 4
@end example
@end itemize

@subsubheading Alternate argument syntax
It is also possible to specify arguments in a potentially more natural way
using the @code{#+source:} line of a code block.  As in the following
example arguments can be packed inside of parenthesis, separated by commas,
following the source name.

@example
#+source: double(input=0, x=2)
#+begin_src emacs-lisp
(* 2 (+ input x))
#+end_src
@end example

@subsubheading Indexable variable values
It is possible to reference portions of variable values by ``indexing'' into
the variables.  Indexes are 0 based with negative values counting back from
the end.  If an index is separated by @code{,}s then each subsequent section
will index into the next deepest nesting or dimension of the value.  Note
that this indexing occurs @emph{before} other table related header arguments
like @code{:hlines}, @code{:colnames} and @code{:rownames} are applied.  The
following example assigns the last cell of the first row the table
@code{example-table} to the variable @code{data}:

@example
#+results: example-table
| 1 | a |
| 2 | b |
| 3 | c |
| 4 | d |

#+begin_src emacs-lisp :var data=example-table[0,-1]
  data
#+end_src

#+results:
: a
@end example

Ranges of variable values can be referenced using two integers separated by
a @code{:}, in which case the entire inclusive range is referenced.  For
example the following assigns the middle three rows of @code{example-table}
to @code{data}.

@example
#+results: example-table
| 1 | a |
| 2 | b |
| 3 | c |
| 4 | d |
| 5 | 3 |

#+begin_src emacs-lisp :var data=example-table[1:3]
  data
#+end_src

#+results:
| 2 | b |
| 3 | c |
| 4 | d |
@end example

Additionally, an empty index, or the single character @code{*}, are both
interpreted to mean the entire range and as such are equivalent to
@code{0:-1}, as shown in the following example in which the entire first
column is referenced.

@example
#+results: example-table
| 1 | a |
| 2 | b |
| 3 | c |
| 4 | d |

#+begin_src emacs-lisp :var data=example-table[,0]
  data
#+end_src

#+results:
| 1 | 2 | 3 | 4 |
@end example

It is possible to index into the results of code blocks as well as tables.
Any number of dimensions can be indexed.  Dimensions are separated from one
another by commas, as shown in the following example.

@example
#+source: 3D
#+begin_src emacs-lisp
  '(((1  2  3)  (4  5  6)  (7  8  9))
    ((10 11 12) (13 14 15) (16 17 18))
    ((19 20 21) (22 23 24) (25 26 27)))
#+end_src

#+begin_src emacs-lisp :var data=3D[1,,1]
  data
#+end_src

#+results:
| 11 | 14 | 17 |
@end example

@subsubheading Emacs Lisp evaluation of variables

Emacs lisp code can be used to initialize variable values.  When a variable
value starts with @code{(}, @code{[}, @code{'} or @code{`} it will be
evaluated as Emacs Lisp and the result of the evaluation will be assigned as
the variable value.  The following example demonstrates use of this
evaluation to reliably pass the file-name of the org-mode buffer to a code
block---note that evaluation of header arguments is guaranteed to take place
in the original org-mode file, while there is no such guarantee for
evaluation of the code block body.

@example
#+begin_src sh :var file-name=(buffer-file-name) :exports both
  wc -w $file
#+end_src
@end example

Note that values read from tables and lists will not be evaluated as Emacs
Lisp, as shown in the following example.

@example
#+results: table
| (a b c) |

#+headers: :var data=table[0,0]
#+begin_src perl
  $data
#+end_src

#+results:
: (a b c)
@end example

@node results, file, var, Specific header arguments
@subsubsection @code{:results}

There are three classes of @code{:results} header argument.  Only one option
per class may be supplied per code block.

@itemize @bullet
@item
@b{collection} header arguments specify how the results should be collected
from the code block
@item
@b{type} header arguments specify what type of result the code block will
return---which has implications for how they will be inserted into the
Org-mode buffer
@item
@b{handling} header arguments specify how the results of evaluating the code
block should be handled.
@end itemize

@subsubheading Collection
The following options are mutually exclusive, and specify how the results
should be collected from the code block.

@itemize @bullet
@item @code{value}
This is the default.  The result is the value of the last statement in the
code block.  This header argument places the evaluation in functional mode.
Note that in some languages, e.g., Python, use of this result type requires
that a @code{return} statement be included in the body of the source code
block. E.g., @code{:results value}.
@item @code{output}
The result is the collection of everything printed to STDOUT during the
execution of the code block.  This header argument places the evaluation in
scripting mode.  E.g., @code{:results output}.
@end itemize

@subsubheading Type

The following options are mutually exclusive and specify what type of
results the code block will return.  By default, results are inserted as
either a table or scalar depending on their value.

@itemize @bullet
@item @code{table}, @code{vector}
The results should be interpreted as an Org-mode table.  If a single value
is returned, it will be converted into a table with one row and one column.
E.g., @code{:results value table}.
@item @code{list}
The results should be interpreted as an Org-mode list.  If a single scalar
value is returned it will be converted into a list with only one element.
@item @code{scalar}, @code{verbatim}
The results should be interpreted literally---they will not be converted
into a table.  The results will be inserted into the Org-mode buffer as
quoted text.  E.g., @code{:results value verbatim}.
@item @code{file}
The results will be interpreted as the path to a file, and will be inserted
into the Org-mode buffer as a file link.  E.g., @code{:results value file}.
@item @code{raw}, @code{org}
The results are interpreted as raw Org-mode code and are inserted directly
into the buffer.  If the results look like a table they will be aligned as
such by Org-mode.  E.g., @code{:results value raw}.
@item @code{html}
Results are assumed to be HTML and will be enclosed in a @code{begin_html}
block.  E.g., @code{:results value html}.
@item @code{latex}
Results assumed to be LaTeX and are enclosed in a @code{begin_latex} block.
E.g., @code{:results value latex}.
@item @code{code}
Result are assumed to be parseable code and are enclosed in a code block.
E.g., @code{:results value code}.
@item @code{pp}
The result is converted to pretty-printed code and is enclosed in a code
block.  This option currently supports Emacs Lisp, Python, and Ruby.  E.g.,
@code{:results value pp}.
@item @code{wrap}
The result is wrapped in a @code{begin_result} block.  This can be useful
for inserting @code{raw} or @code{org} syntax results in such a way that
their extend is known and they can be automatically removed or replaced.
@end itemize

@subsubheading Handling
The following results options indicate what happens with the results once
they are collected.

@itemize @bullet
@item @code{silent}
The results will be echoed in the minibuffer but will not be inserted into
the Org-mode buffer.  E.g., @code{:results output silent}.
@item @code{replace}
The default value.  Any existing results will be removed, and the new
results will be inserted into the Org-mode buffer in their place.  E.g.,
@code{:results output replace}.
@item @code{append}
If there are pre-existing results of the code block then the new results
will be appended to the existing results.  Otherwise the new results will be
inserted as with @code{replace}.
@item @code{prepend}
If there are pre-existing results of the code block then the new results
will be prepended to the existing results.  Otherwise the new results will
be inserted as with @code{replace}.
@end itemize

@node file, dir, results, Specific header arguments
@subsubsection @code{:file}

The header argument @code{:file} is used to specify an external file in
which to save code block results.  After code block evaluation an Org-mode
style @code{[[file:]]} link (see @ref{Link format}) to the file will be
inserted into the Org-mode buffer.  Some languages including R, gnuplot,
dot, and ditaa provide special handling of the @code{:file} header argument
automatically wrapping the code block body in the boilerplate code required
to save output to the specified file.  This is often useful for saving
graphical output of a code block to the specified file.

The argument to @code{:file} should be either a string specifying the path
to a file, or a list of two strings in which case the first element of the
list should be the path to a file and the second a description for the link.

@node dir, exports, file, Specific header arguments
@subsubsection @code{:dir} and remote execution

While the @code{:file} header argument can be used to specify the path to
the output file, @code{:dir} specifies the default directory during code
block execution. If it is absent, then the directory associated with the
current buffer is used. In other words, supplying @code{:dir path}
temporarily has the same effect as changing the current directory with
@kbd{M-x cd path}, and then not supplying @code{:dir}. Under the surface,
@code{:dir} simply sets the value of the Emacs variable
@code{default-directory}.

When using @code{:dir}, you should supply a relative path for file output
(e.g.@: @code{:file myfile.jpg} or @code{:file results/myfile.jpg}) in which
case that path will be interpreted relative to the default directory.

In other words, if you want your plot to go into a folder called @file{Work}
in your home directory, you could use

@example
#+begin_src R :file myplot.png :dir ~/Work
matplot(matrix(rnorm(100), 10), type="l")
#+end_src
@end example

@subsubheading Remote execution
A directory on a remote machine can be specified using tramp file syntax, in
which case the code will be evaluated on the remote machine. An example is

@example
#+begin_src R :file plot.png :dir /dand@@yakuba.princeton.edu:
plot(1:10, main=system("hostname", intern=TRUE))
#+end_src
@end example

Text results will be returned to the local Org-mode buffer as usual, and
file output will be created on the remote machine with relative paths
interpreted relative to the remote directory. An Org-mode link to the remote
file will be created.

So, in the above example a plot will be created on the remote machine, and a
link of the following form will be inserted in the org buffer:

@example
[[file:/scp:dand@@yakuba.princeton.edu:/home/dand/plot.png][plot.png]]
@end example

Most of this functionality follows immediately from the fact that
@code{:dir} sets the value of the Emacs variable @code{default-directory},
thanks to tramp. Those using XEmacs, or GNU Emacs prior to version 23 may
need to install tramp separately in order for these features to work
correctly.

@subsubheading Further points

@itemize @bullet
@item
If @code{:dir} is used in conjunction with @code{:session}, although it will
determine the starting directory for a new session as expected, no attempt
is currently made to alter the directory associated with an existing
session.
@item
@code{:dir} should typically not be used to create files during export with
@code{:exports results} or @code{:exports both}. The reason is that, in
order to retain portability of exported material between machines, during
export links inserted into the buffer will *not* be expanded against
@code{default directory}. Therefore, if @code{default-directory} is altered
using @code{:dir}, it is probable that the file will be created in a
location to which the link does not point.
@end itemize

@node exports, 抽出, dir, Specific header arguments
@subsubsection @code{:exports}

The @code{:exports} header argument specifies what should be included in
HTML or LaTeX exports of the Org-mode file.

@itemize @bullet
@item @code{code}
The default.  The body of code is included into the exported file.  E.g.,
@code{:exports code}.
@item @code{results}
The result of evaluating the code is included in the exported file. E.g.,
@code{:exports results}.
@item @code{both}
Both the code and results are included in the exported file. E.g.,
@code{:exports both}.
@item @code{none}
Nothing is included in the exported file.  E.g., @code{:exports none}.
@end itemize

@node 抽出, mkdirp, exports, Specific header arguments
@subsubsection @code{:tangle}

The @code{:tangle} header argument specifies whether or not the code block
should be included in tangled extraction of source code files.

@itemize @bullet
@item @code{抽出}
The code block is exported to a source code file named after the basename
(name w/o extension) of the Org-mode file.  E.g., @code{:tangle yes}.
@item @code{no}
The default.  The code block is not exported to a source code file.  E.g.,
@code{:tangle no}.
@item other
Any other string passed to the @code{:tangle} header argument is interpreted
as a file basename to which the block will be exported.  E.g., @code{:tangle basename}.
@end itemize

@node mkdirp, comments, 抽出, Specific header arguments
@subsubsection @code{:mkdirp}

The @code{:mkdirp} header argument can be used to create parent directories
of tangled files when missing.  This can be set to @code{yes} to enable
directory creation or to @code{no} to inhibit directory creation.

@node comments, no-expand, mkdirp, Specific header arguments
@subsubsection @code{:comments}
By default code blocks are tangled to source-code files without any
insertion of comments beyond those which may already exist in the body of
the code block.  The @code{:comments} header argument can be set as follows
to control the insertion of extra comments into the tangled code file.

@itemize @bullet
@item @code{no}
The default.  No extra comments are inserted during tangling.
@item @code{link}
The code block is wrapped in comments which contain pointers back to the
original Org file from which the code was tangled.
@item @code{yes}
A synonym for ``link'' to maintain backwards compatibility.
@item @code{org}
Include text from the org-mode file as a comment.

The text is picked from the leading context of the tangled code and is
limited by the nearest headline or source block as the case may be.
@item @code{both}
Turns on both the ``link'' and ``org'' comment options.
@item @code{noweb}
Turns on the ``link'' comment option, and additionally wraps expanded noweb
references in the code block body in link comments.
@end itemize

@node no-expand, session, comments, Specific header arguments
@subsubsection @code{:no-expand}

By default, code blocks are expanded with @code{org-babel-expand-src-block}
during tangling.  This has the effect of assigning values to variables
specified with @code{:var} (see @ref{var}), and of replacing ``noweb''
references (see @ref{Noweb reference syntax}) with their targets.  The
@code{:no-expand} header argument can be used to turn off this behavior.

@node session, noweb, no-expand, Specific header arguments
@subsubsection @code{:session}

The @code{:session} header argument starts a session for an interpreted
language where state is preserved.

By default, a session is not started.

A string passed to the @code{:session} header argument will give the session
a name.  This makes it possible to run concurrent sessions for each
interpreted language.

@node noweb, cache, session, Specific header arguments
@subsubsection @code{:noweb}

The @code{:noweb} header argument controls expansion of ``noweb'' style (see
@ref{Noweb reference syntax}) references in a code block.  This header
argument can have one of three values: @code{yes} @code{no} or
@code{tangle}.

@itemize @bullet
@item @code{yes}
All ``noweb'' syntax references in the body of the code block will be
expanded before the block is evaluated, tangled or exported.
@item @code{no}
The default.  No ``noweb'' syntax specific action is taken on evaluating
code blocks, However, noweb references will still be expanded during
tangling.
@item @code{抽出}
All ``noweb'' syntax references in the body of the code block will be
expanded before the block is tangled, however ``noweb'' references will not
be expanded when the block is evaluated or exported.
@end itemize

@subsubheading Noweb prefix lines
Noweb insertions are now placed behind the line prefix of the
@code{<<reference>>}.  This behavior is illustrated in the following
example.  Because the @code{<<example>>} noweb reference appears behind the
SQL comment syntax, each line of the expanded noweb reference will be
commented.

This code block:

@example
-- <<example>>
@end example


expands to:

@example
-- this is the
-- multi-line body of example
@end example

Note that noweb replacement text that does not contain any newlines will not
be affected by this change, so it is still possible to use inline noweb
references.

@node cache, sep, noweb, Specific header arguments
@subsubsection @code{:cache}

The @code{:cache} header argument controls the use of in-buffer caching of
the results of evaluating code blocks.  It can be used to avoid
re-evaluating unchanged code blocks.  This header argument can have one of
two values: @code{yes} or @code{no}.

@itemize @bullet
@item @code{no}
The default.  No caching takes place, and the code block will be evaluated
every time it is called.
@item @code{yes}
Every time the code block is run a SHA1 hash of the code and arguments
passed to the block will be generated.  This hash is packed into the
@code{#+results:} line and will be checked on subsequent executions of the
code block.  If the code block has not changed since the last time it was
evaluated, it will not be re-evaluated.
@end itemize

Code block caches notice if the value of a variable argument to the code
block has changed. If this is the case, the cache is invalidated and the
code block is re-run.  In the following example, @code{caller} will not be
re-run unless the results of @code{random} have changed since it was last
run.

@example
 #+srcname: random
 #+begin_src R :cache yes
 runif(1)
 #+end_src

 #+results[a2a72cd647ad44515fab62e144796432793d68e1]: random
 0.4659510825295

 #+srcname: caller
 #+begin_src emacs-lisp :var x=random :cache yes
 x
 #+end_src

 #+results[bec9c8724e397d5df3b696502df3ed7892fc4f5f]: caller
 0.254227238707244
@end example

@node sep, hlines, cache, Specific header arguments
@subsubsection @code{:sep}

The @code{:sep} header argument can be used to control the delimiter used
when writing tabular results out to files external to Org-mode.  This is
used either when opening tabular results of a code block by calling the
@code{org-open-at-point} function bound to @kbd{C-c C-o} on the code block,
or when writing code block results to an external file (see @ref{file})
header argument.

By default, when @code{:sep} is not specified output tables are tab
delimited.

@node hlines, colnames, sep, Specific header arguments
@subsubsection @code{:hlines}

Tables are frequently represented with one or more horizontal lines, or
hlines.  The @code{:hlines} argument to a code block accepts the values
@code{yes} or @code{no}, with a default value of @code{no}.

@itemize @bullet
@item @code{no}
Strips horizontal lines from the input table.  In most languages this is the
desired effect because an @code{hline} symbol is interpreted as an unbound
variable and raises an error.  Setting @code{:hlines no} or relying on the
default value yields the following results.

@example
#+tblname: many-cols
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

#+source: echo-table
#+begin_src python :var tab=many-cols
  return tab
#+end_src

#+results: echo-table
| a | b | c |
| d | e | f |
| g | h | i |
@end example

@item @code{yes}
Leaves hlines in the table. Setting @code{:hlines yes} has this effect.

@example
#+tblname: many-cols
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

#+source: echo-table
#+begin_src python :var tab=many-cols :hlines yes
  return tab
#+end_src

#+results: echo-table
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |
@end example
@end itemize

@node colnames, rownames, hlines, Specific header arguments
@subsubsection @code{:colnames}

The @code{:colnames} header argument accepts the values @code{yes},
@code{no}, or @code{nil} for unassigned.  The default value is @code{nil}.

@itemize @bullet
@item @code{nil}
If an input table looks like it has column names (because its second row is
an hline), then the column names will be removed from the table before
processing, then reapplied to the results.

@example
#+tblname: less-cols
| a |
|---|
| b |
| c |

#+srcname: echo-table-again
#+begin_src python :var tab=less-cols
  return [[val + '*' for val in row] for row in tab]
#+end_src

#+results: echo-table-again
| a  |
|----|
| b* |
| c* |
@end example

Please note that column names are not removed before the table is indexed
using variable indexing @xref{var, Indexable variable values}.

@item @code{no}
No column name pre-processing takes place

@item @code{yes}
Column names are removed and reapplied as with @code{nil} even if the table
does not ``look like'' it has column names (i.e.@: the second row is not an
hline)
@end itemize

@node rownames, shebang, colnames, Specific header arguments
@subsubsection @code{:rownames}

The @code{:rownames} header argument can take on the values @code{yes} or
@code{no}, with a default value of @code{no}.

@itemize @bullet
@item @code{no}
No row name pre-processing will take place.

@item @code{yes}
The first column of the table is removed from the table before processing,
and is then reapplied to the results.

@example
#+tblname: with-rownames
| one | 1 | 2 | 3 | 4 |  5 |
| two | 6 | 7 | 8 | 9 | 10 |

#+srcname: echo-table-once-again
#+begin_src python :var tab=with-rownames :rownames yes
  return [[val + 10 for val in row] for row in tab]
#+end_src

#+results: echo-table-once-again
| one | 11 | 12 | 13 | 14 | 15 |
| two | 16 | 17 | 18 | 19 | 20 |
@end example

Please note that row names are not removed before the table is indexed using
variable indexing @xref{var, Indexable variable values}.

@end itemize

@node shebang, eval, rownames, Specific header arguments
@subsubsection @code{:shebang}

Setting the @code{:shebang} header argument to a string value (e.g.@:
@code{:shebang "#!/bin/bash"}) causes the string to be inserted as the first
line of any tangled file holding the code block, and the file permissions of
the tangled file are set to make it executable.

@node eval, , shebang, Specific header arguments
@subsubsection @code{:eval}
The @code{:eval} header argument can be used to limit the evaluation of
specific code blocks.  @code{:eval} accepts two arguments ``never'' and
``query''.  @code{:eval never} will ensure that a code block is never
evaluated, this can be useful for protecting against the evaluation of
dangerous code blocks.  @code{:eval query} will require a query for every
execution of a code block regardless of the value of the
@code{org-confirm-babel-evaluate} variable.

@node Results of evaluation, Noweb reference syntax, Header arguments, Working With Source Code
@section Results of evaluation
@cindex code block, results of evaluation
@cindex source code, results of evaluation

The way in which results are handled depends on whether a session is
invoked, as well as on whether @code{:results value} or @code{:results output} is used. The following table shows the table possibilities.  For a
full listing of the possible results header arguments see @ref{results}.

@multitable @columnfractions 0.26 0.33 0.41
@item @tab @b{Non-session} @tab @b{Session}
@item @code{:results value} @tab value of last expression @tab value of last expression
@item @code{:results output} @tab contents of STDOUT @tab concatenation of interpreter output
@end multitable

Note: With @code{:results value}, the result in both @code{:session} and
non-session is returned to Org-mode as a table (a one- or two-dimensional
vector of strings or numbers) when appropriate.

@subsection Non-session
@subsubsection @code{:results value}
This is the default. Internally, the value is obtained by wrapping the code
in a function definition in the external language, and evaluating that
function. Therefore, code should be written as if it were the body of such a
function. In particular, note that Python does not automatically return a
value from a function unless a @code{return} statement is present, and so a
@samp{return} statement will usually be required in Python.

This is the only one of the four evaluation contexts in which the code is
automatically wrapped in a function definition.

@subsubsection @code{:results output}
The code is passed to the interpreter as an external process, and the
contents of the standard output stream are returned as text. (In certain
languages this also contains the error output stream; this is an area for
future work.)

@subsection Session
@subsubsection @code{:results value}
The code is passed to the interpreter running as an interactive Emacs
inferior process. The result returned is the result of the last evaluation
performed by the interpreter. (This is obtained in a language-specific
manner: the value of the variable @code{_} in Python and Ruby, and the value
of @code{.Last.value} in R).

@subsubsection @code{:results output}
The code is passed to the interpreter running as an interactive Emacs
inferior process. The result returned is the concatenation of the sequence
of (text) output from the interactive interpreter. Notice that this is not
necessarily the same as what would be sent to @code{STDOUT} if the same code
were passed to a non-interactive interpreter running as an external
process. For example, compare the following two blocks:

@example
#+begin_src python :results output
 print "hello"
 2
 print "bye"
#+end_src

#+resname:
: hello
: bye
@end example

In non-session mode, the `2' is not printed and does not appear.
@example
#+begin_src python :results output :session
 print "hello"
 2
 print "bye"
#+end_src

#+resname:
: hello
: 2
: bye
@end example

But in @code{:session} mode, the interactive interpreter receives input `2'
and prints out its value, `2'. (Indeed, the other print statements are
unnecessary here).

@node Noweb reference syntax, Key bindings and useful functions, Results of evaluation, Working With Source Code
@section Noweb reference syntax
@cindex code block, noweb reference
@cindex syntax, noweb
@cindex source code, noweb reference

The ``noweb'' (see @uref{http://www.cs.tufts.edu/~nr/noweb/}) Literate
Programming system allows named blocks of code to be referenced by using the
familiar Noweb syntax:

@example
<<code-block-name>>
@end example

When a code block is tangled or evaluated, whether or not ``noweb''
references are expanded depends upon the value of the @code{:noweb} header
argument.  If @code{:noweb yes}, then a Noweb reference is expanded before
evaluation.  If @code{:noweb no}, the default, then the reference is not
expanded before evaluation.

Note: the default value, @code{:noweb no}, was chosen to ensure that correct
code is not broken in a language, such as Ruby, where @code{<<arg>>} is a
syntactically valid construct.  If @code{<<arg>>} is not syntactically valid
in languages that you use, then please consider setting the default value.

@node Key bindings and useful functions, バッチ処理, Noweb reference syntax, Working With Source Code
@section Key bindings and useful functions
@cindex code block, key bindings

Many common Org-mode key sequences are re-bound depending on the context.

Within a code block, the following key bindings are active:

@multitable @columnfractions 0.25 0.75
@kindex C-c C-c
@item @kbd{C-c C-c} @tab @code{org-babel-execute-src-block}
@kindex C-c C-o
@item @kbd{C-c C-o} @tab @code{org-babel-open-src-block-result}
@kindex C-up
@item @kbd{C-@key{up}}    @tab @code{org-babel-load-in-session}
@kindex M-down
@item @kbd{M-@key{down}}  @tab @code{org-babel-pop-to-session}
@end multitable

In an Org-mode buffer, the following key bindings are active:

@multitable @columnfractions 0.45 0.55
@kindex C-c C-v a
@kindex C-c C-v C-a
@item @kbd{C-c C-v a} @ @ @r{or} @ @ @kbd{C-c C-v C-a} @tab @code{org-babel-sha1-hash}
@kindex C-c C-v b
@kindex C-c C-v C-b
@item @kbd{C-c C-v b} @ @ @r{or} @ @ @kbd{C-c C-v C-b} @tab @code{org-babel-execute-buffer}
@kindex C-c C-v f
@kindex C-c C-v C-f
@item @kbd{C-c C-v f} @ @ @r{or} @ @ @kbd{C-c C-v C-f} @tab @code{org-babel-tangle-file}
@kindex C-c C-v g
@item @kbd{C-c C-v g} @tab @code{org-babel-goto-named-source-block}
@kindex C-c C-v h
@item @kbd{C-c C-v h} @tab @code{org-babel-describe-bindings}
@kindex C-c C-v l
@kindex C-c C-v C-l
@item @kbd{C-c C-v l} @ @ @r{or} @ @ @kbd{C-c C-v C-l} @tab @code{org-babel-lob-ingest}
@kindex C-c C-v p
@kindex C-c C-v C-p
@item @kbd{C-c C-v p} @ @ @r{or} @ @ @kbd{C-c C-v C-p} @tab @code{org-babel-expand-src-block}
@kindex C-c C-v s
@kindex C-c C-v C-s
@item @kbd{C-c C-v s} @ @ @r{or} @ @ @kbd{C-c C-v C-s} @tab @code{org-babel-execute-subtree}
@kindex C-c C-v t
@kindex C-c C-v C-t
@item @kbd{C-c C-v t} @ @ @r{or} @ @ @kbd{C-c C-v C-t} @tab @code{org-babel-tangle}
@kindex C-c C-v z
@kindex C-c C-v C-z
@item @kbd{C-c C-v z} @ @ @r{or} @ @ @kbd{C-c C-v C-z} @tab @code{org-babel-switch-to-session}
@end multitable

@c When possible these keybindings were extended to work when the control key is
@c kept pressed, resulting in the following additional keybindings.

@c @multitable @columnfractions 0.25 0.75
@c @item @kbd{C-c C-v C-a} @tab @code{org-babel-sha1-hash}
@c @item @kbd{C-c C-v C-b} @tab @code{org-babel-execute-buffer}
@c @item @kbd{C-c C-v C-f} @tab @code{org-babel-tangle-file}
@c @item @kbd{C-c C-v C-l} @tab @code{org-babel-lob-ingest}
@c @item @kbd{C-c C-v C-p} @tab @code{org-babel-expand-src-block}
@c @item @kbd{C-c C-v C-s} @tab @code{org-babel-execute-subtree}
@c @item @kbd{C-c C-v C-t} @tab @code{org-babel-tangle}
@c @item @kbd{C-c C-v C-z} @tab @code{org-babel-switch-to-session}
@c @end multitable

@node バッチ処理, , Key bindings and useful functions, Working With Source Code
@section バッチ処理
@cindex code block, batch execution
@cindex source code, batch execution

It is possible to call functions from the command line.  This shell script
calls @code{org-babel-tangle} on every one of its arguments.

Be sure to adjust the paths to fit your system.

@example
#!/bin/sh
# -*- mode: shell-script -*-
#
# tangle files with org-mode
#
DIR=`pwd`
FILES=""
ORGINSTALL="~/src/org/lisp/org-install.el"

# wrap each argument in the code required to call tangle on it
for i in $@@; do
    FILES="$FILES \"$i\""
done

emacs -Q --batch -l $ORGINSTALL \
--eval "(progn
(add-to-list 'load-path (expand-file-name \"~/src/org/lisp/\"))
(add-to-list 'load-path (expand-file-name \"~/src/org/contrib/lisp/\"))
(require 'org)(require 'org-exp)(require 'ob)(require 'ob-tangle)
(mapc (lambda (file)
       (find-file (expand-file-name file \"$DIR\"))
       (org-babel-tangle)
       (kill-buffer)) '($FILES)))" 2>&1 |grep tangled
@end example

@node Miscellaneous, Hacking, Working With Source Code, Top
@chapter Miscellaneous

@menu
* Completion::               M-TABはあなたが何を必要としているか知っています
* Easy Templates::           構造的な要素の素早い挿入
* Speed keys::               見出しの開始位置で使うの電撃的なコマンド
* Code evaluation security::  Org-modeのファイルはインラインのコードを評価す
る
* Customization::            Org-modeをユーザの好みに合わせる
* In-buffer settings::       「#+KEYWORDS」の概要
* The very busy C-c C-c key::  わからなかったら「C-c C-c」
* Clean view::               アウトラインの「*」の並びを取り除く
* TTY keys::                 Org-modeをtty端末で使う
* Interaction::              Emacsの他のパッケージ
@end menu


@node Completion, Easy Templates, Miscellaneous, Miscellaneous
@section Completion
@cindex completion, of @TeX{} symbols
@cindex 完了、TODOキーワードの
@cindex completion, of dictionary words
@cindex オプションのキーワードの補完
@cindex 完了、タグの
@cindex completion, of property keys
@cindex completion, of link abbreviations
@cindex @TeX{} symbol completion
@cindex TODO keywords completion
@cindex dictionary word completion
@cindex option keyword completion
@cindex tag completion
@cindex link abbreviations, completion of

Emacsは補完無しではEmacsとはいえません，そしてorg-modeはそれが意味をなすたび
に使用します．もしあなたが@i{iswitchb}-
か@i{ido}-のようなインタフェースを補完のプロンプトとして好むのであれば，あなた
は@code{org-completion-use-iswitchb}や@code{org-completion-use-ido}変数のいずれかを設定
することで指定することができます．

Org-modeはバッファ中の補完をサポートします．この種類の補完はミニバッファを活
用します．あなたは簡単に数文字をバッファに入力し，補完キーを補完するテキスト
の右側で押します．

@table @kbd
@kindex M-@key{TAB}
@item M-@key{TAB}
ポイント位置での補完
@itemize @bullet
@item
見出しの先頭では，TODOキーワードを補完します．
@item
@samp{\\}の後では，エクスポート機能によりサポートされる@TeX{}のシンボルを補完します．
@item
@samp{*}の後では，@samp{[[*find this headline]]}のようにリンクを検索できるように，カレ
ントバッファで見出しを補完します．
@item
見出し中の@samp{:}の後では，タグを補完します．タグのリストは@code{org-tag-alist}変数(@pxref{Setting tags}よ
り，もしかすると，バッファ中の@samp{#+TAGS}オプションでも設定されているかもしれま
せん．)から与えられるか，カレントバッファで使われている全てのタグから動的に生
成されます．
@item
見出しの外にある@samp{:}の後では，プロパティキーを補完します．キーのリストは現在の
バッファで使われている全てのキーから動的に構築されます．
@item
@samp{[}の後では，リンクの省略記法を補完します(@pxref{Link abbreviations})．
@item
@samp{+}の後では，Org-mode向けのファイル固有の設定としてセットする@samp{TYP_TODO}や@samp{OPTIONS}の
ようなスペシャルキーワードを補完します．オプションキーワードが既に補完されて
いるなら，@kbd{M-@key{TAB}}を再び押すことでこのキーワードの設定の例を挿入します．
@item
@samp{#+STARTUP: }の後の行の中では，STARTUPキーワードを補完します，すなわち，@:はこの行では正しいキーです．
@item
他の場所では，Ispellを用いた辞書補完が行われます．
@end itemize
@end table

@node Easy Templates, Speed keys, Completion, Miscellaneous
@section Easy Templates
@cindex テンプレートの挿入
@cindex テンプレートの挿入

Org-modeは僅かなキーストロークのみによる空の構造の(@code{#+BEGIN_SRC}や@code{#+END_SRC}の
ような)要素の挿入をサポートします．これはネイティブなテンプレート拡張機構を通
じて得られるものです．ここで留意すべきこととして，Emacsは例えば@file{yasnippet}の
ような同じように使うことができるいくつかの他のテンプレート機構を持ちます．

構造要素の挿入には，@samp{<}をタイプし，続いてテンプレートセレクタと@kbd{@key{TAB}}をタイプしま
す．補完は上記のキーストロークが単独で行に入力されている場合のみ働きます．

以下のテンプレートセレクタが現在サポートされています．

@multitable @columnfractions 0.1 0.9
@item @kbd{s} @tab @code{#+begin_src     ... #+end_src}
@item @kbd{e} @tab @code{#+begin_example ... #+end_example}
@item @kbd{q} @tab @code{#+begin_quote   ... #+end_quote}
@item @kbd{v} @tab @code{#+begin_verse   ... #+end_verse}
@item @kbd{c} @tab @code{#+begin_center  ... #+end_center}
@item @kbd{l} @tab @code{#+begin_latex   ... #+end_latex}
@item @kbd{L} @tab @code{#+latex:}
@item @kbd{h} @tab @code{#+begin_html    ... #+end_html}
@item @kbd{H} @tab @code{#+html:}
@item @kbd{a} @tab @code{#+begin_ascii   ... #+end_ascii}
@item @kbd{A} @tab @code{#+ascii:}
@item @kbd{i} @tab @code{#+include:} line
@end multitable

例えば，空の行で\"<e\"と入力し，その後TABを入力すると，EXAMPLEテンプレートが
補完されます．

あなたは@code{org-structure-template-list}変数をカスタマイズすることで追加のテンプ
レートをインストールすることができます．詳細は変数のdocstringを参照してくださ
い．

@node Speed keys, Code evaluation security, Easy Templates, Miscellaneous
@section Speed keys
@cindex speed keys
@vindex org-use-speed-commands
@vindex org-speed-commands-user

最初のアスタリスクの前のように，カーソルが見出しの先頭にある時，シングルキー
はコマンドを実行できるようになっています．@code{org-use-speed-commands}変数を設定
することでこの機能を有効にします．あらかじめ定義されているコマンドのリストを
挙げます．そして，@code{org-speed-commans-user}変数にコマンドを追加することもでき
ます．Speed
keysは操作や他のコマンドを使うスピードを上げるだけではなく，TTYやキーボードに
限界があるモバイル端末上で実行できない，または簡単に実行できないキーに割り当
てられたコマンドを実行するための別の可能性を提供します．

コマンドが実行可能かどうかを見るには，機能を有効にして見出しの先頭にカーソル
を置いて@kbd{?}を押します．

@node Code evaluation security, Customization, Speed keys, Miscellaneous
@section コードの評価とセキュリティの問題

Org-modeは評価を含むコードのスニペットを使って作業をするためのツールを提供し
ます．

あなたのマシン上でコードが動くことは常にセキュリティのリスクをもたらします．
目的のため，またはアクシデントによって良くないコードや悪意のあるコードは実行
されます．Org-modeはあなたが明確に実行の許可を与える場合のみそのようなコード
を評価するデフォルトの設定を持っていて，そしてカジュアルなユーザに対してはこ
れらの機能は予防措置として保つべきです．

そのようなコードを通常用いる人々のために，確認用のプロンプトが表示され，そし
てあなたはそれをオフにするかもしれません．これを行うことは可能ですが，あなた
はリスクとかかわることを承知しなくてはなりません．

コードの評価は以下に挙げる状況を引き起こします:

@table @i
@item ソースコードブロック
ソースコードブロックはエクスポート中かブロック中で@kbd{C-c C-c}を押した時に評価さ
れます．ここで最も重要な事はコードスニペットを含むOrg-modeのファイルがある意
味で，実行可能なファイルに似ているということです．それで，あたはそれらに対応
し正しいソースのみをEmacsにロードすべきです--
あなたがコンピュータ上にインストールしたプログラムのように．

デフォルトのセキュリティー装置を切る変数をカスタマイズする前にあなたがしてい
ることを確かめてください．

@defopt org-confirm-babel-evaluate
t(これがデフォルトです)の時，ユーザはコードブロックを評価する前に毎回確認され
ます．nilの時，ユーザは確認されません．関数をセットすると，それは2つの引数(言
語とコードブロックの本体)を伴って呼ばれ，tを返せば尋ね，nilならば尋ねません．
@end defopt

例えば，これは\"ditaa\"コード(安全性は考慮されています)を確認無しで実行する方
法です:
@example
(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang "ditaa")))  ; don't ask for ditaa
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
@end example

@item 以下の@code{shell}と@code{elisp}はリンクしています．
Org-modeはコードを直接評価できる2つのリンクタイプ(@pxref{External links})を持ってい
ます．実行されるコードが見えないため，これらのリンクは問題がありえます．

@defopt org-confirm-shell-link-function
シェルへのリンクを実行するための問い合わせを行う関数．
@end defopt
@defopt org-confirm-elisp-link-function
Emacs Lispへのリンクを実行するための問い合わせを行う関数．
@end defopt

@item 表中の式
表中の式(@pxref{The spreadsheet})は@i{calc}インタプリタでも@i{Emacs Lisp}インタプリタで
も実行できるコードです．
@end table

@node Customization, In-buffer settings, Code evaluation security, Miscellaneous
@section Customization
@cindex カスタマイズ
@cindex カスタマイズのオプション
@cindex カスタマイズの変数

Org-modeをカスタマイズするために使われる変数は180以上あります．マニュアルの圧
縮のため，私はここで変数の説明はしません．変数のカスタマイズの構造化された概
要は@kbd{M-x org-customize}で見ることができます．もしくは，@code{Org->Customization}か
ら@code{Browse Org Group}を選択してください．多くの設定はバッファに特別な行を書く
こと(@pxref{In-buffer settings})でそのファイル中で有効にすることができます．

@node In-buffer settings, The very busy C-c C-c key, Customization, Miscellaneous
@section Summary of in-buffer settings
@cindex in-buffer settings
@cindex special keywords

Org-mode uses special lines in the buffer to define settings on a per-file
basis.  These lines start with a @samp{#+} followed by a keyword, a colon,
and then individual words defining a setting.  Several setting words can be
in the same line, but you can also have multiple lines for the keyword.
While these settings are described throughout the manual, here is a
summary.  After changing any of those lines in the buffer, press @kbd{C-c C-c} with the cursor still in the line to activate the changes immediately.
Otherwise they become effective only when the file is visited again in a new
Emacs session.

@vindex org-archive-location
@table @kbd
@item #+ARCHIVE: %s_done::
This line sets the archive location for the agenda file.  It applies for all
subsequent lines until the next @samp{#+ARCHIVE} line, or the end of the
file.  The first such line also applies to any entries before it.  The
corresponding variable is @code{org-archive-location}.
@item #+CATEGORY:
This line sets the category for the agenda file.  The category applies for
all subsequent lines until the next @samp{#+CATEGORY} line, or the end of
the file.  The first such line also applies to any entries before it.
@item #+COLUMNS: %25ITEM .....
@cindex プロパティ（COLUMNS）
Set the default format for columns view.  This format applies when columns
view is invoked in locations where no @code{COLUMNS} property applies.
@item #+CONSTANTS: name1=value1 ...
@vindex org-table-formula-constants
@vindex org-table-formula
Set file-local values for constants to be used in table formulas.  This line
sets the local variable @code{org-table-formula-constants-local}.  The
global version of this variable is @code{org-table-formula-constants}.
@item #+FILETAGS: :tag1:tag2:tag3:
Set tags that can be inherited by any entry in the file, including the
top-level entries.
@item #+DRAWERS: NAME1 .....
@vindex org-drawers
Set the file-local set of drawers.  The corresponding global variable is
@code{org-drawers}.
@item #+LINK:  linkword replace
@vindex org-link-abbrev-alist
These lines (several are allowed) specify link abbreviations.  @xref{Link abbreviations}.  The corresponding variable is @code{org-link-abbrev-alist}.
@item #+PRIORITIES: highest lowest default
@vindex org-highest-priority
@vindex org-lowest-priority
@vindex org-default-priority
This line sets the limits and the default for the priorities.  All three
must be either letters A-Z or numbers 0-9.  The highest priority must have a
lower ASCII number than the lowest priority.
@item #+PROPERTY: Property_Name Value
This line sets a default inheritance value for entries in the current
buffer, most useful for specifying the allowed values of a property.
@cindex #+SETUPFILE
@item #+SETUPFILE: file
This line defines a file that holds more in-buffer setup.  Normally this is
entirely ignored.  Only when the buffer is parsed for option-setting lines
(i.e.@: when starting Org-mode for a file, when pressing @kbd{C-c C-c} in a
settings line, or when exporting), then the contents of this file are parsed
as if they had been included in the buffer.  In particular, the file can be
any other Org-mode file with internal setup.  You can visit the file the
cursor is in the line with @kbd{C-c '}.
@item #+STARTUP:
@cindex #+STARTUP:
This line sets options to be used at startup of Org-mode, when an Org file
is being visited.

The first set of options deals with the initial visibility of the outline
tree.  The corresponding variable for global default settings is
@code{org-startup-folded}, with a default value @code{t}, which means
@code{overview}.
@vindex org-startup-folded
@cindex @code{overview}, STARTUPキーワード
@cindex @code{content}, STARTUPキーワード
@cindex @code{showall}, STARTUPキーワード
@cindex @code{showeverything}, STARTUPキーワード
@example
overview         @r{top-level headlines only}
content          @r{all headlines}
showall          @r{no folding of any entries}
showeverything   @r{show even drawer contents}
@end example

@vindex org-startup-indented
@cindex @code{indent}, STARTUP keyword
@cindex @code{noindent}, STARTUP keyword
Dynamic virtual indentation is controlled by the variable
@code{org-startup-indented}@footnote{Emacs 23 and Org-mode 6.29 are required}
@example
indent     @r{start with @code{org-indent-mode} turned on}
noindent   @r{start with @code{org-indent-mode} turned off}
@end example

@vindex org-startup-align-all-tables
Then there are options for aligning tables upon visiting a file.  This is
useful in files containing narrowed table columns.  The corresponding
variable is @code{org-startup-align-all-tables}, with a default value
@code{nil}.
@cindex @code{align}, STARTUP keyword
@cindex @code{noalign}, STARTUP keyword
@example
align      @r{align all tables}
noalign    @r{don't align tables on startup}
@end example

@vindex org-startup-with-inline-images
When visiting a file, inline images can be automatically displayed.  The
corresponding variable is @code{org-startup-with-inline-images}, with a
default value @code{nil} to avoid delays when visiting a file.
@cindex @code{inlineimages}, STARTUP keyword
@cindex @code{noinlineimages}, STARTUP keyword
@example
inlineimages   @r{show inline images}
noinlineimages @r{don't show inline images on startup}
@end example

@vindex org-log-done
@vindex org-log-note-clock-out
@vindex org-log-repeat
Logging the closing and reopening of TODO items and clock intervals can be
configured using these options (see variables @code{org-log-done},
@code{org-log-note-clock-out} and @code{org-log-repeat})
@cindex @code{logdone}, STARTUP keyword
@cindex @code{lognotedone}, STARTUP keyword
@cindex @code{nologdone}, STARTUP keyword
@cindex @code{lognoteclock-out}, STARTUP keyword
@cindex @code{nolognoteclock-out}, STARTUP keyword
@cindex @code{logrepeat}, STARTUP keyword
@cindex @code{lognoterepeat}, STARTUP keyword
@cindex @code{nologrepeat}, STARTUP keyword
@cindex @code{logreschedule}, STARTUP keyword
@cindex @code{lognotereschedule}, STARTUP keyword
@cindex @code{nologreschedule}, STARTUP keyword
@cindex @code{logredeadline}, STARTUP keyword
@cindex @code{lognoteredeadline}, STARTUP keyword
@cindex @code{nologredeadline}, STARTUP keyword
@cindex @code{logrefile}, STARTUP keyword
@cindex @code{lognoterefile}, STARTUP keyword
@cindex @code{nologrefile}, STARTUP keyword
@example
logdone            @r{record a timestamp when an item is marked DONE}
lognotedone        @r{record timestamp and a note when DONE}
nologdone          @r{don't record when items are marked DONE}
logrepeat          @r{record a time when reinstating a repeating item}
lognoterepeat      @r{record a note when reinstating a repeating item}
nologrepeat        @r{do not record when reinstating repeating item}
lognoteclock-out   @r{record a note when clocking out}
nolognoteclock-out @r{don't record a note when clocking out}
logreschedule      @r{record a timestamp when scheduling time changes}
lognotereschedule  @r{record a note when scheduling time changes}
nologreschedule    @r{do not record when a scheduling date changes}
logredeadline      @r{record a timestamp when deadline changes}
lognoteredeadline  @r{record a note when deadline changes}
nologredeadline    @r{do not record when a deadline date changes}
logrefile          @r{record a timestamp when refiling}
lognoterefile      @r{record a note when refiling}
nologrefile        @r{do not record when refiling}
@end example
@vindex org-hide-leading-stars
@vindex org-odd-levels-only
Here are the options for hiding leading stars in outline headings, and for
indenting outlines.  The corresponding variables are
@code{org-hide-leading-stars} and @code{org-odd-levels-only}, both with a
default setting @code{nil} (meaning @code{showstars} and @code{oddeven}).
@cindex @code{hidestars}, STARTUP keyword
@cindex @code{showstars}, STARTUP keyword
@cindex @code{odd}, STARTUP keyword
@cindex @code{even}, STARTUP keyword
@example
hidestars  @r{make all but one of the stars starting a headline invisible.}
showstars  @r{show all stars starting a headline}
indent     @r{virtual indentation according to outline level}
noindent   @r{no virtual indentation according to outline level}
odd        @r{allow only odd outline levels (1,3,...)}
oddeven    @r{allow all outline levels}
@end example
@vindex org-put-time-stamp-overlays
@vindex org-time-stamp-overlay-formats
To turn on custom format overlays over timestamps (variables
@code{org-put-time-stamp-overlays} and
@code{org-time-stamp-overlay-formats}), use
@cindex @code{customtime}, STARTUP keyword
@example
customtime @r{overlay custom time format}
@end example
@vindex constants-unit-system
The following options influence the table spreadsheet (variable
@code{constants-unit-system}).
@cindex @code{constcgs}, STARTUP keyword
@cindex @code{constSI}, STARTUP keyword
@example
constcgs   @r{@file{constants.el} should use the c-g-s unit system}
constSI    @r{@file{constants.el} should use the SI unit system}
@end example
@vindex org-footnote-define-inline
@vindex org-footnote-auto-label
@vindex org-footnote-auto-adjust
To influence footnote settings, use the following keywords.  The
corresponding variables are @code{org-footnote-define-inline},
@code{org-footnote-auto-label}, and @code{org-footnote-auto-adjust}.
@cindex @code{fninline}, STARTUP keyword
@cindex @code{nofninline}, STARTUP keyword
@cindex @code{fnlocal}, STARTUP keyword
@cindex @code{fnprompt}, STARTUP keyword
@cindex @code{fnauto}, STARTUP keyword
@cindex @code{fnconfirm}, STARTUP keyword
@cindex @code{fnplain}, STARTUP keyword
@cindex @code{fnadjust}, STARTUP keyword
@cindex @code{nofnadjust}, STARTUP keyword
@example
fninline    @r{define footnotes inline}
fnnoinline  @r{define footnotes in separate section}
fnlocal     @r{define footnotes near first reference, but not inline}
fnprompt    @r{prompt for footnote labels}
fnauto      @r{create @code{[fn:1]}-like labels automatically (default)}
fnconfirm   @r{offer automatic label for editing or confirmation}
fnplain     @r{create @code{[1]}-like labels automatically}
fnadjust    @r{automatically renumber and sort footnotes}
nofnadjust  @r{do not renumber and sort automatically}
@end example
@cindex org-hide-block-startup
To hide blocks on startup, use these keywords. The corresponding variable is
@code{org-hide-block-startup}.
@cindex @code{hideblocks}, STARTUP keyword
@cindex @code{nohideblocks}, STARTUP keyword
@example
hideblocks   @r{Hide all begin/end blocks on startup}
nohideblocks @r{Do not hide blocks on startup}
@end example
@cindex org-pretty-entities
The display of entities as UTF-8 characters is governed by the variable
@code{org-pretty-entities} and the keywords
@cindex @code{entitiespretty}, STARTUP keyword
@cindex @code{entitiesplain}, STARTUP keyword
@example
entitiespretty  @r{Show entities as UTF-8 characters where possible}
entitiesplain   @r{Leave entities plain}
@end example
@item #+TAGS:  TAG1(c1) TAG2(c2)
@vindex org-tag-alist
These lines (several such lines are allowed) specify the valid tags in this
file, and (potentially) the corresponding @emph{fast tag selection} keys.
The corresponding variable is @code{org-tag-alist}.
@item #+TBLFM:
This line contains the formulas for the table directly above the line.
@item #+TITLE:, #+AUTHOR:, #+EMAIL:, #+LANGUAGE:, #+TEXT:, #+DATE:,
@itemx #+OPTIONS:, #+BIND:, #+XSLT:,
@itemx #+DESCRIPTION:, #+KEYWORDS:,
@itemx #+LATEX_HEADER:, #+STYLE:, #+LINK_UP:, #+LINK_HOME:,
@itemx #+EXPORT_SELECT_TAGS:, #+EXPORT_EXCLUDE_TAGS:
These lines provide settings for exporting files.  For more details see
@ref{Export options}.
@item #+TODO:    #+SEQ_TODO:   #+TYP_TODO:
@vindex org-todo-keywords
These lines set the TODO keywords and their interpretation in the current
file.  The corresponding variable is @code{org-todo-keywords}.
@end table

@node The very busy C-c C-c key, Clean view, In-buffer settings, Miscellaneous
@section The very busy C-c C-c key
@kindex C-c C-c
@cindex C-c C-c, overview

The key @kbd{C-c C-c} has many purposes in Org, which are all mentioned
scattered throughout this manual.  One specific function of this key is to
add @emph{tags} to a headline (@pxref{Tags}).  In many other circumstances
it means something like @emph{``Hey Org, look here and update according to what you see here''}.  Here is a summary of what this means in different
contexts.

@itemize @minus
@item
If there are highlights in the buffer from the creation of a sparse tree, or
from clock display, remove these highlights.
@item
If the cursor is in one of the special @code{#+KEYWORD} lines, this triggers
scanning the buffer for these lines and updating the information.
@item
If the cursor is inside a table, realign the table.  This command works even
if the automatic table editor has been turned off.
@item
If the cursor is on a @code{#+TBLFM} line, re-apply the formulas to the
entire table.
@item
If the current buffer is a capture buffer, close the note and file it.  With
a prefix argument, file it, without further interaction, to the default
location.
@item
If the cursor is on a @code{<<<target>>>}, update radio targets and
corresponding links in this buffer.
@item
If the cursor is in a property line or at the start or end of a property
drawer, offer property commands.
@item
If the cursor is at a footnote reference, go to the corresponding
definition, and vice versa.
@item
If the cursor is on a statistics cookie, update it.
@item
If the cursor is in a plain list item with a checkbox, toggle the status of
the checkbox.
@item
If the cursor is on a numbered item in a plain list, renumber the ordered
list.
@item
If the cursor is on the @code{#+BEGIN} line of a dynamic block, the block is
updated.
@end itemize

@node Clean view, TTY keys, The very busy C-c C-c key, Miscellaneous
@section A cleaner outline view
@cindex hiding leading stars
@cindex dynamic indentation
@cindex odd-levels-only outlines
@cindex clean outline view

Some people find it noisy and distracting that the Org headlines start with
a potentially large number of stars, and that text below the headlines is
not indented.  While this is no problem when writing a @emph{book-like}
document where the outline headings are really section headings, in a more
@emph{list-oriented} outline, indented structure is a lot cleaner:

@example
@group
* Top level headline             |    * Top level headline
** Second level                  |      * Second level
*** 3rd level                    |        * 3rd level
some text                        |          some text
*** 3rd level                    |        * 3rd level
more text                        |          more text
* Another top level headline     |    * Another top level headline
@end group
@end example

@noindent

If you are using at least Emacs 23.2@footnote{Emacs 23.1 can actually crash with @code{org-indent-mode}} and version 6.29 of Org, this kind of view can
be achieved dynamically at display time using @code{org-indent-mode}.  In
this minor mode, all lines are prefixed for display with the necessary
amount of space@footnote{@code{org-indent-mode} also sets the
@code{wrap-prefix} property, such that @code{visual-line-mode} (or purely
setting @code{word-wrap}) wraps long lines (including headlines) correctly
indented.  }.  Also headlines are prefixed with additional stars, so that
the amount of indentation shifts by two@footnote{See the variable @code{org-indent-indentation-per-level}.} spaces per level.  All headline
stars but the last one are made invisible using the @code{org-hide}
face@footnote{Turning on @code{org-indent-mode} sets
@code{org-hide-leading-stars} to @code{t} and @code{org-adapt-indentation}
to @code{nil}.} - see below under @samp{2.} for more information on how this
works.  You can turn on @code{org-indent-mode} for all files by customizing
the variable @code{org-startup-indented}, or you can turn it on for
individual files using

@example
#+STARTUP: indent
@end example

If you want a similar effect in an earlier version of Emacs and/or Org, or
if you want the indentation to be hard space characters so that the plain
text file looks as similar as possible to the Emacs display, Org supports
you in the following way:

@enumerate
@item
@emph{Indentation of text below headlines}@* You may indent text below each
headline to make the left boundary line up with the headline, like

@example
*** 3rd level
    more text, now indented
@end example

@vindex org-adapt-indentation
Org supports this with paragraph filling, line wrapping, and structure
editing@footnote{See also the variable @code{org-adapt-indentation}.},
preserving or adapting the indentation as appropriate.

@item
@vindex org-hide-leading-stars
@emph{Hiding leading stars}@* You can modify the display in such a way that
all leading stars become invisible.  To do this in a global way, configure
the variable @code{org-hide-leading-stars} or change this on a per-file
basis with

@example
#+STARTUP: hidestars
#+STARTUP: showstars
@end example

With hidden stars, the tree becomes:

@example
@group
* Top level headline
 * Second level
  * 3rd level
  ...
@end group
@end example

@noindent
@vindex org-hide @r{(face)}
The leading stars are not truly replaced by whitespace, they are only
fontified with the face @code{org-hide} that uses the background color as
font color.  If you are not using either white or black background, you may
have to customize this face to get the wanted effect.  Another possibility
is to set this font such that the extra stars are @i{almost} invisible, for
example using the color @code{grey90} on a white background.

@item
@vindex org-odd-levels-only
Things become cleaner still if you skip all the even levels and use only odd
levels 1, 3, 5..., effectively adding two stars to go from one outline level
to the next@footnote{When you need to specify a level for a property search or refile targets, @samp{LEVEL=2} will correspond to 3 stars, etc@.}.  In
this way we get the outline view shown at the beginning of this section.  In
order to make the structure editing and export commands handle this
convention correctly, configure the variable @code{org-odd-levels-only}, or
set this on a per-file basis with one of the following lines:

@example
#+STARTUP: odd
#+STARTUP: oddeven
@end example

You can convert an Org file from single-star-per-level to the
double-star-per-level convention with @kbd{M-x org-convert-to-odd-levels RET} in that file.  The reverse operation is @kbd{M-x org-convert-to-oddeven-levels}.
@end enumerate

@node TTY keys, Interaction, Clean view, Miscellaneous
@section Org-modeをtty端末で使う
@cindex tty key bindings

Because Org contains a large number of commands, by default many of Org's
core commands are bound to keys that are generally not accessible on a tty,
such as the cursor keys (@key{left}, @key{right}, @key{up}, @key{down}),
@key{TAB} and @key{RET}, in particular when used together with modifiers
like @key{Meta} and/or @key{Shift}.  To access these commands on a tty when
special keys are unavailable, the following alternative bindings can be
used.  The tty bindings below will likely be more cumbersome; you may find
for some of the bindings below that a customized workaround suits you
better.  For example, changing a timestamp is really only fun with
@kbd{S-@key{cursor}} keys, whereas on a tty you would rather use @kbd{C-c .}
to re-insert the timestamp.

@multitable @columnfractions 0.15 0.2 0.1 0.2
@item @b{Default} @tab @b{Alternative 1} @tab @b{Speed key} @tab @b{Alternative 2}
@item @kbd{S-@key{TAB}}     @tab @kbd{C-u @key{TAB}}       @tab @kbd{C} @tab
@item @kbd{M-@key{left}}    @tab @kbd{C-c C-x l}           @tab @kbd{l} @tab @kbd{@key{Esc} @key{left}}
@item @kbd{M-S-@key{left}}  @tab @kbd{C-c C-x L}           @tab @kbd{L} @tab
@item @kbd{M-@key{right}}   @tab @kbd{C-c C-x r}           @tab @kbd{r} @tab @kbd{@key{Esc} @key{right}}
@item @kbd{M-S-@key{right}} @tab @kbd{C-c C-x R}           @tab @kbd{R} @tab
@item @kbd{M-@key{up}}      @tab @kbd{C-c C-x u}           @tab @kbd{ } @tab @kbd{@key{Esc} @key{up}}
@item @kbd{M-S-@key{up}}    @tab @kbd{C-c C-x U}           @tab @kbd{U} @tab
@item @kbd{M-@key{down}}    @tab @kbd{C-c C-x d}           @tab @kbd{ } @tab @kbd{@key{Esc} @key{down}}
@item @kbd{M-S-@key{down}}  @tab @kbd{C-c C-x D}           @tab @kbd{D} @tab
@item @kbd{S-@key{RET}}     @tab @kbd{C-c C-x c}           @tab @kbd{ } @tab
@item @kbd{M-@key{RET}}     @tab @kbd{C-c C-x m}           @tab @kbd{ } @tab @kbd{@key{Esc} @key{RET}}
@item @kbd{M-S-@key{RET}}   @tab @kbd{C-c C-x M}           @tab @kbd{ } @tab
@item @kbd{S-@key{left}}    @tab @kbd{C-c @key{left}}      @tab @kbd{ } @tab
@item @kbd{S-@key{right}}   @tab @kbd{C-c @key{right}}     @tab @kbd{ } @tab
@item @kbd{S-@key{up}}      @tab @kbd{C-c @key{up}}        @tab @kbd{ } @tab
@item @kbd{S-@key{down}}    @tab @kbd{C-c @key{down}}      @tab @kbd{ } @tab
@item @kbd{C-S-@key{left}}  @tab @kbd{C-c C-x @key{left}}  @tab @kbd{ } @tab
@item @kbd{C-S-@key{right}} @tab @kbd{C-c C-x @key{right}} @tab @kbd{ } @tab
@end multitable


@node Interaction, , TTY keys, Miscellaneous
@section 他のパッケージとの関係
@cindex packages, interaction with other
Org lives in the world of GNU Emacs and interacts in various ways with other
code out there.

@menu
* Cooperation::              Orgと連携するパッケージ
* Conflicts::                衝突を起こすパッケージ
@end menu

@node Cooperation, Conflicts, Interaction, Interaction
@subsection Packages that Org cooperates with

@table @asis
@cindex @file{calc.el}
@cindex Gillespie, Dave
@item @file{calc.el} by Dave Gillespie
Org uses the Calc package for implementing spreadsheet functionality in its
tables (@pxref{The spreadsheet}).  Org checks for the availability of Calc
by looking for the function @code{calc-eval} which will have been autoloaded
during setup if Calc has been installed properly.  As of Emacs 22, Calc is
part of the Emacs distribution.  Another possibility for interaction between
the two packages is using Calc for embedded calculations. @xref{Embedded Mode, , Embedded Mode, Calc, GNU Emacs Calc Manual}.
@item @file{constants.el} by Carsten Dominik
@cindex @file{constants.el}
@cindex Dominik, Carsten
@vindex org-table-formula-constants
In a table formula (@pxref{The spreadsheet}), it is possible to use names
for natural constants or units.  Instead of defining your own constants in
the variable @code{org-table-formula-constants}, install the
@file{constants} package which defines a large number of constants and
units, and lets you use unit prefixes like @samp{M} for @samp{Mega}, etc@.
You will need version 2.0 of this package, available at
@url{http://www.astro.uva.nl/~dominik/Tools}. Org checks for the function
@code{constants-get}, which has to be autoloaded in your setup.  See the
installation instructions in the file @file{constants.el}.
@item @file{cdlatex.el} by Carsten Dominik
@cindex @file{cdlatex.el}
@cindex Dominik, Carsten
Org-mode can make use of the CDLa@TeX{} package to efficiently enter
@LaTeX{} fragments into Org files.  See @ref{CDLaTeX mode}.
@item @file{imenu.el} by Ake Stenhoff and Lars Lindberg
@cindex @file{imenu.el}
Imenu allows menu access to an index of items in a file.  Org-mode supports
Imenu---all you need to do to get the index is the following:
@lisp
(add-hook 'org-mode-hook
          (lambda () (imenu-add-to-menubar "Imenu")))
@end lisp
@vindex org-imenu-depth
By default the index is two levels deep---you can modify the depth using the
option @code{org-imenu-depth}.
@item @file{remember.el} by John Wiegley
@cindex @file{remember.el}
@cindex Wiegley, John
Org used to use this package for capture, but no longer does.
@item @file{speedbar.el} by Eric M. Ludlam
@cindex @file{speedbar.el}
@cindex Ludlam, Eric M.
Speedbar is a package that creates a special frame displaying files and
index items in files.  Org-mode supports Speedbar and allows you to drill
into Org files directly from the Speedbar.  It also allows you to restrict
the scope of agenda commands to a file or a subtree by using the command
@kbd{<} in the Speedbar frame.
@cindex @file{table.el}
@item @file{table.el} by Takaaki Ota
@kindex C-c C-c
@cindex table editor, @file{table.el}
@cindex @file{table.el}
@cindex Ota, Takaaki

Complex ASCII tables with automatic line wrapping, column- and row-spanning,
and alignment can be created using the Emacs table package by Takaaki Ota
(@uref{http://sourceforge.net/projects/table}, and also part of Emacs 22).
Org-mode will recognize these tables and export them properly.  Because of
interference with other Org-mode functionality, you unfortunately cannot
edit these tables directly in the buffer.  Instead, you need to use the
command @kbd{C-c '} to edit them, similar to source code snippets.

@table @kbd
@c
@orgcmd{C-c ',org-edit-special} Edit a @file{table.el} table.  Works when
the cursor is in a table.el table.  @orgcmd{C-c ~,org-table-create-with-table.el} Insert a @file{table.el} table.  If there
is already a table at point, this command converts it between the
@file{table.el} format and the Org-mode format.  See the documentation
string of the command @code{org-convert-table} for the restrictions under
which this is possible.
@end table
@file{table.el} is part of Emacs since Emacs 22.
@item @file{footnote.el} by Steven L. Baur
@cindex @file{footnote.el}
@cindex Baur, Steven L.
Org-mode recognizes numerical footnotes as provided by this package.
However, Org-mode also has its own footnote support (@pxref{Footnotes}),
which makes using @file{footnote.el} unnecessary.
@end table

@node Conflicts, , Cooperation, Interaction
@subsection Packages that lead to conflicts with Org-mode

@table @asis

@cindex @code{shift-selection-mode}
@vindex org-support-shift-select
In Emacs 23, @code{shift-selection-mode} is on by default, meaning that
cursor motions combined with the shift key should start or enlarge regions.
This conflicts with the use of @kbd{S-@key{cursor}} commands in Org to
change timestamps, TODO keywords, priorities, and item bullet types if the
cursor is at such a location.  By default, @kbd{S-@key{cursor}} commands
outside special contexts don't do anything, but you can customize the
variable @code{org-support-shift-select}.  Org-mode then tries to
accommodate shift selection by (i) using it outside of the special contexts
where special commands apply, and by (ii) extending an existing active
region even if the cursor moves across a special context.

@item @file{CUA.el} by Kim. F. Storm
@cindex @file{CUA.el}
@cindex Storm, Kim. F.
@vindex org-replace-disputed-keys
Key bindings in Org conflict with the @kbd{S-<cursor>} keys used by CUA mode
(as well as @code{pc-select-mode} and @code{s-region-mode}) to select and
extend the region.  In fact, Emacs 23 has this built-in in the form of
@code{shift-selection-mode}, see previous paragraph.  If you are using Emacs
23, you probably don't want to use another package for this purpose.
However, if you prefer to leave these keys to a different package while
working in Org-mode, configure the variable
@code{org-replace-disputed-keys}.  When set, Org will move the following key
bindings in Org files, and in the agenda buffer (but not during date
selection).

@example
S-UP      @result{}  M-p             S-DOWN     @result{}  M-n
S-LEFT    @result{}  M--             S-RIGHT    @result{}  M-+
C-S-LEFT  @result{}  M-S--           C-S-RIGHT  @result{}  M-S-+
@end example

@vindex org-disputed-keys
Yes, these are unfortunately more difficult to remember.  If you want to
have other replacement keys, look at the variable @code{org-disputed-keys}.

@item @file{yasnippet.el}
@cindex @file{yasnippet.el}
The way Org mode binds the TAB key (binding to @code{[tab]} instead of
@code{"\t"}) overrules YASnippet's access to this key.  The following code
fixed this problem:

@lisp
(add-hook 'org-mode-hook
          (lambda ()
            (org-set-local 'yas/trigger-key [tab])
            (define-key yas/keymap [tab] 'yas/next-field-group)))
@end lisp

The latest version of yasnippet doesn't play well with Org mode. If the
above code does not fix the conflict, start by defining the following
function:

@lisp
(defun yas/org-very-safe-expand ()
       (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
@end lisp

Then, tell Org mode what to do with the new function:

@lisp
(add-hook 'org-mode-hook
          (lambda ()
              (make-variable-buffer-local 'yas/trigger-key)
              (setq yas/trigger-key [tab])
              (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              (define-key yas/keymap [tab] 'yas/next-field)))
@end lisp

@item @file{windmove.el} by Hovav Shacham
@cindex @file{windmove.el}
This package also uses the @kbd{S-<cursor>} keys, so everything written in
the paragraph above about CUA mode also applies here.  If you want make the
windmove function active in locations where Org-mode does not have special
functionality on @kbd{S-@key{cursor}}, add this to your configuration:

@lisp
;; Make windmove work in org-mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
@end lisp

@item @file{viper.el} by Michael Kifer
@cindex @file{viper.el}
@kindex C-c /
Viper uses @kbd{C-c /} and therefore makes this key not access the
corresponding Org-mode command @code{org-sparse-tree}.  You need to find
another key for this command, or override the key in
@code{viper-vi-global-user-map} with

@lisp
(define-key viper-vi-global-user-map "C-c /" 'org-sparse-tree)
@end lisp

@end table


@node Hacking, MobileOrg, Miscellaneous, Top
@appendix Hacking
@cindex hacking

This appendix covers some aspects where users can extend the functionality
of Org.

@menu
* Hooks::                    Orgの内部にアクセスするのはどれ？
* Add-on packages::          利用できるエクステンション
* Adding hyperlink types::   新しいリンクタイプの作成
* Context-sensitive commands::  機能的なコマンドの追加方法
* Tables in arbitrary syntax::  @LaTeX{}のためのOrgtblと他のプログラム
* Dynamic blocks::           自動的にブロック内に挿入する
* Special agenda views::     カスタマイズされたビュー
* Extracting agenda information::  アジェンダ情報の後処理
* Using the property API::   項目のプロパティを使ったプログラミング
* マッピングAPIを使う::  選択した項目、または全てのマッピング
@end menu

@node Hooks, Add-on packages, Hacking, Hacking
@section Hooks
@cindex hooks

Org has a large number of hook variables that can be used to add
functionality.  This appendix about hacking is going to illustrate the use
of some of them.  A complete list of all hooks with documentation is
maintained by the Worg project and can be found at
@uref{http://orgmode.org/worg/org-configs/org-hooks.php}.

@node Add-on packages, Adding hyperlink types, Hooks, Hacking
@section Add-on packages
@cindex add-on packages

A large number of add-on packages have been written by various authors.
These packages are not part of Emacs, but they are distributed as
contributed packages with the separate release available at the Org-mode
home page at @uref{http://orgmode.org}.  The list of contributed packages,
along with documentation about each package, is maintained by the Worg
project at @uref{http://orgmode.org/worg/org-contrib/}.



@node Adding hyperlink types, Context-sensitive commands, Add-on packages, Hacking
@section Adding hyperlink types
@cindex hyperlinks, adding new types

Org has a large number of hyperlink types built-in (@pxref{Hyperlinks}).  If
you would like to add new link types, Org provides an interface for doing
so.  Let's look at an example file, @file{org-man.el}, that will add support
for creating links like @samp{[[man:printf][The printf manpage]]} to show
Unix manual pages inside Emacs:

@lisp
;;; org-man.el - Support for links to manpages in Org

(require 'org)

(org-add-link-type "man" 'org-man-open)
(add-hook 'org-store-link-functions 'org-man-store-link)

(defcustom org-man-command 'man
  "The Emacs command to be used to display a man page."
  :group 'org-link
  :type '(choice (const man) (const woman)))

(defun org-man-open (path)
  "Visit the manpage on PATH.
PATH should be a topic that can be thrown at the man command."
  (funcall org-man-command path))

(defun org-man-store-link ()
  "Store a link to a manpage."
  (when (memq major-mode '(Man-mode woman-mode))
    ;; This is a man page, we do make this link
    (let* ((page (org-man-get-page-name))
           (link (concat "man:" page))
           (description (format "Manpage for %s" page)))
      (org-store-link-props
       :type "man"
       :link link
       :description description))))

(defun org-man-get-page-name ()
  "Extract the page name from the buffer name."
  ;; This works for both `Man-mode' and `woman-mode'.
  (if (string-match " \\(\\S-+\\)\\*" (buffer-name))
      (match-string 1 (buffer-name))
    (error "Cannot create link to this man page")))

(provide 'org-man)

;;; org-man.el ends here
@end lisp

@noindent
You would activate this new link type in @file{.emacs} with

@lisp
(require 'org-man)
@end lisp

@noindent
Let's go through the file and see what it does.
@enumerate
@item
It does @code{(require 'org)} to make sure that @file{org.el} has been
loaded.
@item
The next line calls @code{org-add-link-type} to define a new link type with
prefix @samp{man}.  The call also contains the name of a function that will
be called to follow such a link.
@item
@vindex org-store-link-functions
The next line adds a function to @code{org-store-link-functions}, in order
to allow the command @kbd{C-c l} to record a useful link in a buffer
displaying a man page.
@end enumerate

The rest of the file defines the necessary variables and functions.  First
there is a customization variable that determines which Emacs command should
be used to display man pages.  There are two options, @code{man} and
@code{woman}.  Then the function to follow a link is defined.  It gets the
link path as an argument---in this case the link path is just a topic for
the manual command.  The function calls the value of @code{org-man-command}
to display the man page.

Finally the function @code{org-man-store-link} is defined.  When you try to
store a link with @kbd{C-c l}, this function will be called to try to make a
link.  The function must first decide if it is supposed to create the link
for this buffer type; we do this by checking the value of the variable
@code{major-mode}.  If not, the function must exit and return the value
@code{nil}.  If yes, the link is created by getting the manual topic from
the buffer name and prefixing it with the string @samp{man:}.  Then it must
call the command @code{org-store-link-props} and set the @code{:type} and
@code{:link} properties.  Optionally you can also set the
@code{:description} property to provide a default for the link description
when the link is later inserted into an Org buffer with @kbd{C-c C-l}.

When it makes sense for your new link type, you may also define a function
@code{org-PREFIX-complete-link} that implements special (e.g.@: completion)
support for inserting such a link with @kbd{C-c C-l}.  Such a function
should not accept any arguments, and return the full link with prefix.

@node Context-sensitive commands, Tables in arbitrary syntax, Adding hyperlink types, Hacking
@section Context-sensitive commands
@cindex context-sensitive commands, hooks
@cindex add-ons, context-sensitive commands
@vindex org-ctrl-c-ctrl-c-hook

Org has several commands that act differently depending on context.  The
most important example it the @kbd{C-c C-c} (@pxref{The very busy C-c C-c key}).  Also the @kbd{M-cursor} and @kbd{M-S-cursor} keys have this
property.

Add-ons can tap into this functionality by providing a function that detects
special context for that add-on and executes functionality appropriate for
the context.  Here is an example from Dan Davison's @file{org-R.el} which
allows you to evaluate commands based on the @file{R} programming language
@footnote{@file{org-R.el} has been replaced by the org-mode functionality
described in @ref{Working With Source Code} and is now obsolete.}.  For this
package, special contexts are lines that start with @code{#+R:} or
@code{#+RR:}.

@lisp
(defun org-R-apply-maybe ()
  "Detect if this is context for org-R and execute R commands."
  (if (save-excursion
        (beginning-of-line 1)
        (looking-at "#\\+RR?:"))
      (progn (call-interactively 'org-R-apply)
             t) ;; to signal that we took action
    nil)) ;; to signal that we did not

(add-hook 'org-ctrl-c-ctrl-c-hook 'org-R-apply-maybe)
@end lisp

The function first checks if the cursor is in such a line.  If that is the
case, @code{org-R-apply} is called and the function returns @code{t} to
signal that action was taken, and @kbd{C-c C-c} will stop looking for other
contexts.  If the function finds it should do nothing locally, it returns
@code{nil} so that other, similar functions can have a try.


@node Tables in arbitrary syntax, Dynamic blocks, Context-sensitive commands, Hacking
@section 任意のシンタックスによる表やリスト
@cindex tables, in other modes
@cindex lists, in other modes
@cindex Orgtbl mode

Since Orgtbl mode can be used as a minor mode in arbitrary buffers, a
frequent feature request has been to make it work with native tables in
specific languages, for example @LaTeX{}.  However, this is extremely hard
to do in a general way, would lead to a customization nightmare, and would
take away much of the simplicity of the Orgtbl-mode table editor.

This appendix describes a different approach.  We keep the Orgtbl mode table
in its native format (the @i{source table}), and use a custom function to
@i{translate} the table to the correct syntax, and to @i{install} it in the
right location (the @i{target table}).  This puts the burden of writing
conversion functions on the user, but it allows for a very flexible system.

Bastien added the ability to do the same with lists, in Orgstruct mode.  You
can use Org's facilities to edit and structure lists by turning
@code{orgstruct-mode} on, then locally exporting such lists in another
format (HTML, @LaTeX{} or Texinfo.)


@menu
* Radio tables::             ラジオテーブルの送受信
* A LaTeX example::          少しずつ、チュートリアルのようなものを
* Translator functions::     コピーと修正
* ラジオリスト::       リストでも同じように
@end menu

@node Radio tables, A LaTeX example, Tables in arbitrary syntax, Tables in arbitrary syntax
@subsection Radio tables
@cindex radio tables

To define the location of the target table, you first need to create two
lines that are comments in the current mode, but contain magic words for
Orgtbl mode to find.  Orgtbl mode will insert the translated table between
these lines, replacing whatever was there before.  For example:

@example
/* BEGIN RECEIVE ORGTBL table_name */
/* END RECEIVE ORGTBL table_name */
@end example

@noindent
Just above the source table, we put a special line that tells Orgtbl mode
how to translate this table and where to install it.  For example:
@cindex #+ORGTBL
@example
#+ORGTBL: SEND table_name translation_function arguments....
@end example

@noindent
@code{table_name} is the reference name for the table that is also used in
the receiver lines. @code{translation_function} is the Lisp function that
does the translation.  Furthermore, the line can contain a list of arguments
(alternating key and value) at the end.  The arguments will be passed as a
property list to the translation function for interpretation.  A few
standard parameters are already recognized and acted upon before the
translation function is called:

@table @code
@item :skip N
Skip the first N lines of the table.  Hlines do count as separate lines for
this parameter!

@item :skipcols (n1 n2 ...)
List of columns that should be skipped.  If the table has a column with
calculation marks, that column is automatically discarded as well.  Please
note that the translator function sees the table @emph{after} the removal of
these columns, the function never knows that there have been additional
columns.
@end table

@noindent
The one problem remaining is how to keep the source table in the buffer
without disturbing the normal workings of the file, for example during
compilation of a C file or processing of a @LaTeX{} file.  There are a
number of different solutions:

@itemize @bullet
@item
The table could be placed in a block comment if that is supported by the
language.  For example, in C mode you could wrap the table between @samp{/*}
and @samp{*/} lines.
@item
Sometimes it is possible to put the table after some kind of @i{END}
statement, for example @samp{\bye} in @TeX{} and @samp{\end@{document@}} in
@LaTeX{}.
@item
You can just comment the table line-by-line whenever you want to process the
file, and uncomment it whenever you need to edit the table.  This only
sounds tedious---the command @kbd{M-x orgtbl-toggle-comment} makes this
comment-toggling very easy, in particular if you bind it to a key.
@end itemize

@node A LaTeX example, Translator functions, Radio tables, Tables in arbitrary syntax
@subsection A @LaTeX{} example of radio tables
@cindex @LaTeX{}, and Orgtbl mode

The best way to wrap the source table in @LaTeX{} is to use the
@code{comment} environment provided by @file{comment.sty}.  It has to be
activated by placing @code{\usepackage@{comment@}} into the document
header.  Orgtbl mode can insert a radio table skeleton@footnote{By default this works only for @LaTeX{}, HTML, and Texinfo.  Configure the variable
@code{orgtbl-radio-tables} to install templates for other modes.} with the
command @kbd{M-x orgtbl-insert-radio-table}.  You will be prompted for a
table name, let's say we use @samp{salesfigures}.  You will then get the
following template:

@cindex #+ORGTBL, SEND
@example
% BEGIN RECEIVE ORGTBL salesfigures
% END RECEIVE ORGTBL salesfigures
\begin@{comment@}
#+ORGTBL: SEND salesfigures orgtbl-to-latex
| | |
\end@{comment@}
@end example

@noindent
@vindex @LaTeX{}-verbatim-environments
The @code{#+ORGTBL: SEND} line tells Orgtbl mode to use the function
@code{orgtbl-to-latex} to convert the table into @LaTeX{} and to put it into
the receiver location with name @code{salesfigures}.  You may now fill in
the table---feel free to use the spreadsheet features@footnote{If the @samp{#+TBLFM} line contains an odd number of dollar characters, this may
cause problems with font-lock in @LaTeX{} mode.  As shown in the example you
can fix this by adding an extra line inside the @code{comment} environment
that is used to balance the dollar expressions.  If you are using AUC@TeX{}
with the font-latex library, a much better solution is to add the
@code{comment} environment to the variable
@code{LaTeX-verbatim-environments}.}:

@example
% BEGIN RECEIVE ORGTBL salesfigures
% END RECEIVE ORGTBL salesfigures
\begin@{comment@}
#+ORGTBL: SEND salesfigures orgtbl-to-latex
| Month | Days | Nr sold | per day |
|-------+------+---------+---------|
| Jan   |   23 |      55 |     2.4 |
| Feb   |   21 |      16 |     0.8 |
| March |   22 |     278 |    12.6 |
#+TBLFM: $4=$3/$2;%.1f
% $ (optional extra dollar to keep font-lock happy, see footnote)
\end@{comment@}
@end example

@noindent
When you are done, press @kbd{C-c C-c} in the table to get the converted
table inserted between the two marker lines.

Now let's assume you want to make the table header by hand, because you want
to control how columns are aligned, etc@.  In this case we make sure that
the table translator skips the first 2 lines of the source table, and tell
the command to work as a @i{splice}, i.e.@: to not produce header and footer
commands of the target table:

@example
\begin@{tabular@}@{lrrr@}
Month & \multicolumn@{1@}@{c@}@{Days@} & Nr.\ sold & per day\\
% BEGIN RECEIVE ORGTBL salesfigures
% END RECEIVE ORGTBL salesfigures
\end@{tabular@}
%
\begin@{comment@}
#+ORGTBL: SEND salesfigures orgtbl-to-latex :splice t :skip 2
| Month | Days | Nr sold | per day |
|-------+------+---------+---------|
| Jan   |   23 |      55 |     2.4 |
| Feb   |   21 |      16 |     0.8 |
| March |   22 |     278 |    12.6 |
#+TBLFM: $4=$3/$2;%.1f
\end@{comment@}
@end example

The @LaTeX{} translator function @code{orgtbl-to-latex} is already part of
Orgtbl mode.  It uses a @code{tabular} environment to typeset the table and
marks horizontal lines with @code{\hline}.  Furthermore, it interprets the
following parameters (see also @pxref{Translator functions}):

@table @code
@item :splice nil/t
When set to t, return only table body lines, don't wrap them into a tabular
environment.  Default is nil.

@item :fmt fmt
A format to be used to wrap each field, it should contain @code{%s} for the
original field value.  For example, to wrap each field value in dollars, you
could use @code{:fmt "$%s$"}.  This may also be a property list with column
numbers and formats. for example @code{:fmt (2 "$%s$" 4 "%s\\%%")}.  A
function of one argument can be used in place of the strings; the function
must return a formatted string.

@item :efmt efmt
Use this format to print numbers with exponentials.  The format should have
@code{%s} twice for inserting mantissa and exponent, for example
@code{"%s\\times10^@{%s@}"}.  The default is @code{"%s\\,(%s)"}.  This may
also be a property list with column numbers and formats, for example
@code{:efmt (2 "$%s\\times10^@{%s@}$" 4 "$%s\\cdot10^@{%s@}$")}.  After
@code{efmt} has been applied to a value, @code{fmt} will also be applied.
Similar to @code{fmt}, functions of two arguments can be supplied instead of
strings.
@end table

@node Translator functions, ラジオリスト, A LaTeX example, Tables in arbitrary syntax
@subsection Translator functions
@cindex HTML, and Orgtbl mode
@cindex translator function

Orgtbl mode has several translator functions built-in: @code{orgtbl-to-csv}
(comma-separated values), @code{orgtbl-to-tsv} (TAB-separated values)
@code{orgtbl-to-latex}, @code{orgtbl-to-html}, and
@code{orgtbl-to-texinfo}.  Except for @code{orgtbl-to-html}@footnote{The HTML translator uses the same code that produces tables during HTML
export.}, these all use a generic translator, @code{orgtbl-to-generic}.  For
example, @code{orgtbl-to-latex} itself is a very short function that
computes the column definitions for the @code{tabular} environment, defines
a few field and line separators and then hands processing over to the
generic translator.  Here is the entire code:

@lisp
@group
(defun orgtbl-to-latex (table params)
  "Convert the Orgtbl mode TABLE to LaTeX."
  (let* ((alignment (mapconcat (lambda (x) (if x "r" "l"))
                               org-table-last-alignment ""))
         (params2
          (list
           :tstart (concat "\\begin@{tabular@}@{" alignment "@}")
           :tend "\\end@{tabular@}"
           :lstart "" :lend " \\\\" :sep " & "
           :efmt "%s\\,(%s)" :hline "\\hline")))
    (orgtbl-to-generic table (org-combine-plists params2 params))))
@end group
@end lisp

As you can see, the properties passed into the function (variable
@var{PARAMS}) are combined with the ones newly defined in the function
(variable @var{PARAMS2}).  The ones passed into the function (i.e.@: the
ones set by the @samp{ORGTBL SEND} line) take precedence.  So if you would
like to use the @LaTeX{} translator, but wanted the line endings to be
@samp{\\[2mm]} instead of the default @samp{\\}, you could just overrule the
default with

@example
#+ORGTBL: SEND test orgtbl-to-latex :lend " \\\\[2mm]"
@end example

For a new language, you can either write your own converter function in
analogy with the @LaTeX{} translator, or you can use the generic function
directly.  For example, if you have a language where a table is started with
@samp{!BTBL!}, ended with @samp{!ETBL!}, and where table lines are started
with @samp{!BL!}, ended with @samp{!EL!}, and where the field separator is a
TAB, you could call the generic translator like this (on a single line!):

@example
#+ORGTBL: SEND test orgtbl-to-generic :tstart "!BTBL!" :tend "!ETBL!"
                              :lstart "!BL! " :lend " !EL!" :sep "\t"
@end example

@noindent
Please check the documentation string of the function
@code{orgtbl-to-generic} for a full list of parameters understood by that
function, and remember that you can pass each of them into
@code{orgtbl-to-latex}, @code{orgtbl-to-texinfo}, and any other function
using the generic function.

Of course you can also write a completely new function doing complicated
things the generic translator cannot do.  A translator function takes two
arguments.  The first argument is the table, a list of lines, each line
either the symbol @code{hline} or a list of fields.  The second argument is
the property list containing all parameters specified in the @samp{#+ORGTBL: SEND} line.  The function must return a single string containing the
formatted table.  If you write a generally useful translator, please post it
on @email{emacs-orgmode@@gnu.org} so that others can benefit from your work.

@node ラジオリスト, , Translator functions, Tables in arbitrary syntax
@subsection ラジオリスト
@cindex radio lists
@cindex org-list-insert-radio-list

Sending and receiving radio lists works exactly the same way as sending and
receiving radio tables (@pxref{Radio tables}).  As for radio tables, you can
insert radio list templates in HTML, @LaTeX{} and Texinfo modes by calling
@code{org-list-insert-radio-list}.

Here are the differences with radio tables:

@itemize @minus
@item
Orgstruct mode must be active.
@item
Use the @code{ORGLST} keyword instead of @code{ORGTBL}.
@item
The available translation functions for radio lists don't take parameters.
@item
@kbd{C-c C-c} will work when pressed on the first item of the list.
@end itemize

Here is a @LaTeX{} example.  Let's say that you have this in your @LaTeX{}
file:

@cindex #+ORGLST
@example
% BEGIN RECEIVE ORGLST to-buy
% END RECEIVE ORGLST to-buy
\begin@{comment@}
#+ORGLST: SEND to-buy org-list-to-latex
- a new house
- a new computer
  + a new keyboard
  + a new mouse
- a new life
\end@{comment@}
@end example

Pressing `C-c C-c' on @code{a new house} and will insert the converted
@LaTeX{} list between the two marker lines.

@node Dynamic blocks, Special agenda views, Tables in arbitrary syntax, Hacking
@section Dynamic blocks
@cindex dynamic blocks

Org documents can contain @emph{dynamic blocks}.  These are specially marked
regions that are updated by some user-written function.  A good example for
such a block is the clock table inserted by the command @kbd{C-c C-x C-r}
(@pxref{Clocking work time}).

Dynamic blocks are enclosed by a BEGIN-END structure that assigns a name to
the block and can also specify parameters for the function producing the
content of the block.

@cindex #+BEGIN:dynamic block
@example
#+BEGIN: myblock :parameter1 value1 :parameter2 value2 ...

#+END:
@end example

Dynamic blocks are updated with the following commands

@table @kbd
@orgcmd{C-c C-x C-u,org-dblock-update} Update dynamic block at point.
@orgkey{C-u C-c C-x C-u} Update all dynamic blocks in the current file.
@end table

Updating a dynamic block means to remove all the text between BEGIN and END,
parse the BEGIN line for parameters and then call the specific writer
function for this block to insert the new content.  If you want to use the
original content in the writer function, you can use the extra parameter
@code{:content}.

For a block with name @code{myblock}, the writer function is
@code{org-dblock-write:myblock} with as only parameter a property list with
the parameters given in the begin line.  Here is a trivial example of a
block that keeps track of when the block update function was last run:

@example
#+BEGIN: block-update-time :format "on %m/%d/%Y at %H:%M"

#+END:
@end example

@noindent
The corresponding block writer function could look like this:

@lisp
(defun org-dblock-write:block-update-time (params)
   (let ((fmt (or (plist-get params :format) "%d. %m. %Y")))
     (insert "Last block update at: "
             (format-time-string fmt (current-time)))))
@end lisp

If you want to make sure that all dynamic blocks are always up-to-date, you
could add the function @code{org-update-all-dblocks} to a hook, for example
@code{before-save-hook}.  @code{org-update-all-dblocks} is written in a way
such that it does nothing in buffers that are not in @code{org-mode}.

You can narrow the current buffer to the current dynamic block (like any
other block) with @code{org-narrow-to-block}.

@node Special agenda views, Extracting agenda information, Dynamic blocks, Hacking
@section Special agenda views
@cindex agenda views, user-defined

@vindex org-agenda-skip-function
@vindex org-agenda-skip-function-global
Org provides a special hook that can be used to narrow down the selection
made by these agenda views: @code{todo}, @code{alltodo}, @code{tags},
@code{tags-todo}, @code{tags-tree}.  You may specify a function that is used
at each match to verify if the match should indeed be part of the agenda
view, and if not, how much should be skipped.  You can specify a global
condition that will be applied to all agenda views, this condition would be
stored in the variable @code{org-agenda-skip-function-global}.  More
commonly, such a definition is applied only to specific custom searches,
using @code{org-agenda-skip-function}.

Let's say you want to produce a list of projects that contain a WAITING tag
anywhere in the project tree.  Let's further assume that you have marked all
tree headings that define a project with the TODO keyword PROJECT.  In this
case you would run a TODO search for the keyword PROJECT, but skip the match
unless there is a WAITING tag anywhere in the subtree belonging to the
project line.

To achieve this, you must write a function that searches the subtree for the
tag.  If the tag is found, the function must return @code{nil} to indicate
that this match should not be skipped.  If there is no such tag, return the
location of the end of the subtree, to indicate that search should continue
from there.

@lisp
(defun my-skip-unless-waiting ()
  "Skip trees that are not waiting"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (re-search-forward ":waiting:" subtree-end t)
        nil          ; tag found, do not skip
      subtree-end))) ; tag not found, continue after end of subtree
@end lisp

Now you may use this function in an agenda custom command, for example like
this:

@lisp
(org-add-agenda-custom-command
 '("b" todo "PROJECT"
   ((org-agenda-skip-function 'my-skip-unless-waiting)
    (org-agenda-overriding-header "Projects waiting for something: "))))
@end lisp

@vindex org-agenda-overriding-header
Note that this also binds @code{org-agenda-overriding-header} to get a
meaningful header in the agenda view.

@vindex org-odd-levels-only
@vindex org-agenda-skip-function
A general way to create custom searches is to base them on a search for
entries with a certain level limit.  If you want to study all entries with
your custom search function, simply do a search for
@samp{LEVEL>0}@footnote{Note that, when using @code{org-odd-levels-only}, a
level number corresponds to order in the hierarchy, not to the number of
stars.}, and then use @code{org-agenda-skip-function} to select the entries
you really want to have.

You may also put a Lisp form into @code{org-agenda-skip-function}.  In
particular, you may use the functions @code{org-agenda-skip-entry-if} and
@code{org-agenda-skip-subtree-if} in this form, for example:

@table @code
@item '(org-agenda-skip-entry-if 'scheduled)
Skip current entry if it has been scheduled.
@item '(org-agenda-skip-entry-if 'notscheduled)
Skip current entry if it has not been scheduled.
@item '(org-agenda-skip-entry-if 'deadline)
Skip current entry if it has a deadline.
@item '(org-agenda-skip-entry-if 'scheduled 'deadline)
Skip current entry if it has a deadline, or if it is scheduled.
@item '(org-agenda-skip-entry-if 'todo '("TODO" "WAITING"))
Skip current entry if the TODO keyword is TODO or WAITING.
@item '(org-agenda-skip-entry-if 'todo 'done)
Skip current entry if the TODO keyword marks a DONE state.
@item '(org-agenda-skip-entry-if 'timestamp)
Skip current entry if it has any timestamp, may also be deadline or
scheduled.
@item '(org-agenda-skip-entry 'regexp "regular expression")
Skip current entry if the regular expression matches in the entry.
@item '(org-agenda-skip-entry 'notregexp "regular expression")
Skip current entry unless the regular expression matches.
@item '(org-agenda-skip-subtree-if 'regexp "regular expression")
Same as above, but check and skip the entire subtree.
@end table

Therefore we could also have written the search for WAITING projects like
this, even without defining a special function:

@lisp
(org-add-agenda-custom-command
 '("b" todo "PROJECT"
   ((org-agenda-skip-function '(org-agenda-skip-subtree-if
                                'regexp ":waiting:"))
    (org-agenda-overriding-header "Projects waiting for something: "))))
@end lisp

@node Extracting agenda information, Using the property API, Special agenda views, Hacking
@section Extracting agenda information
@cindex agenda, pipe
@cindex Scripts, for agenda processing

@vindex org-agenda-custom-commands
Org provides commands to access agenda information for the command line in
Emacs batch mode.  This extracted information can be sent directly to a
printer, or it can be read by a program that does further processing of the
data.  The first of these commands is the function @code{org-batch-agenda},
that produces an agenda view and sends it as ASCII text to STDOUT.  The
command takes a single string as parameter.  If the string has length 1, it
is used as a key to one of the commands you have configured in
@code{org-agenda-custom-commands}, basically any key you can use after
@kbd{C-c a}.  For example, to directly print the current TODO list, you
could use

@example
emacs -batch -l ~/.emacs -eval '(org-batch-agenda "t")' | lpr
@end example

If the parameter is a string with 2 or more characters, it is used as a
tags/TODO match string.  For example, to print your local shopping list (all
items with the tag @samp{shop}, but excluding the tag @samp{NewYork}), you
could use

@example
emacs -batch -l ~/.emacs                                      \
      -eval '(org-batch-agenda "+shop-NewYork")' | lpr
@end example

@noindent
You may also modify parameters on the fly like this:

@example
emacs -batch -l ~/.emacs                                      \
   -eval '(org-batch-agenda "a"                               \
            org-agenda-span month                             \
            org-agenda-include-diary nil                      \
            org-agenda-files (quote ("~/org/project.org")))'  \
   | lpr
@end example

@noindent
which will produce a 30-day agenda, fully restricted to the Org file
@file{~/org/projects.org}, not even including the diary.

If you want to process the agenda data in more sophisticated ways, you can
use the command @code{org-batch-agenda-csv} to get a comma-separated list of
values for each agenda item.  Each line in the output will contain a number
of fields separated by commas.  The fields in a line are:

@example
category     @r{The category of the item}
head         @r{The headline, without TODO keyword, TAGS and PRIORITY}
type         @r{The type of the agenda entry, can be}
                todo               @r{selected in TODO match}
                tagsmatch          @r{selected in tags match}
                diary              @r{imported from diary}
                deadline           @r{a deadline}
                scheduled          @r{scheduled}
                timestamp          @r{appointment, selected by timestamp}
                closed             @r{entry was closed on date}
                upcoming-deadline  @r{warning about nearing deadline}
                past-scheduled     @r{forwarded scheduled item}
                block              @r{entry has date block including date}
todo         @r{The TODO keyword, if any}
tags         @r{All tags including inherited ones, separated by colons}
date         @r{The relevant date, like 2007-2-14}
time         @r{The time, like 15:00-16:50}
extra        @r{String with extra planning info}
priority-l   @r{The priority letter if any was given}
priority-n   @r{The computed numerical priority}
@end example

@noindent
Time and date will only be given if a timestamp (or deadline/scheduled)  led
to the selection of the item.

A CSV list like this is very easy to use in a post-processing script.  For
example, here is a Perl program that gets the TODO list from Emacs/Org and
prints all the items, preceded by a checkbox:

@example
#!/usr/bin/perl

# define the Emacs command to run
$cmd = "emacs -batch -l ~/.emacs -eval '(org-batch-agenda-csv \"t\")'";

# run it and capture the output
$agenda = qx@{$cmd 2>/dev/null@};

# loop over all lines
foreach $line (split(/\n/,$agenda)) @{
  # get the individual values
  ($category,$head,$type,$todo,$tags,$date,$time,$extra,
   $priority_l,$priority_n) = split(/,/,$line);
  # process and print
  print "[ ] $head\n";
@}
@end example

@node Using the property API, マッピングAPIを使う, Extracting agenda information, Hacking
@section Using the property API
@cindex プロパティのためのAPI
@cindex プロパティ（API）

Here is a description of the functions that can be used to work with
properties.

@defun org-entry-properties &optional pom which
Get all properties of the entry at point-or-marker POM.@* This includes the
TODO keyword, the tags, time strings for deadline, scheduled, and clocking,
and any additional properties defined in the entry.  The return value is an
alist.  Keys may occur multiple times if the property key was used several
times.@* POM may also be nil, in which case the current entry is used.  If
WHICH is nil or `all', get all properties.  If WHICH is `special' or
`standard', only get that subclass.
@end defun
@vindex org-use-property-inheritance
@defun org-entry-get pom property &optional inherit
Get value of PROPERTY for entry at point-or-marker POM.  By default, this
only looks at properties defined locally in the entry.  If INHERIT is
non-nil and the entry does not have the property, then also check higher
levels of the hierarchy.  If INHERIT is the symbol @code{selective}, use
inheritance if and only if the setting of
@code{org-use-property-inheritance} selects PROPERTY for inheritance.
@end defun

@defun org-entry-delete pom property
Delete the property PROPERTY from entry at point-or-marker POM.
@end defun

@defun org-entry-put pom property value
Set PROPERTY to VALUE for entry at point-or-marker POM.
@end defun

@defun org-buffer-property-keys &optional include-specials
Get all property keys in the current buffer.
@end defun

@defun org-insert-property-drawer
Insert a property drawer at point.
@end defun

@defun org-entry-put-multivalued-property pom property &rest values
Set PROPERTY at point-or-marker POM to VALUES.  VALUES should be a list of
strings.  They will be concatenated, with spaces as separators.
@end defun

@defun org-entry-get-multivalued-property pom property
Treat the value of the property PROPERTY as a whitespace-separated list of
values and return the values as a list of strings.
@end defun

@defun org-entry-add-to-multivalued-property pom property value
Treat the value of the property PROPERTY as a whitespace-separated list of
values and make sure that VALUE is in this list.
@end defun

@defun org-entry-remove-from-multivalued-property pom property value
Treat the value of the property PROPERTY as a whitespace-separated list of
values and make sure that VALUE is @emph{not} in this list.
@end defun

@defun org-entry-member-in-multivalued-property pom property value
Treat the value of the property PROPERTY as a whitespace-separated list of
values and check if VALUE is in this list.
@end defun

@defopt org-property-allowed-value-functions
Hook for functions supplying allowed values for a specific property.  The
functions must take a single argument, the name of the property, and return
a flat list of allowed values.  If @samp{:ETC} is one of the values, use the
values as completion help, but allow also other values to be entered.  The
functions must return @code{nil} if they are not responsible for this
property.
@end defopt

@node マッピングAPIを使う, , Using the property API, Hacking
@section マッピングAPIを使う
@cindex API, for mapping
@cindex mapping entries, API

Org has sophisticated mapping capabilities to find all entries satisfying
certain criteria.  Internally, this functionality is used to produce agenda
views, but there is also an API that can be used to execute arbitrary
functions for each or selected entries.  The main entry point for this API
is:

@defun org-map-entries func &optional match scope &rest skip
Call FUNC at each headline selected by MATCH in SCOPE.

FUNC is a function or a Lisp form.  The function will be called without
arguments, with the cursor positioned at the beginning of the headline.  The
return values of all calls to the function will be collected and returned as
a list.

The call to FUNC will be wrapped into a save-excursion form, so FUNC does
not need to preserve point.  After evaluation, the cursor will be moved to
the end of the line (presumably of the headline of the processed entry) and
search continues from there.  Under some circumstances, this may not produce
the wanted results.  For example, if you have removed (e.g.@: archived) the
current (sub)tree it could mean that the next entry will be skipped
entirely.  In such cases, you can specify the position from where search
should continue by making FUNC set the variable `org-map-continue-from' to
the desired buffer position.

MATCH is a tags/property/todo match as it is used in the agenda match view.
Only headlines that are matched by this query will be considered during the
iteration.  When MATCH is nil or t, all headlines will be visited by the
iteration.

SCOPE determines the scope of this command.  It can be any of:

@example
nil     @r{the current buffer, respecting the restriction if any}
tree    @r{the subtree started with the entry at point}
file    @r{the current buffer, without restriction}
file-with-archives
        @r{the current buffer, and any archives associated with it}
agenda  @r{all agenda files}
agenda-with-archives
        @r{all agenda files with any archive files associated with them}
(file1 file2 ...)
        @r{if this is a list, all files in the list will be scanned}
@end example
@noindent
The remaining args are treated as settings for the skipping facilities of
the scanner.  The following items can be given here:

@vindex org-agenda-skip-function
@example
archive   @r{skip trees with the archive tag}
comment   @r{skip trees with the COMMENT keyword}
function or Lisp form
          @r{will be used as value for @code{org-agenda-skip-function},}
          @r{so whenever the function returns t, FUNC}
          @r{will not be called for that entry and search will}
          @r{continue from the point where the function leaves it}
@end example
@end defun

The function given to that mapping routine can really do anything you like.
It can use the property API (@pxref{Using the property API}) to gather more
information about the entry, or in order to change metadata in the entry.
Here are a couple of functions that might be handy:

@defun org-todo &optional arg
Change the TODO state of the entry.  See the docstring of the functions for
the many possible values for the argument ARG.
@end defun

@defun org-priority &optional action
Change the priority of the entry.  See the docstring of this function for
the possible values for ACTION.
@end defun

@defun org-toggle-tag tag &optional onoff
Toggle the tag TAG in the current entry.  Setting ONOFF to either @code{on}
or @code{off} will not toggle tag, but ensure that it is either on or off.
@end defun

@defun org-promote
Promote the current entry.
@end defun

@defun org-demote
Demote the current entry.
@end defun

Here is a simple example that will turn all entries in the current file with
a tag @code{TOMORROW} into TODO entries with the keyword @code{UPCOMING}.
Entries in comment trees and in archive trees will be ignored.

@lisp
(org-map-entries
   '(org-todo "UPCOMING")
   "+TOMORROW" 'file 'archive 'comment)
@end lisp

The following example counts the number of entries with TODO keyword
@code{WAITING}, in all agenda files.

@lisp
(length (org-map-entries t "/+WAITING" 'agenda))
@end lisp

@node MobileOrg, History and Acknowledgments, Hacking, Top
@appendix MobileOrg
@cindex iPhone
@cindex MobileOrg

@uref{http://mobileorg.ncogni.to/, MobileOrg} はRichard
Morelandよって開発された@i{iPhone/iPod Touch}
シリーズの携帯端末のためのアプリケーションです。@i{MobileOrg}は「リアル」のコン
ピュータ上にあるOrg-modeシステムのために、オフラインのビューとキャプチャーに
よるサポートを提供します。その機能によって、実際のエントリーがどのように変化
したかについて記録することができます。AndroidのユーザーはMatt
Jonesよって作成された@uref{http://wiki.github.com/matburt/mobileorg-android/, MobileOrg Android}の
アプリをチェックしてください。

この付録では、@i{MobileOrg}で表示されるフォーマットの中でアジェンダビューを作成
し、キャプチャーされたノートと@i{MobileOrg}で変更を、メインのシステムに統合して
いくために、Org-modeのサポートについて説明します。

MobileOrgの中でタグやTODOの状態を変更するためには、あなたは、例え、ひとつひと
つのファイルが、一部しか使っていないとしても、全ての重要なタグやTODOキーワー
ドを網羅するように@code{org-todo-keywords}と@code{org-tags-alist}変数のカスタマイズを設
定しなければなりません。MobileOrgは、同様にインバッファの設定で状態やタグを提
供しますが、これらの変数の中で設定されているものについてのみ、TODOの状態につ
いての@i{設定}
(@pxref{Per-file keywords}) や@i{相互に排他的な} タグ (@pxref{Setting tags})
についての装備状況を理解してください。

@menu
* Setting up the staging area::  モバイルデバイスとはどこでデータをやりとりす
れば良いですか？
* Pushing to MobileOrg::     Orgファイルとアジェンダをアップロードする
* MobileOrgからpullする::  キャプチャした項目とフラグを立てた項目を統合する
@end menu

@node Setting up the staging area, Pushing to MobileOrg, MobileOrg, MobileOrg
@section Setting up the staging area

MobileOrgはサーバー上のディレクトリを通して、Emacsと相互に連携させる必要があ
ります。もしも公開のサーバーを使用しているなら、そのサーバーにアップロードさ
れるファイルを暗号化したいと考えるかもしれません。この機能はOrg-mode7.02の
@i{MobileOrg 1.5}（iPhoneバージョン）で実現していますが、あなたのシステムに @file{openssl}
をインストールしておく必要があるでしょう。暗号化するために、@i{MobileOrg}にパス
ワードを設定し、Emacs上では、@code{org-mobile-use-encryption}
@footnote{もしもあなたのEmacsの設定ファイルの中にパスワードを安全に保存したいならば、@code{org-mobile-encryption-password}変数を設定すると良いでしょう。その変数の説明文を読んでください。暗号化は、@file{.org}
ファイルの内容のみに適用されることに注意してください。ファイルの名称そのもの
は、そのまま表示されます。}変数を設定しておく必要があります。

無料の@uref{http://dropbox.com,Dropbox.com}のアカウント
@footnote{もしもDropboxを利用できない場合、またはMobileOrgのバージョンがそれをサポートしていない場合には、webdavサーバが利用できます。詳しい情報を得るには、MobileOrgの説明部と@uref{http://orgmode.org/worg/org-faq.html#mobileorg_webdav, FAQ
entry}をチェックしてください。}を使い、ディレクトリを作成するのが最も簡単な方
法です。MobileOrgで最初にDropboxに接続したときにDropboxの中にMobileOrgのディ
レクトリが作成されます。そのディレクトリが作成されたあと、次のようにEmacsに書
き込みます。

@lisp
(setq org-mobile-directory "~/Dropbox/MobileOrg")
@end lisp

Org-modeはそのディレクトリの中に、@i{MobileOrg}用のファイルを置いたり、そこから
キャプチャーされたノートを読み込んだりするコマンドを持っています。

@node Pushing to MobileOrg, MobileOrgからpullする, Setting up the staging area, MobileOrg
@section Pushing to MobileOrg

この操作では、@code{org-mobile-files}の中にリストアップされている全てのファイルを
、@code{org-mobile-directory}で指定したディレクトリにコピーします。デフォルトでは
このリストにはすべてのアジェンダファイル（@code{org-agenda-files}に登録されている
）を含んでいます。しかしながら、@code{org-mobiles-files}をカスタマイズすることでフ
ァイルを追加できます。ファイル名は、@code{org-directory}との相対パスで登録されるの
で、すべてのファイルがこのディレクトリの中に入ることになります。プッシュする
操作で、ユーザー
@footnote{アジェンダを作成する際に、Org-modeではすべての参照されるエントリーにID属性を強制的に付加します。そのため、これらのエントリーは、将来の行動のために、それらのエントリーに@i{MobileOrg}によってフラグを付けたとしても、ユニークなものとして識別されます。もしも、こんなにも沢山のエントリーにそういう属性値をつけたくない場合は、@code{org-mobile-force-id-on-agenda-items}変数を@code{nil}と設定してください。Org-modeは、各エントリーが十分ユニークであることを期待したうえで、アウトラインの階層構造に依存することになるでしょう。}に
よって定義されたすべてのカスタマイズされたアジェンダビューを持った@file{agendas.org}と
いう特別なOrg-modeファイルを作成します。最後に、Org-modeは全ての他のファイル
へのリンクを含んだ@file{index.org}というファイルを書き込みます。@i{MobileOrg}は、最
初サーバーからこのファイルを読み込み、それから、そこに置かれているすべてのア
ジェンダファイルとOrg-modeファイルをダウンロードします。ダウンロードのスピー
ドを上げるために、MobileOrgは、どのファイルのチェック記号
@footnote{@file{checksums.dat}というファイルの中に自動的に保存されます。}が変更されたかどうかを読み取るだけな
のです。

@node MobileOrgからpullする, , Pushing to MobileOrg, MobileOrg
@section MobileOrgからpullする

@i{MobileOrg}がサーバーと同期する際に、Org-modeのファイルを閲覧するために呼び出
すだけではありません。それによってサーバー上の@file{mobileorg.org}というファイルに
対して、フラグがつけられたり、変更されたりしたエントリーに対して、キャプチャ
ーされたエントリーやポインターを追加します。Org-modeでは、この情報をInBoxファ
イルに統合し、フラッグがつけられたエントリーにポインタを使って操作するという
@emph{pull}の操作機能をもっています。どのように動作するのでしょうか。

@enumerate
@item
Org-modeは、@file{mobileorg.org}
@footnote{@file{mobileorg.org}はこの操作のあとで空になります。}の中で発見した全てのエントリーを移動し、@code{org-mobile-inbox-for-pull}変
数によって、ポインターが付けられたファイルに追加します。記録されたエントリと
編集されたイベントは、それぞれInBoxファイル中でトップレベルのエントリーとして
位置づけられるでしょう。
@item
エントリーを移動したあと、Org-modeは、@i{MobileOrg}の中で作られた変更を実行する
ことを試みます。いくつかの変更は直接、ユーザーの確認無しに適用されます。例で
は、タグ、TODOの状態、見出しそして本文に対するすべての変更がはっきりと適用さ
れるというものです。将来の行動のために、フラグを付けられたエントリーは、@code{:FLAGGED:}と
いうタグが付けられるでしょう。そのため、再び簡単に見つけることができるでしょ
う。あるエントリを探したり、変更を適用するさいに問題があれば、ポインターのつ
いたエントリーはinboxに残され、エラーメッセージの印がつけられるでしょう。あな
たはあとでこれらの案件を手動で解決する必要があります。
@item
Org-modeでは、その際にフラグがつけられたすべてのエントリーとともに、アジェン
ダビューを作成できます。そしてユーザーはそれらの項目をやり終えたり、必要な行
動を実行するでしょう。@i{MobileOrg}のエントリーにフラグが付けられている間に、ノ
ートが保存されていたら、そのノートは、カーソルがアジェンダの行の上に置かれた
時に、エコーエリア上に表示されるでしょう。
@table @kbd
@kindex ?
@item ?
そういう特別なアジェンダの中で、@kbd{?}が入力されたときには、別のウインドウでフラ
グの付けられたノートの全てが表示され、キルリング上に内容がコピーされます。そ
して、@kbd{? z C-y C-c
C-c}を使用することで、フラグのつけられたノートを、そのエントリーの通常のノー
トとして保存することができます。@kbd{?}を２度続けて入力すると、（プロパティの中に
保存されていた）記録されているフラグの付いたノートと一緒に、@code{:FLAGGED:}という
タグを削除するよう指示したことになります。この方法で、あなたはこのフラグの付
けられたエントリーを意図したプロセスで完了させるという指示をすることになりま
す。
@end table
@end enumerate

@kindex C-c a ?
もしも、すべてのフラグのついたエントリーを直接処理することができないならば、
あなたは@kbd{C-c a ?}を入力して、アジェンダビュー
@footnote{しかしながら、微妙な差があることに注意してください。@kbd{M-x org-mobile-pull @key{RET}}によって、自動的に作成されたビューは、最後にpullされて配置されたすべてのファイルを検索することを保証されています。これは、あなたのアジェンダファイルのリストに、現在含まれていないファイルも含みます。もしもあなたが、ビューを再作成するために、@kbd{C-c a ?}を最後に使用したならば、カレントのアジェンダファイルのみが検索されます。}に
いつでも戻ることができます。

@node History and Acknowledgments, Main Index, MobileOrg, Top
@appendix History and acknowledgments
@cindex acknowledgments
@cindex history
@cindex thanks

Org was born in 2003, out of frustration over the user interface of the
Emacs Outline mode.  I was trying to organize my notes and projects, and
using Emacs seemed to be the natural way to go.  However, having to remember
eleven different commands with two or three keys per command, only to hide
and show parts of the outline tree, that seemed entirely unacceptable to
me.  Also, when using outlines to take notes, I constantly wanted to
restructure the tree, organizing it parallel to my thoughts and plans.
@emph{Visibility cycling} and @emph{structure editing} were originally
implemented in the package @file{outline-magic.el}, but quickly moved to the
more general @file{org.el}.  As this environment became comfortable for
project planning, the next step was adding @emph{TODO entries}, basic
@emph{timestamps}, and @emph{table support}.  These areas highlighted the
two main goals that Org still has today: to be a new, outline-based, plain
text mode with innovative and intuitive editing features, and to incorporate
project planning functionality directly into a notes file.

Since the first release, literally thousands of emails to me or to
@email{emacs-orgmode@@gnu.org} have provided a constant stream of bug
reports, feedback, new ideas, and sometimes patches and add-on code.  Many
thanks to everyone who has helped to improve this package.  I am trying to
keep here a list of the people who had significant influence in shaping one
or more aspects of Org.  The list may not be complete, if I have forgotten
someone, please accept my apologies and let me know.

Before I get to this list, a few special mentions are in order:

@table @i
@item Bastien Guerry
Bastien has written a large number of extensions to Org (most of them
integrated into the core by now), including the LaTeX exporter and the plain
list parser.  His support during the early days, when he basically acted as
co-maintainer, was central to the success of this project.  Bastien also
invented Worg, helped establishing the Web presence of Org, and sponsors
hosting costs for the orgmode.org website.
@item Eric Schulte and Dan Davison
Eric and Dan are jointly responsible for the Org-babel system, which turns
Org into a multi-language environment for evaluating code and doing literate
programming and reproducible research.
@item John Wiegley
John has contributed a number of great ideas and patches directly to Org,
including the attachment system (@file{org-attach.el}), integration with
Apple Mail (@file{org-mac-message.el}), hierarchical dependencies of TODO
items, habit tracking (@file{org-habits.el}), and encryption
(@file{org-crypt.el}).  Also, the capture system is really an extended copy
of his great @file{remember.el}.
@item Sebastian Rose
Without Sebastian, the HTML/XHTML publishing of Org would be the pitiful
work of an ignorant amateur.  Sebastian has pushed this part of Org onto a
much higher level.  He also wrote @file{org-info.js}, a Java script for
displaying webpages derived from Org using an Info-like or a folding
interface with single-key navigation.
@end table

@noindent OK, now to the full list of contributions!  Again, please let me
know what I am missing here!

@itemize @bullet

@item
@i{Russel Adams} came up with the idea for drawers.
@item
@i{Thomas Baumann} wrote @file{org-bbdb.el} and @file{org-mhe.el}.
@item
@i{Christophe Bataillon} created the great unicorn logo that we use on the
Org-mode website.
@item
@i{Alex Bochannek} provided a patch for rounding timestamps.
@item
@i{Jan Böcker} wrote @file{org-docview.el}.
@item
@i{Brad Bozarth} showed how to pull RSS feed data into Org-mode files.
@item
@i{Tom Breton} wrote @file{org-choose.el}.
@item
@i{Charles Cave}'s suggestion sparked the implementation of templates for
Remember, which are now templates for capture.
@item
@i{Pavel Chalmoviansky} influenced the agenda treatment of items with
specified time.
@item
@i{Gregory Chernov} patched support for Lisp forms into table calculations
and improved XEmacs compatibility, in particular by porting
@file{nouline.el} to XEmacs.
@item
@i{Sacha Chua} suggested copying some linking code from Planner.
@item
@i{Baoqiu Cui} contributed the DocBook exporter.
@item
@i{Eddward DeVilla} proposed and tested checkbox statistics.  He also came
up with the idea of properties, and that there should be an API for them.
@item
@i{Nick Dokos} tracked down several nasty bugs.
@item
@i{Kees Dullemond} used to edit projects lists directly in HTML and so
inspired some of the early development, including HTML export.  He also
asked for a way to narrow wide table columns.
@item
@i{Thomas S. Dye} contributed documentation on Worg and helped integrating
the Org-Babel documentation into the manual.
@item
@i{Christian Egli} converted the documentation into Texinfo format, inspired
the agenda, patched CSS formatting into the HTML exporter, and wrote
@file{org-taskjuggler.el}.
@item
@i{David Emery} provided a patch for custom CSS support in exported HTML
agendas.
@item
@i{Nic Ferrier} contributed mailcap and XOXO support.
@item
@i{Miguel A. Figueroa-Villanueva} implemented hierarchical checkboxes.
@item
@i{John Foerch} figured out how to make incremental search show context
around a match in a hidden outline tree.
@item
@i{Raimar Finken} wrote @file{org-git-line.el}.
@item
@i{Mikael Fornius} works as a mailing list moderator.
@item
@i{Austin Frank} works as a mailing list moderator.
@item
@i{Eric Fraga} drove the development of BEAMER export with ideas and
testing.
@item
@i{Barry Gidden} did proofreading the manual in preparation for the book
publication through Network Theory Ltd.
@item
@i{Niels Giesen} had the idea to automatically archive DONE trees.
@item
@i{Nicolas Goaziou} rewrote much of the plain list code.
@item
@i{Kai Grossjohann} pointed out key-binding conflicts with other packages.
@item
@i{Brian Gough} of Network Theory Ltd publishes the Org mode manual as a
book.
@item
@i{Bernt Hansen} has driven much of the support for auto-repeating tasks,
task state change logging, and the clocktable.  His clear explanations have
been critical when we started to adopt the Git version control system.
@item
@i{Manuel Hermenegildo} has contributed various ideas, small fixes and
patches.
@item
@i{Phil Jackson} wrote @file{org-irc.el}.
@item
@i{Scott Jaderholm} proposed footnotes, control over whitespace between
folded entries, and column view for properties.
@item
@i{Matt Jones} wrote @i{MobileOrg Android}.
@item
@i{Tokuya Kameshima} wrote @file{org-wl.el} and @file{org-mew.el}.
@item
@i{Shidai Liu} ("Leo") asked for embedded @LaTeX{} and tested it.  He also
provided frequent feedback and some patches.
@item
@i{Matt Lundin} has proposed last-row references for table formulas and
named invisible anchors.  He has also worked a lot on the FAQ.
@item
@i{David Maus} wrote @file{org-atom.el}, maintains the issues file for Org,
and is a prolific contributor on the mailing list with competent replies,
small fixes and patches.
@item
@i{Jason F. McBrayer} suggested agenda export to CSV format.
@item
@i{Max Mikhanosha} came up with the idea of refiling.
@item
@i{Dmitri Minaev} sent a patch to set priority limits on a per-file basis.
@item
@i{Stefan Monnier} provided a patch to keep the Emacs-Lisp compiler happy.
@item
@i{Richard Moreland} wrote @i{MobileOrg} for the iPhone.
@item
@i{Rick Moynihan} proposed allowing multiple TODO sequences in a file and
being able to quickly restrict the agenda to a subtree.
@item
@i{Todd Neal} provided patches for links to Info files and Elisp forms.
@item
@i{Greg Newman} refreshed the unicorn logo into its current form.
@item
@i{Tim O'Callaghan} suggested in-file links, search options for general file
links, and TAGS.
@item
@i{Osamu Okano} wrote @file{orgcard2ref.pl}, a Perl program to create a text
version of the reference card.
@item
@i{Takeshi Okano} translated the manual and David O'Toole's tutorial into
Japanese.
@item
@i{Oliver Oppitz} suggested multi-state TODO items.
@item
@i{Scott Otterson} sparked the introduction of descriptive text for links,
among other things.
@item
@i{Pete Phillips} helped during the development of the TAGS feature, and
provided frequent feedback.
@item
@i{Martin Pohlack} provided the code snippet to bundle character insertion
into bundles of 20 for undo.
@item
@i{T.V. Raman} reported bugs and suggested improvements.
@item
@i{Matthias Rempe} (Oelde) provided ideas, Windows support, and quality
control.
@item
@i{Paul Rivier} provided the basic implementation of named footnotes.  He
also acted as mailing list moderator for some time.
@item
@i{Kevin Rogers} contributed code to access VM files on remote hosts.
@item
@i{Frank Ruell} solved the mystery of the @code{keymapp nil} bug, a conflict
with @file{allout.el}.
@item
@i{Jason Riedy} generalized the send-receive mechanism for Orgtbl tables
with extensive patches.
@item
@i{Philip Rooke} created the Org reference card, provided lots of feedback,
developed and applied standards to the Org documentation.
@item
@i{Christian Schlauer} proposed angular brackets around links, among other
things.
@item
@i{Paul Sexton} wrote @file{org-ctags.el}.
@item
Linking to VM/BBDB/Gnus was first inspired by @i{Tom Shannon}'s
@file{organizer-mode.el}.
@item
@i{Ilya Shlyakhter} proposed the Archive Sibling, line numbering in literal
examples, and remote highlighting for referenced code lines.
@item
@i{Stathis Sideris} wrote the @file{ditaa.jar} ASCII to PNG converter that
is now packaged into Org's @file{contrib} directory.
@item
@i{Daniel Sinder} came up with the idea of internal archiving by locking
subtrees.
@item
@i{Dale Smith} proposed link abbreviations.
@item
@i{James TD Smith} has contributed a large number of patches for useful
tweaks and features.
@item
@i{Adam Spiers} asked for global linking commands, inspired the link
extension system, added support for mairix, and proposed the mapping API.
@item
@i{Ulf Stegemann} created the table to translate special symbols to HTML,
LaTeX, UTF-8, Latin-1 and ASCII.
@item
@i{Andy Stewart} contributed code to @file{org-w3m.el}, to copy HTML content
with links transformation to Org syntax.
@item
@i{David O'Toole} wrote @file{org-publish.el} and drafted the manual chapter
about publishing.
@item
@i{Sebastien Vauban} reported many issues with LaTeX and BEAMER export and
enabled source code highlighling in Gnus.
@item
@i{Stefan Vollmar} organized a video-recorded talk at the
Max-Planck-Institute for Neurology.  He also inspired the creation of a
concept index for HTML export.
@item
@i{J@"urgen Vollmer} contributed code generating the table of contents in
HTML output.
@item
@i{Samuel Wales} has provided important feedback and bug reports.
@item
@i{Chris Wallace} provided a patch implementing the @samp{QUOTE} keyword.
@item
@i{David Wainberg} suggested archiving, and improvements to the linking
system.
@item
@i{Carsten Wimmer} suggested some changes and helped fix a bug in linking to
Gnus.
@item
@i{Roland Winkler} requested additional key bindings to make Org work on a
tty.
@item
@i{Piotr Zielinski} wrote @file{org-mouse.el}, proposed agenda blocks and
contributed various ideas and code snippets.
@end itemize


@node Main Index, Key Index, History and Acknowledgments, Top
@unnumbered Concept index

@printindex cp

@node Key Index, Command and Function Index, Main Index, Top
@unnumbered Key index

@printindex ky

@node Command and Function Index, Variable Index, Key Index, Top
@unnumbered Command and function index

@printindex fn

@node Variable Index, , Command and Function Index, Top
@unnumbered Variable index

This is not a complete index of variables and faces, only the ones that are
mentioned in the manual.  For a more complete list, use @kbd{M-x org-customize @key{RET}} and then click yourself through the tree.

@printindex vr

@bye

@ignore
        arch-tag: 7893d1Fe-cc57-4d13-b5e5-f494a1CBC7ac
@end ignore

@c Local variables:
@c fill-column: 77
@c indent-tabs-mode: nil
@c paragraph-start:    "\\|^@[a-zA-Z]*[ \n]\\|^@x?org\\(key\\|cmd\\)\\|\f\\|[ 	]*$"
@c paragraph-separate: "\\|^@[a-zA-Z]*[ \n]\\|^@x?org\\(key\\|cmd\\)\\|[ 	\f]*$"
@c End:


@c  LocalWords:  webdavhost pre
